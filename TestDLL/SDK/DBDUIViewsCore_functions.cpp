#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "DBDUIViewsCore_classes.hpp"
#include "DBDUIViewsCore_parameters.hpp"


namespace SDK
{

// Function DBDUIViewsCore.CoreBaseUserWidget.DeregisterFromInput
// (Native, Public, BlueprintCallable)

void UCoreBaseUserWidget::DeregisterFromInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "DeregisterFromInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.OnControlModeChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// EControlMode                            ControlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseUserWidget::OnControlModeChangedBP(EControlMode ControlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "OnControlModeChangedBP");

	Params::CoreBaseUserWidget_OnControlModeChangedBP Parms{};

	Parms.ControlMode = ControlMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             AnimName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Starttime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Loopcount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    PlayMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseUserWidget::PlayAnimationByName(class FName AnimName, float Starttime, int32 Loopcount, EUMGSequencePlayMode PlayMode, float PlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "PlayAnimationByName");

	Params::CoreBaseUserWidget_PlayAnimationByName Parms{};

	Parms.AnimName = AnimName;
	Parms.Starttime = Starttime;
	Parms.Loopcount = Loopcount;
	Parms.PlayMode = PlayMode;
	Parms.PlaybackSpeed = PlaybackSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByNameWithFinishedDelegate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             AnimName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       AnimationFinishedDelegate                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Starttime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Loopcount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    PlayMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UWidgetAnimation*           ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UWidgetAnimation* UCoreBaseUserWidget::PlayAnimationByNameWithFinishedDelegate(class FName AnimName, TDelegate<void()> AnimationFinishedDelegate, float Starttime, int32 Loopcount, EUMGSequencePlayMode PlayMode, float PlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "PlayAnimationByNameWithFinishedDelegate");

	Params::CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate Parms{};

	Parms.AnimName = AnimName;
	Parms.AnimationFinishedDelegate = AnimationFinishedDelegate;
	Parms.Starttime = Starttime;
	Parms.Loopcount = Loopcount;
	Parms.PlayMode = PlayMode;
	Parms.PlaybackSpeed = PlaybackSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.RegisterForInput
// (Native, Public, BlueprintCallable)

void UCoreBaseUserWidget::RegisterForInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "RegisterForInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.StopAnimationByName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             AnimName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseUserWidget::StopAnimationByName(class FName AnimName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "StopAnimationByName");

	Params::CoreBaseUserWidget_StopAnimationByName Parms{};

	Parms.AnimName = AnimName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.UpdateScale
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseUserWidget::UpdateScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "UpdateScale");

	Params::CoreBaseUserWidget_UpdateScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.GetAnimationByName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             AnimName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UCoreBaseUserWidget::GetAnimationByName(class FName AnimName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "GetAnimationByName");

	Params::CoreBaseUserWidget_GetAnimationByName Parms{};

	Parms.AnimName = AnimName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.BaseFilterWidget.OnCheckBoxToggled
// (Native, Protected)

void UBaseFilterWidget::OnCheckBoxToggled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "OnCheckBoxToggled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BaseFilterWidget.OnPlayerClick
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBaseFilterWidget::OnPlayerClick(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "OnPlayerClick");

	Params::BaseFilterWidget_OnPlayerClick Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BaseFilterWidget.OnWidgetVisibilityChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseFilterWidget::OnWidgetVisibilityChanged(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "OnWidgetVisibilityChanged");

	Params::BaseFilterWidget_OnWidgetVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BaseFilterWidget.ToggleWidgetVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBaseFilterWidget::ToggleWidgetVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "ToggleWidgetVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreChallengeFilterWidget.OnClearFiltersClicked
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeFilterWidget::OnClearFiltersClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeFilterWidget", "OnClearFiltersClicked");

	Params::CoreChallengeFilterWidget_OnClearFiltersClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeFilterWidget.OnSortingChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESortingOption                          Sorting                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortingOrder                           Order                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeFilterWidget::OnSortingChanged(ESortingOption Sorting, ESortingOrder Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeFilterWidget", "OnSortingChanged");

	Params::CoreChallengeFilterWidget_OnSortingChanged Parms{};

	Parms.Sorting = Sorting;
	Parms.Order = Order;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TooltipWidget.OnHideTooltip
// (Native, Public)

void UTooltipWidget::OnHideTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "OnHideTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TooltipWidget.OnShowTooltip
// (Native, Public)

void UTooltipWidget::OnShowTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "OnShowTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TooltipWidget.GetPriority
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETooltipPriority                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETooltipPriority UTooltipWidget::GetPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "GetPriority");

	Params::TooltipWidget_GetPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.Reset
// (Final, Native, Public)

void UArchiveCompendiumTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FCompendiumButtonData            TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchiveCompendiumTooltipWidget::SetTooltipData(const struct FCompendiumButtonData& TooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumTooltipWidget", "SetTooltipData");

	Params::ArchiveCompendiumTooltipWidget_SetTooltipData Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.Reset
// (Final, Native, Public)

void UArchiveNodeTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetNodeType
// (Event, Public, BlueprintEvent)
// Parameters:
// EArchiveNodeType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveNodeTooltipWidget::SetNodeType(EArchiveNodeType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "SetNodeType");

	Params::ArchiveNodeTooltipWidget_SetNodeType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FArchiveNodeViewData             NodeViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchiveNodeTooltipWidget::SetTooltipData(const struct FArchiveNodeViewData& NodeViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "SetTooltipData");

	Params::ArchiveNodeTooltipWidget_SetTooltipData Parms{};

	Parms.NodeViewData = std::move(NodeViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchivePassTooltipWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchivePassTooltipViewData      Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchivePassTooltipWidget::SetTooltipData(const struct FArchivePassTooltipViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchivePassTooltipWidget", "SetTooltipData");

	Params::ArchivePassTooltipWidget_SetTooltipData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBox.ClearAspectRatio
// (Final, Native, Public, BlueprintCallable)

void UAspectRatioBox::ClearAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBox", "ClearAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBox.SetAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InAspectRatio                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBox::SetAspectRatio(float InAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBox", "SetAspectRatio");

	Params::AspectRatioBox_SetAspectRatio Parms{};

	Parms.InAspectRatio = InAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetHorizontalAlignment");

	Params::AspectRatioBoxSlot_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetPadding");

	Params::AspectRatioBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetVerticalAlignment");

	Params::AspectRatioBoxSlot_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AudioEventWrapper.PostAudioEvent
// (Final, Native, Public, BlueprintCallable)

void UAudioEventWrapper::PostAudioEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioEventWrapper", "PostAudioEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.FadeInContent
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::FadeInContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "FadeInContent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.FadeOutContent
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::FadeOutContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "FadeOutContent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.ResetFade
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::ResetFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "ResetFade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.StopFadeInTweening
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   OpacityValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContentWidget::StopFadeInTweening(float OpacityValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "StopFadeInTweening");

	Params::CoreTabContentWidget_StopFadeInTweening Parms{};

	Parms.OpacityValue = OpacityValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.OnChallengeSetTabSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuChallengeSetWidget::OnChallengeSetTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetWidget", "OnChallengeSetTabSelected");

	Params::ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.RefreshMenuSkin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UChallengesMenuChallengeSetWidget::RefreshMenuSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetWidget", "RefreshMenuSkin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.GetSkinData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FChallengeSkinUIData       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FChallengeSkinUIData UChallengesMenuChallengeSetWidget::GetSkinData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetWidget", "GetSkinData");

	Params::ChallengesMenuChallengeSetWidget_GetSkinData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.Clear
// (Event, Public, BlueprintEvent)

void UChallengesMenuRewardTrackTierItem::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.OnRewardClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackTierItem::OnRewardClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "OnRewardClicked");

	Params::ChallengesMenuRewardTrackTierItem_OnRewardClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.SetGenericData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FChallengeSetRewardTrackTierInfoViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackTierItem::SetGenericData(const struct FChallengeSetRewardTrackTierInfoViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "SetGenericData");

	Params::ChallengesMenuRewardTrackTierItem_SetGenericData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.SetLockedState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackTierItem::SetLockedState(const bool IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "SetLockedState");

	Params::ChallengesMenuRewardTrackTierItem_SetLockedState Parms{};

	Parms.IsLocked = IsLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.DisplayPage
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackWidget::DisplayPage(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "DisplayPage");

	Params::ChallengesMenuRewardTrackWidget_DisplayPage Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.OnNextButtonClicked
// (Final, Native, Private)

void UChallengesMenuRewardTrackWidget::OnNextButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "OnNextButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.OnPreviousButtonClicked
// (Final, Native, Private)

void UChallengesMenuRewardTrackWidget::OnPreviousButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "OnPreviousButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// int32                                   Tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackWidget::OnRewardItemClicked(int32 Tier, class UCoreButtonWidget* Button, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "OnRewardItemClicked");

	Params::ChallengesMenuRewardTrackWidget_OnRewardItemClicked Parms{};

	Parms.Tier = Tier;
	Parms.Button = Button;
	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRitualsWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* TargetButton, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnButtonSelectedChanged");

	Params::ChallengesMenuRitualsWidget_OnButtonSelectedChanged Parms{};

	Parms.TargetButton = TargetButton;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnFiltersButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRitualsWidget::OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnFiltersButtonClicked");

	Params::ChallengesMenuRitualsWidget_OnFiltersButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnSortingChanged
// (Final, Native, Protected)

void UChallengesMenuRitualsWidget::OnSortingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnSortingChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.UpdateView
// (Final, Native, Protected)

void UChallengesMenuRitualsWidget::UpdateView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "UpdateView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuStoreWidget.OnCustomizationGridItemClicked
// (Final, Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuStoreWidget::OnCustomizationGridItemClicked(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreWidget", "OnCustomizationGridItemClicked");

	Params::ChallengesMenuStoreWidget_OnCustomizationGridItemClicked Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuStoreWidget.OnGoToStoreButtonClicked
// (Final, Native, Protected)

void UChallengesMenuStoreWidget::OnGoToStoreButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreWidget", "OnGoToStoreButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuStoreWidget.OnPreviewAreaItemClicked
// (Final, Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuStoreWidget::OnPreviewAreaItemClicked(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreWidget", "OnPreviewAreaItemClicked");

	Params::ChallengesMenuStoreWidget_OnPreviewAreaItemClicked Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ReportFeedbackInfoWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FReportFeedbackData              ReportData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UReportFeedbackInfoWidget::SetData(const struct FReportFeedbackData& ReportData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReportFeedbackInfoWidget", "SetData");

	Params::ReportFeedbackInfoWidget_SetData Parms{};

	Parms.ReportData = std::move(ReportData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetLevel");

	Params::CharacterTooltipWidget_SetLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetLockDetails
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterTooltipViewData        CharacterViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetLockDetails(const struct FCharacterTooltipViewData& CharacterViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetLockDetails");

	Params::CharacterTooltipWidget_SetLockDetails Parms{};

	Parms.CharacterViewData = std::move(CharacterViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FCharacterTooltipViewData        CharacterViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetTooltipData(const struct FCharacterTooltipViewData& CharacterViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetTooltipData");

	Params::CharacterTooltipWidget_SetTooltipData Parms{};

	Parms.CharacterViewData = std::move(CharacterViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreBaseHudWidget.PlayFocusAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreBaseHudWidget::PlayFocusAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseHudWidget", "PlayFocusAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseHudWidget.ShouldPlayFocusAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseHudWidget::ShouldPlayFocusAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseHudWidget", "ShouldPlayFocusAnimation");

	Params::CoreBaseHudWidget_ShouldPlayFocusAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetActiveState
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetActiveState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetActiveState");

	Params::CoreBaseLoadoutPartWidget_SetActiveState Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartIcon
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Icon                                                   (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutPartIcon(TSoftObjectPtr<class UTexture2D> Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutPartIcon");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutPartIcon Parms{};

	Parms.Icon = Icon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartRarity
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EItemRarity                             Rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutPartRarity(EItemRarity Rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutPartRarity");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutPartRarity Parms{};

	Parms.Rarity = Rarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutStackCount
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   StackCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutStackCount(int32 StackCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutStackCount");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutStackCount Parms{};

	Parms.StackCount = StackCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetStatusEffect
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStatusEffectType                       StatusEffectType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetStatusEffect(EStatusEffectType StatusEffectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetStatusEffect");

	Params::CoreBaseLoadoutPartWidget_SetStatusEffect Parms{};

	Parms.StatusEffectType = StatusEffectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.AddElementsToSequence
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAlertsViewData                  AlertsViewData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::AddElementsToSequence(const struct FAlertsViewData& AlertsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "AddElementsToSequence");

	Params::CoreAlertsWidget_AddElementsToSequence Parms{};

	Parms.AlertsViewData = std::move(AlertsViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.ChallengesCompletedSequenceCompleted
// (Final, Native, Private)

void UCoreAlertsWidget::ChallengesCompletedSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "ChallengesCompletedSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.ChallengesRewardsSequenceCompleted
// (Final, Native, Private)

void UCoreAlertsWidget::ChallengesRewardsSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "ChallengesRewardsSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.ChallengeTrackersSequenceCompleted
// (Final, Native, Private)

void UCoreAlertsWidget::ChallengeTrackersSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "ChallengeTrackersSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextChallengesRewardsSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextChallengesRewardsSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextChallengesRewardsSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextChallengesTrackersSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextChallengesTrackersSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextChallengesTrackersSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextCompletedChallengesSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextCompletedChallengesSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextCompletedChallengesSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextRewardSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextRewardSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextRewardSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndChallengesCompletedSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndChallengesCompletedSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndChallengesCompletedSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndChallengesRewardsSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndChallengesRewardsSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndChallengesRewardsSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndChallengesTrackersSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndChallengesTrackersSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndChallengesTrackersSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndEndSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndEndSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndEndSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndInterSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndInterSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndInterSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndRewardDisplayRequested
// (Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndRewardDisplayRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndRewardDisplayRequested");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.HideRewardTooltip
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                RewardWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::HideRewardTooltip(class UCoreButtonWidget* RewardWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "HideRewardTooltip");

	Params::CoreAlertsWidget_HideRewardTooltip Parms{};

	Parms.RewardWidget = RewardWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.OnSkipTriggered
// (Final, Native, Public)

void UCoreAlertsWidget::OnSkipTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "OnSkipTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayDisappearRewardSound
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreAlertsWidget::PlayDisappearRewardSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayDisappearRewardSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayDisplayRewardSound
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardWrapperViewData           RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayDisplayRewardSound(const struct FRewardWrapperViewData& RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayDisplayRewardSound");

	Params::CoreAlertsWidget_PlayDisplayRewardSound Parms{};

	Parms.RewardData = std::move(RewardData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayEndSequenceAnimation
// (Event, Public, BlueprintEvent)

void UCoreAlertsWidget::PlayEndSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayEndSequenceAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayInterSequenceAnimation
// (Event, Public, BlueprintEvent)

void UCoreAlertsWidget::PlayInterSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayInterSequenceAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextChallengesCompletedSequenceAnimation
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FChallengeViewData>       ChallengesCompleted                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayNextChallengesCompletedSequenceAnimation(const TArray<struct FChallengeViewData>& ChallengesCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayNextChallengesCompletedSequenceAnimation");

	Params::CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation Parms{};

	Parms.ChallengesCompleted = std::move(ChallengesCompleted);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextChallengesRewardsSequenceAnimation
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FRewardWrapperViewData>   ChallengesRewards                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayNextChallengesRewardsSequenceAnimation(const TArray<struct FRewardWrapperViewData>& ChallengesRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayNextChallengesRewardsSequenceAnimation");

	Params::CoreAlertsWidget_PlayNextChallengesRewardsSequenceAnimation Parms{};

	Parms.ChallengesRewards = std::move(ChallengesRewards);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextChallengesTrackersSequenceAnimation
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FChallengeTrackerViewData>ChallengesTrackers                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayNextChallengesTrackersSequenceAnimation(const TArray<struct FChallengeTrackerViewData>& ChallengesTrackers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayNextChallengesTrackersSequenceAnimation");

	Params::CoreAlertsWidget_PlayNextChallengesTrackersSequenceAnimation Parms{};

	Parms.ChallengesTrackers = std::move(ChallengesTrackers);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextRewardsSequenceAnimation
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FRewardWrapperViewData>   AlertRewards                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayNextRewardsSequenceAnimation(const TArray<struct FRewardWrapperViewData>& AlertRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayNextRewardsSequenceAnimation");

	Params::CoreAlertsWidget_PlayNextRewardsSequenceAnimation Parms{};

	Parms.AlertRewards = std::move(AlertRewards);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlaySoundEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    SoundFx                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlaySoundEffect(class UAkAudioEvent* SoundFx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlaySoundEffect");

	Params::CoreAlertsWidget_PlaySoundEffect Parms{};

	Parms.SoundFx = SoundFx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.RewardAlertSequenceCompleted
// (Final, Native, Private)

void UCoreAlertsWidget::RewardAlertSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "RewardAlertSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.ShowRewardTooltip
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                RewardWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::ShowRewardTooltip(class UCoreButtonWidget* RewardWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "ShowRewardTooltip");

	Params::CoreAlertsWidget_ShowRewardTooltip Parms{};

	Parms.RewardWidget = RewardWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.SkipSequence
// (Event, Public, BlueprintEvent)

void UCoreAlertsWidget::SkipSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "SkipSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.StartAlertRewards
// (Native, Public, BlueprintCallable)

void UCoreAlertsWidget::StartAlertRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "StartAlertRewards");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.GetDisplayRewardSound
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRewardWrapperViewData           RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* UCoreAlertsWidget::GetDisplayRewardSound(const struct FRewardWrapperViewData& RewardData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "GetDisplayRewardSound");

	Params::CoreAlertsWidget_GetDisplayRewardSound Parms{};

	Parms.RewardData = std::move(RewardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreAlertsWidget.IsChallengeCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FChallengeViewData               Challenge                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreAlertsWidget::IsChallengeCompleted(const struct FChallengeViewData& Challenge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "IsChallengeCompleted");

	Params::CoreAlertsWidget_IsChallengeCompleted Parms{};

	Parms.Challenge = std::move(Challenge);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreAlertsWidget.IsChallengeTrackerCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FChallengeTrackerViewData        Challenge                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreAlertsWidget::IsChallengeTrackerCompleted(const struct FChallengeTrackerViewData& Challenge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "IsChallengeTrackerCompleted");

	Params::CoreAlertsWidget_IsChallengeTrackerCompleted Parms{};

	Parms.Challenge = std::move(Challenge);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnAlignmentChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            NewAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnAlignmentChanged(ETextJustify NewAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnAlignmentChanged");

	Params::CoreButtonWidget_OnAlignmentChanged Parms{};

	Parms.NewAlignment = NewAlignment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnButtonVisibilityChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EButtonWidgetVisibility                 PreviousVisibility                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EButtonWidgetVisibility                 NewVisibility                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnButtonVisibilityChanged(const EButtonWidgetVisibility PreviousVisibility, const EButtonWidgetVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnButtonVisibilityChanged");

	Params::CoreButtonWidget_OnButtonVisibilityChanged Parms{};

	Parms.PreviousVisibility = PreviousVisibility;
	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction DBDUIViewsCore.CoreButtonWidget.OnButtonVisibilityChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EButtonWidgetVisibility                 PreviousVisibility                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EButtonWidgetVisibility                 NewVisibility                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnButtonVisibilityChangedDelegate__DelegateSignature(const EButtonWidgetVisibility PreviousVisibility, const EButtonWidgetVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnButtonVisibilityChangedDelegate__DelegateSignature");

	Params::CoreButtonWidget_OnButtonVisibilityChangedDelegate__DelegateSignature Parms{};

	Parms.PreviousVisibility = PreviousVisibility;
	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnChargingComplete
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnChargingComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnChargingComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnChargingTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnChargingTick(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnChargingTick");

	Params::CoreButtonWidget_OnChargingTick Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnClickableChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnClickableChanged(bool IsClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnClickableChanged");

	Params::CoreButtonWidget_OnClickableChanged Parms{};

	Parms.IsClickable = IsClickable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnClicked
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction DBDUIViewsCore.CoreButtonWidget.OnClickedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnClickedDelegate__DelegateSignature(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnClickedDelegate__DelegateSignature");

	Params::CoreButtonWidget_OnClickedDelegate__DelegateSignature Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnEnabledChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnEnabledChanged");

	Params::CoreButtonWidget_OnEnabledChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnHovered
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction DBDUIViewsCore.CoreButtonWidget.OnHoveredDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnHoveredDelegate__DelegateSignature(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnHoveredDelegate__DelegateSignature");

	Params::CoreButtonWidget_OnHoveredDelegate__DelegateSignature Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalClicked
// (Native, Protected)

void UCoreButtonWidget::OnInternalClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalHovered
// (Native, Protected)

void UCoreButtonWidget::OnInternalHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalLongPressed
// (Native, Protected)

void UCoreButtonWidget::OnInternalLongPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalLongPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalPressed
// (Native, Protected)

void UCoreButtonWidget::OnInternalPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalReleased
// (Native, Protected)

void UCoreButtonWidget::OnInternalReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalUnhovered
// (Native, Protected)

void UCoreButtonWidget::OnInternalUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnLongPressed
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnLongPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnLongPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnPressed
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction DBDUIViewsCore.CoreButtonWidget.OnPressedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnPressedDelegate__DelegateSignature(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnPressedDelegate__DelegateSignature");

	Params::CoreButtonWidget_OnPressedDelegate__DelegateSignature Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnReleased
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction DBDUIViewsCore.CoreButtonWidget.OnReleasedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnReleasedDelegate__DelegateSignature(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnReleasedDelegate__DelegateSignature");

	Params::CoreButtonWidget_OnReleasedDelegate__DelegateSignature Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnUnhovered
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction DBDUIViewsCore.CoreButtonWidget.OnUnhoveredDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnUnhoveredDelegate__DelegateSignature(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnUnhoveredDelegate__DelegateSignature");

	Params::CoreButtonWidget_OnUnhoveredDelegate__DelegateSignature Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        IconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> IconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetAdditionalIcon");

	Params::CoreButtonWidget_SetAdditionalIcon Parms{};

	Parms.IconTexture = IconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            NewAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetAlignment(ETextJustify NewAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetAlignment");

	Params::CoreButtonWidget_SetAlignment Parms{};

	Parms.NewAlignment = NewAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInstance> backgroundMaterial                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetBackground");

	Params::CoreButtonWidget_SetBackground Parms{};

	Parms.backgroundMaterial = backgroundMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetChargeable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsChargeable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      HoldingAnimCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetChargeable(bool IsChargeable, class UCurveFloat* HoldingAnimCurve, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetChargeable");

	Params::CoreButtonWidget_SetChargeable Parms{};

	Parms.IsChargeable = IsChargeable;
	Parms.HoldingAnimCurve = HoldingAnimCurve;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetClickable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetClickable(bool IsClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetClickable");

	Params::CoreButtonWidget_SetClickable Parms{};

	Parms.IsClickable = IsClickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetEnabled");

	Params::CoreButtonWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetHoldable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsHoldable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetHoldable(bool IsHoldable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetHoldable");

	Params::CoreButtonWidget_SetHoldable Parms{};

	Parms.IsHoldable = IsHoldable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetHoverable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsHoverable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetHoverable(bool IsHoverable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetHoverable");

	Params::CoreButtonWidget_SetHoverable Parms{};

	Parms.IsHoverable = IsHoverable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetLabel(const class FText& Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetLabel");

	Params::CoreButtonWidget_SetLabel Parms{};

	Parms.Label = std::move(Label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetPressable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsPressable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetPressable(bool IsPressable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetPressable");

	Params::CoreButtonWidget_SetPressable Parms{};

	Parms.IsPressable = IsPressable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      RepetitionDelayCurve                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetRepeatable(bool IsRepeatable, class UCurveFloat* RepetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetRepeatable");

	Params::CoreButtonWidget_SetRepeatable Parms{};

	Parms.IsRepeatable = IsRepeatable;
	Parms.RepetitionDelayCurve = RepetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EButtonWidgetVisibility                 Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetVisible(EButtonWidgetVisibility Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetVisible");

	Params::CoreButtonWidget_SetVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.GetHitzonePaintSpaceGeometry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGeometry                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FGeometry UCoreButtonWidget::GetHitzonePaintSpaceGeometry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "GetHitzonePaintSpaceGeometry");

	Params::CoreButtonWidget_GetHitzonePaintSpaceGeometry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.IsClickable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::IsClickable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "IsClickable");

	Params::CoreButtonWidget_IsClickable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "IsEnabled");

	Params::CoreButtonWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.IsPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::IsPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "IsPressed");

	Params::CoreButtonWidget_IsPressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction DBDUIViewsCore.CoreSelectableButtonWidget.OnSelectedAgainDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::OnSelectedAgainDelegate__DelegateSignature(class UCoreSelectableButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "OnSelectedAgainDelegate__DelegateSignature");

	Params::CoreSelectableButtonWidget_OnSelectedAgainDelegate__DelegateSignature Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.OnSelectedChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WithAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::OnSelectedChanged(bool IsSelected, bool WithAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "OnSelectedChanged");

	Params::CoreSelectableButtonWidget_OnSelectedChanged Parms{};

	Parms.IsSelected = IsSelected;
	Parms.WithAnimation = WithAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction DBDUIViewsCore.CoreSelectableButtonWidget.OnSelectedChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::OnSelectedChangedDelegate__DelegateSignature(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "OnSelectedChangedDelegate__DelegateSignature");

	Params::CoreSelectableButtonWidget_OnSelectedChangedDelegate__DelegateSignature Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelectable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsSelectable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::SetSelectable(bool IsSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "SetSelectable");

	Params::CoreSelectableButtonWidget_SetSelectable Parms{};

	Parms.IsSelectable = IsSelectable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PerformAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::SetSelected(bool IsSelected, bool PerformAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "SetSelected");

	Params::CoreSelectableButtonWidget_SetSelected Parms{};

	Parms.IsSelected = IsSelected;
	Parms.PerformAction = PerformAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.UpdateBackgroundSkin
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               SkinMaterial                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::UpdateBackgroundSkin(class UMaterialInterface* SkinMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "UpdateBackgroundSkin");

	Params::CoreSelectableButtonWidget_UpdateBackgroundSkin Parms{};

	Parms.SkinMaterial = SkinMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelectable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSelectableButtonWidget::IsSelectable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "IsSelectable");

	Params::CoreSelectableButtonWidget_IsSelectable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSelectableButtonWidget::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "IsSelected");

	Params::CoreSelectableButtonWidget_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.ClearData
// (Final, Native, Public)

void UCoreArchiveChallengeReminderSlotWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.Init
// (Final, Native, Public)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::Init(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "Init");

	Params::CoreArchiveChallengeReminderSlotWidget_Init Parms{};

	Parms.Role = Role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.InitVisualState
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreArchiveChallengeReminderSlotWidget::InitVisualState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "InitVisualState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchiveChallengeReminderViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetData(const struct FArchiveChallengeReminderViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetData");

	Params::CoreArchiveChallengeReminderSlotWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetQuestNodeHoverEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsHovered                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetQuestNodeHoverEffect(bool Param_IsHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetQuestNodeHoverEffect");

	Params::CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect Parms{};

	Parms.Param_IsHovered = Param_IsHovered;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetSlotSelectorState
// (Final, Native, Public)
// Parameters:
// bool                                    IsSelectorOpen                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetSlotSelectorState(bool IsSelectorOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetSlotSelectorState");

	Params::CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState Parms{};

	Parms.IsSelectorOpen = IsSelectorOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SwapChallenge
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchiveChallengeReminderViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SwapChallenge(const struct FArchiveChallengeReminderViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SwapChallenge");

	Params::CoreArchiveChallengeReminderSlotWidget_SwapChallenge Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateActiveState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_PlayAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateActiveState(bool IsActive, bool Param_PlayAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateActiveState");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateActiveState Parms{};

	Parms.IsActive = IsActive;
	Parms.Param_PlayAnimation = Param_PlayAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateProgressBar
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateProgressBar(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateProgressBar");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateVisualState
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchiveChallengeReminderViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateVisualState(const struct FArchiveChallengeReminderViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateVisualState");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateVisualState Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.GetTomeId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreArchiveCompendiumButtonWidget::GetTomeId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "GetTomeId");

	Params::CoreArchiveCompendiumButtonWidget_GetTomeId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.OnButtonHovered
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveCompendiumButtonWidget::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.OnButtonUnhovered
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveCompendiumButtonWidget::OnButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "OnButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.ResetVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveCompendiumButtonWidget::ResetVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "ResetVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCompendiumButtonData            buttonData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetButtonData(const struct FCompendiumButtonData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetButtonData");

	Params::CoreArchiveCompendiumButtonWidget_SetButtonData Parms{};

	Parms.buttonData = std::move(buttonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonVisual
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FCompendiumButtonData            buttonData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetButtonVisual(const struct FCompendiumButtonData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetButtonVisual");

	Params::CoreArchiveCompendiumButtonWidget_SetButtonVisual Parms{};

	Parms.buttonData = std::move(buttonData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetGhostStory
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGhostStory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetGhostStory(bool IsGhostStory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetGhostStory");

	Params::CoreArchiveCompendiumButtonWidget_SetGhostStory Parms{};

	Parms.IsGhostStory = IsGhostStory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetLevelProgressionVisual
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   buttonLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchivesStoryLevelStatus               LevelStatus                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetLevelProgressionVisual(int32 buttonLevel, EArchivesStoryLevelStatus LevelStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetLevelProgressionVisual");

	Params::CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual Parms{};

	Parms.buttonLevel = buttonLevel;
	Parms.LevelStatus = LevelStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateAndAddButtonToGrid
// (Final, Native, Private)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreArchiveCompendiumButtonWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreArchiveCompendiumButtonWidget* UCoreArchiveCompendiumWidget::CreateAndAddButtonToGrid(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "CreateAndAddButtonToGrid");

	Params::CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateGhostStories
// (Final, Native, Private)
// Parameters:
// int32                                   CurrentStoryNum                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::CreateGhostStories(const int32 CurrentStoryNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "CreateGhostStories");

	Params::CoreArchiveCompendiumWidget_CreateGhostStories Parms{};

	Parms.CurrentStoryNum = CurrentStoryNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.OnPastStoryClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::OnPastStoryClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "OnPastStoryClicked");

	Params::CoreArchiveCompendiumWidget_OnPastStoryClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.Reset
// (Final, Native, Private)

void UCoreArchiveCompendiumWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.ResetScroll
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveCompendiumWidget::ResetScroll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "ResetScroll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.SetGridSlot
// (Final, Native, Private)
// Parameters:
// class UGridSlot*                        GridSlot                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::SetGridSlot(class UGridSlot* GridSlot, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "SetGridSlot");

	Params::CoreArchiveCompendiumWidget_SetGridSlot Parms{};

	Parms.GridSlot = GridSlot;
	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnTextVisibilityChanged
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalImageViewerWidget::OnTextVisibilityChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnTextVisibilityChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::OnVoiceOverAutoPlay(bool Autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnVoiceOverAutoPlay");

	Params::CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay Parms{};

	Parms.Autoplay = Autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverPlay
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalImageViewerWidget::OnVoiceOverPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnVoiceOverPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchivesVignetteEntryViewData   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    HasTitle                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HasDescription                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetData(const struct FArchivesVignetteEntryViewData& Data, const bool HasTitle, const bool HasDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetData");

	Params::CoreArchiveJournalImageViewerWidget_SetData Parms{};

	Parms.Data = std::move(Data);
	Parms.HasTitle = HasTitle;
	Parms.HasDescription = HasDescription;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetScrollData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             JournalEntryScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetScrollData(const class FText& JournalEntryScrollPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetScrollData");

	Params::CoreArchiveJournalImageViewerWidget_SetScrollData Parms{};

	Parms.JournalEntryScrollPromptText = std::move(JournalEntryScrollPromptText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetTextVisibilityInputText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             DisplayText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             HideText                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetTextVisibilityInputText(const class FText& DisplayText, const class FText& HideText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetTextVisibilityInputText");

	Params::CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText Parms{};

	Parms.DisplayText = std::move(DisplayText);
	Parms.HideText = std::move(HideText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetVoiceOverText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             StopVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             AutoplayVoiceOverText                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetVoiceOverText(const class FText& PlayVoiceOverText, const class FText& StopVoiceOverText, const class FText& AutoplayVoiceOverText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetVoiceOverText");

	Params::CoreArchiveJournalImageViewerWidget_SetVoiceOverText Parms{};

	Parms.PlayVoiceOverText = std::move(PlayVoiceOverText);
	Parms.StopVoiceOverText = std::move(StopVoiceOverText);
	Parms.AutoplayVoiceOverText = std::move(AutoplayVoiceOverText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.InitializeArrow
// (Final, Native, Private)
// Parameters:
// class UCoreInputSwitcherWidget*         ArrowWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::InitializeArrow(class UCoreInputSwitcherWidget* ArrowWidget, bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "InitializeArrow");

	Params::CoreArchiveJournalWidget_InitializeArrow Parms{};

	Parms.ArrowWidget = ArrowWidget;
	Parms.Active = Active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnFirstJournalEntryUnlocked
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnFirstJournalEntryUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnFirstJournalEntryUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnJournalEntriesUnlocked
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnJournalEntriesUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnJournalEntriesUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnLeftArrowTriggered
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnLeftArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnLeftArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRewardImageLoaded
// (Final, Native, Private)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        LoadedTexture                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             TitleText                                              (Parm, NativeAccessSpecifierPublic)
// class FText                             DescriptionText                                        (Parm, NativeAccessSpecifierPublic)
// float                                   TextureOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnRewardImageLoaded(TSoftObjectPtr<class UTexture2D> LoadedTexture, bool Success, const class FText& TitleText, const class FText& DescriptionText, float TextureOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnRewardImageLoaded");

	Params::CoreArchiveJournalWidget_OnRewardImageLoaded Parms{};

	Parms.LoadedTexture = LoadedTexture;
	Parms.Success = Success;
	Parms.TitleText = std::move(TitleText);
	Parms.DescriptionText = std::move(DescriptionText);
	Parms.TextureOffset = TextureOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRightArrowTriggered
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnRightArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnRightArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteButtonSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteButtonSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteButtonSelected");

	Params::CoreArchiveJournalWidget_OnVignetteButtonSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteCinematicSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteCinematicSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteCinematicSelected");

	Params::CoreArchiveJournalWidget_OnVignetteCinematicSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteEntrySelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteEntrySelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteEntrySelected");

	Params::CoreArchiveJournalWidget_OnVignetteEntrySelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVoiceOverAutoPlay(bool Autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVoiceOverAutoPlay");

	Params::CoreArchiveJournalWidget_OnVoiceOverAutoPlay Parms{};

	Parms.Autoplay = Autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverPlay
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalWidget::OnVoiceOverPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVoiceOverPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetBottomFogOffset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasAudio                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetBottomFogOffset(bool HasAudio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetBottomFogOffset");

	Params::CoreArchiveJournalWidget_SetBottomFogOffset Parms{};

	Parms.HasAudio = HasAudio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryImage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             DescriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        RewardImage                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextureOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetEntryImage(const class FText& TitleText, const class FText& DescriptionText, const TSoftObjectPtr<class UTexture2D>& RewardImage, float TextureOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetEntryImage");

	Params::CoreArchiveJournalWidget_SetEntryImage Parms{};

	Parms.TitleText = std::move(TitleText);
	Parms.DescriptionText = std::move(DescriptionText);
	Parms.RewardImage = RewardImage;
	Parms.TextureOffset = TextureOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             DescriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetEntryText(const class FText& TitleText, const class FText& DescriptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetEntryText");

	Params::CoreArchiveJournalWidget_SetEntryText Parms{};

	Parms.TitleText = std::move(TitleText);
	Parms.DescriptionText = std::move(DescriptionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetTopFogOffset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasTitle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HasDescription                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetTopFogOffset(bool HasTitle, bool HasDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetTopFogOffset");

	Params::CoreArchiveJournalWidget_SetTopFogOffset Parms{};

	Parms.HasTitle = HasTitle;
	Parms.HasDescription = HasDescription;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVignetteText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             SubtitleText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVignetteText(const class FText& TitleText, const class FText& SubtitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVignetteText");

	Params::CoreArchiveJournalWidget_SetVignetteText Parms{};

	Parms.TitleText = std::move(TitleText);
	Parms.SubtitleText = std::move(SubtitleText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverButtonsVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVoiceOverButtonsVisibility(const bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVoiceOverButtonsVisibility");

	Params::CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             StopVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             AutoplayVoiceOverText                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVoiceOverText(const class FText& PlayVoiceOverText, const class FText& StopVoiceOverText, const class FText& AutoplayVoiceOverText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVoiceOverText");

	Params::CoreArchiveJournalWidget_SetVoiceOverText Parms{};

	Parms.PlayVoiceOverText = std::move(PlayVoiceOverText);
	Parms.StopVoiceOverText = std::move(StopVoiceOverText);
	Parms.AutoplayVoiceOverText = std::move(AutoplayVoiceOverText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.ShowImageViewer
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalWidget::ShowImageViewer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "ShowImageViewer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnStoryLevelSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveLevelProgressionWidget::OnStoryLevelSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveLevelProgressionWidget", "OnStoryLevelSelected");

	Params::CoreArchiveLevelProgressionWidget_OnStoryLevelSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnTomeLevelUnlockedAnimation
// (Final, Native, Private)

void UCoreArchiveLevelProgressionWidget::OnTomeLevelUnlockedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveLevelProgressionWidget", "OnTomeLevelUnlockedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.GetTimeRemainingLabelFromMenuState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EArchiveMenuState                       MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreArchiveMenuWidget::GetTimeRemainingLabelFromMenuState(EArchiveMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "GetTimeRemainingLabelFromMenuState");

	Params::CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnChallengeReminderClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnChallengeReminderClick(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnChallengeReminderClick");

	Params::CoreArchiveMenuWidget_OnChallengeReminderClick Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnInfoButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnInfoButtonClicked");

	Params::CoreArchiveMenuWidget_OnInfoButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnMenuTabSelected");

	Params::CoreArchiveMenuWidget_OnMenuTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnMenuTabSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnMenuTabSelectedAgain");

	Params::CoreArchiveMenuWidget_OnMenuTabSelectedAgain Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnSlotSelected
// (Final, Native, Protected)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnSlotSelected(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnSlotSelected");

	Params::CoreArchiveMenuWidget_OnSlotSelected Parms{};

	Parms.Role = Role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnSlotSelectionCancelled
// (Final, Native, Protected)

void UCoreArchiveMenuWidget::OnSlotSelectionCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnSlotSelectionCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.RiftPackClicked
// (Final, Native, Private)

void UCoreArchiveMenuWidget::RiftPackClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "RiftPackClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.SetScrollData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             VignetteListScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             JournalEntryScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::SetScrollData(const class FText& VignetteListScrollPromptText, const class FText& JournalEntryScrollPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "SetScrollData");

	Params::CoreArchiveMenuWidget_SetScrollData Parms{};

	Parms.VignetteListScrollPromptText = std::move(VignetteListScrollPromptText);
	Parms.JournalEntryScrollPromptText = std::move(JournalEntryScrollPromptText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveObjectiveWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchiveNodeObjectiveViewData    ObjectiveData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveObjectiveWidget::SetData(const struct FArchiveNodeObjectiveViewData& ObjectiveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveObjectiveWidget", "SetData");

	Params::CoreArchiveObjectiveWidget_SetData Parms{};

	Parms.ObjectiveData = std::move(ObjectiveData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivePassBannerWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreArchivePassViewData        Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchivePassBannerWidget::SetData(const struct FStoreArchivePassViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivePassBannerWidget", "SetData");

	Params::CoreArchivePassBannerWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBasePopupWidget.Hide
// (Event, Public, BlueprintEvent)

void UCoreBasePopupWidget::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBasePopupWidget", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreBasePopupWidget.Show
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBasePopupViewData*               Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBasePopupWidget::Show(class UBasePopupViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBasePopupWidget", "Show");

	Params::CoreBasePopupWidget_Show Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnAlternativeAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnAlternativeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnAlternativeAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnProgressionAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnProgressionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnProgressionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnRegressionAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnRegressionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnRegressionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.OnPurchaseClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchivePassPurchasePopupWidget::OnPurchaseClicked(ECurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivePassPurchasePopupWidget", "OnPurchaseClicked");

	Params::CoreArchivePassPurchasePopupWidget_OnPurchaseClicked Parms{};

	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.GetTranslatedAvailabilityTitleText
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreArchivePassPurchasePopupWidget::GetTranslatedAvailabilityTitleText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivePassPurchasePopupWidget", "GetTranslatedAvailabilityTitleText");

	Params::CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToNode
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestNodeWidget*      Node                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::BindToNode(class UCoreArchiveQuestNodeWidget* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "BindToNode");

	Params::CoreArchiveQuestMapWidget_BindToNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToPath
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestPathWidget*      Path                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::BindToPath(class UCoreArchiveQuestPathWidget* Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "BindToPath");

	Params::CoreArchiveQuestMapWidget_BindToPath Parms{};

	Parms.Path = Path;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeClicked
// (Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeClicked");

	Params::CoreArchiveQuestMapWidget_OnNodeClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeHovered");

	Params::CoreArchiveQuestMapWidget_OnNodeHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodesRevealCompleted
// (Final, Native, Private)

void UCoreArchiveQuestMapWidget::OnNodesRevealCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodesRevealCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeUnhovered");

	Params::CoreArchiveQuestMapWidget_OnNodeUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupNode
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FArchiveNodeGraphViewData        NodeData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::SetupNode(const struct FArchiveNodeGraphViewData& NodeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "SetupNode");

	Params::CoreArchiveQuestMapWidget_SetupNode Parms{};

	Parms.NodeData = std::move(NodeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupPath
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FArchiveMapPathViewData          PathData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::SetupPath(const struct FArchiveMapPathViewData& PathData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "SetupPath");

	Params::CoreArchiveQuestMapWidget_SetupPath Parms{};

	Parms.PathData = std::move(PathData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromNode
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestNodeWidget*      Node                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::UnbindFromNode(class UCoreArchiveQuestNodeWidget* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "UnbindFromNode");

	Params::CoreArchiveQuestMapWidget_UnbindFromNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromPath
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestPathWidget*      Path                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::UnbindFromPath(class UCoreArchiveQuestPathWidget* Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "UnbindFromPath");

	Params::CoreArchiveQuestMapWidget_UnbindFromPath Parms{};

	Parms.Path = Path;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.IntermediatePathMove
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::IntermediatePathMove(const struct FVector2D& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "IntermediatePathMove");

	Params::CoreArchiveQuestEditorWidget_IntermediatePathMove Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.NodeDragged
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::NodeDragged(const struct FVector2D& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "NodeDragged");

	Params::CoreArchiveQuestEditorWidget_NodeDragged Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileHeightPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileHeightPercentChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileHeightPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileHeightPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileHeightPixelChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileHeightPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileWidthPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileWidthPercentChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileWidthPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileWidthPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileWidthPixelChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileWidthPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridVisbilityChecked
// (Final, Native, Private)
// Parameters:
// bool                                    Checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridVisbilityChecked(bool Checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridVisbilityChecked");

	Params::CoreArchiveQuestEditorWidget_OnGridVisbilityChecked Parms{};

	Parms.Checked = Checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnLinkNodesModeChecked
// (Final, Native, Private)
// Parameters:
// bool                                    Checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnLinkNodesModeChecked(bool Checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnLinkNodesModeChecked");

	Params::CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked Parms{};

	Parms.Checked = Checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnMoveNodesModeChecked
// (Final, Native, Private)
// Parameters:
// bool                                    Checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnMoveNodesModeChecked(bool Checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnMoveNodesModeChecked");

	Params::CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked Parms{};

	Parms.Checked = Checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeBeginDrag
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeBeginDrag(const class FName& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeBeginDrag");

	Params::CoreArchiveQuestEditorWidget_OnNodeBeginDrag Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeSubmitClick
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeSubmitClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeSubmitClick");

	Params::CoreArchiveQuestEditorWidget_OnNodeSubmitClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeXPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeXPercentChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeXPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeXPercentChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeXPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeXPixelChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeXPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeXPixelChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeYPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeYPercentChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeYPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeYPercentChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeYPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeYPixelChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeYPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeYPixelChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnPathClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnPathClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnPathClicked");

	Params::CoreArchiveQuestEditorWidget_OnPathClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnRefreshGridClick
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnRefreshGridClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnRefreshGridClick");

	Params::CoreArchiveQuestEditorWidget_OnRefreshGridClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnSaveGraphClick
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnSaveGraphClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnSaveGraphClick");

	Params::CoreArchiveQuestEditorWidget_OnSaveGraphClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnSnapGridChecked
// (Final, Native, Private)
// Parameters:
// bool                                    Checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnSnapGridChecked(bool Checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnSnapGridChecked");

	Params::CoreArchiveQuestEditorWidget_OnSnapGridChecked Parms{};

	Parms.Checked = Checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.SetGridLinesArray
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FLinePair>                GridArrayVertical                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FLinePair>                GridArrayHorizontal                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::SetGridLinesArray(const TArray<struct FLinePair>& GridArrayVertical, const TArray<struct FLinePair>& GridArrayHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "SetGridLinesArray");

	Params::CoreArchiveQuestEditorWidget_SetGridLinesArray Parms{};

	Parms.GridArrayVertical = std::move(GridArrayVertical);
	Parms.GridArrayHorizontal = std::move(GridArrayHorizontal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.SetHighlightedGridLines
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VerticalIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HorizontalIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::SetHighlightedGridLines(int32 VerticalIndex, int32 HorizontalIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "SetHighlightedGridLines");

	Params::CoreArchiveQuestEditorWidget_SetHighlightedGridLines Parms{};

	Parms.VerticalIndex = VerticalIndex;
	Parms.HorizontalIndex = HorizontalIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.BroadcastDragBegin
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::BroadcastDragBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "BroadcastDragBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.HandleStatusChange
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EStoryNodeState                         PrevStatus                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStoryNodeState                         CurrentStatus                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::HandleStatusChange(const EStoryNodeState PrevStatus, const EStoryNodeState CurrentStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "HandleStatusChange");

	Params::CoreArchiveQuestNodeWidget_HandleStatusChange Parms{};

	Parms.PrevStatus = PrevStatus;
	Parms.CurrentStatus = CurrentStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.InitNode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NodeId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FArchiveNodeViewData             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsChallengeReminderNode                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::InitNode(const class FName& NodeId, const struct FArchiveNodeViewData& Data, bool IsChallengeReminderNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "InitNode");

	Params::CoreArchiveQuestNodeWidget_InitNode Parms{};

	Parms.NodeId = NodeId;
	Parms.Data = std::move(Data);
	Parms.IsChallengeReminderNode = IsChallengeReminderNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnInit
// (Event, Protected, BlueprintEvent)

void UCoreArchiveQuestNodeWidget::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnReset
// (Event, Protected, BlueprintEvent)

void UCoreArchiveQuestNodeWidget::OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnStatusChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ENodeStatusChange                       NodeStatusChange                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::OnStatusChanged(ENodeStatusChange NodeStatusChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnStatusChanged");

	Params::CoreArchiveQuestNodeWidget_OnStatusChanged Parms{};

	Parms.NodeStatusChange = NodeStatusChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.Reset
// (Final, Native, Public)

void UCoreArchiveQuestNodeWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetCurrencyRewardBackground
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECurrencyType                           CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::SetCurrencyRewardBackground(ECurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "SetCurrencyRewardBackground");

	Params::CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground Parms{};

	Parms.CurrencyType = CurrencyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetCustomizationRewardRarity
// (Event, Protected, BlueprintEvent)
// Parameters:
// EItemRarity                             Rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::SetCustomizationRewardRarity(EItemRarity Rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "SetCustomizationRewardRarity");

	Params::CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity Parms{};

	Parms.Rarity = Rarity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetIcon
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    IsReward                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        IconTexture                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::SetIcon(bool IsReward, const TSoftObjectPtr<class UTexture2D>& IconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "SetIcon");

	Params::CoreArchiveQuestNodeWidget_SetIcon Parms{};

	Parms.IsReward = IsReward;
	Parms.IconTexture = IconTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.ShowRewardNodeTooltip
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::ShowRewardNodeTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "ShowRewardNodeTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateAllStoryIndicators
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::UpdateAllStoryIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateAllStoryIndicators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateNode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchiveNodeViewData             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::UpdateNode(const struct FArchiveNodeViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateNode");

	Params::CoreArchiveQuestNodeWidget_UpdateNode Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateStoryIndicatorOpacity
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsImageReward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsCompleted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::UpdateStoryIndicatorOpacity(bool IsImageReward, bool IsCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateStoryIndicatorOpacity");

	Params::CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity Parms{};

	Parms.IsImageReward = IsImageReward;
	Parms.IsCompleted = IsCompleted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsSelectableNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::IsSelectableNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "IsSelectableNode");

	Params::CoreArchiveQuestNodeWidget_IsSelectableNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsValidNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::IsValidNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "IsValidNode");

	Params::CoreArchiveQuestNodeWidget_IsValidNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.NeedsChallengeReminderHoverAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::NeedsChallengeReminderHoverAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "NeedsChallengeReminderHoverAnimation");

	Params::CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.InitPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchiveMapPathViewData          Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::InitPath(const struct FArchiveMapPathViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "InitPath");

	Params::CoreArchiveQuestPathWidget_InitPath Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.Reset
// (Final, Native, Public)

void UCoreArchiveQuestPathWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.SetVisualState
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EArchivePathStatus                      PathStatus                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::SetVisualState(const EArchivePathStatus& PathStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "SetVisualState");

	Params::CoreArchiveQuestPathWidget_SetVisualState Parms{};

	Parms.PathStatus = PathStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.UpdatePath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchiveMapPathViewData          Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::UpdatePath(const struct FArchiveMapPathViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "UpdatePath");

	Params::CoreArchiveQuestPathWidget_UpdatePath Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.Clear
// (Event, Public, BlueprintEvent)

void UCoreArchiveRiftTierItem::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.OnRewardClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::OnRewardClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "OnRewardClicked");

	Params::CoreArchiveRiftTierItem_OnRewardClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.PlayUnlockanimation
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsPremiumUnlocked                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::PlayUnlockanimation(bool IsPremiumUnlocked, float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "PlayUnlockanimation");

	Params::CoreArchiveRiftTierItem_PlayUnlockanimation Parms{};

	Parms.IsPremiumUnlocked = IsPremiumUnlocked;
	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetGenericData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FArchiveRiftTierRewardsViewData  Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::SetGenericData(const struct FArchiveRiftTierRewardsViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "SetGenericData");

	Params::CoreArchiveRiftTierItem_SetGenericData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetLockedState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HasPremium                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::SetLockedState(const bool IsLocked, const bool HasPremium)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "SetLockedState");

	Params::CoreArchiveRiftTierItem_SetLockedState Parms{};

	Parms.IsLocked = IsLocked;
	Parms.HasPremium = HasPremium;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.DisplayPage
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::DisplayPage(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "DisplayPage");

	Params::CoreArchiveRiftWidget_DisplayPage Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnCurrentPageAnimationCompleted
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnCurrentPageAnimationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnCurrentPageAnimationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnNextButtonClicked
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnNextButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnNextButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnOutfitButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnOutfitButtonClicked");

	Params::CoreArchiveRiftWidget_OnOutfitButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnOutfitButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnOutfitButtonHovered");

	Params::CoreArchiveRiftWidget_OnOutfitButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnOutfitButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnOutfitButtonUnhovered");

	Params::CoreArchiveRiftWidget_OnOutfitButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPlayMoriButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnPlayMoriButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPlayMoriButtonClicked");

	Params::CoreArchiveRiftWidget_OnPlayMoriButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPlayMoriButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnPlayMoriButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPlayMoriButtonHovered");

	Params::CoreArchiveRiftWidget_OnPlayMoriButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPlayMoriButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnPlayMoriButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPlayMoriButtonUnhovered");

	Params::CoreArchiveRiftWidget_OnPlayMoriButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPlaySecondMoriButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnPlaySecondMoriButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPlaySecondMoriButtonClicked");

	Params::CoreArchiveRiftWidget_OnPlaySecondMoriButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPlaySecondMoriButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnPlaySecondMoriButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPlaySecondMoriButtonHovered");

	Params::CoreArchiveRiftWidget_OnPlaySecondMoriButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPlaySecondMoriButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnPlaySecondMoriButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPlaySecondMoriButtonUnhovered");

	Params::CoreArchiveRiftWidget_OnPlaySecondMoriButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPreviousButtonClicked
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnPreviousButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPreviousButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnRewardAnimationCompleted
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnRewardAnimationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnRewardAnimationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// int32                                   Tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsPremium                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnRewardItemClicked(int32 Tier, class UCoreButtonWidget* Button, bool IsPremium, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnRewardItemClicked");

	Params::CoreArchiveRiftWidget_OnRewardItemClicked Parms{};

	Parms.Tier = Tier;
	Parms.Button = Button;
	Parms.IsPremium = IsPremium;
	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.PlayPremiumTrackUnlockAnimation
// (Event, Protected, BlueprintEvent)

void UCoreArchiveRiftWidget::PlayPremiumTrackUnlockAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "PlayPremiumTrackUnlockAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetPaginationVisuals
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    ShowBonusTierHighlight                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             bonusTierTooltipText                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::SetPaginationVisuals(const bool ShowBonusTierHighlight, const class FText& bonusTierTooltipText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "SetPaginationVisuals");

	Params::CoreArchiveRiftWidget_SetPaginationVisuals Parms{};

	Parms.ShowBonusTierHighlight = ShowBonusTierHighlight;
	Parms.bonusTierTooltipText = std::move(bonusTierTooltipText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetTierVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETierType                               TierType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::SetTierVisuals(ETierType TierType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "SetTierVisuals");

	Params::CoreArchiveRiftWidget_SetTierVisuals Parms{};

	Parms.TierType = TierType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetVisualData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FArchivesRiftGenericViewData     Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::SetVisualData(const struct FArchivesRiftGenericViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "SetVisualData");

	Params::CoreArchiveRiftWidget_SetVisualData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnBothSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnBothSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnBothSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnCancelSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnCancelSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnCancelSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnKillerSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnKillerSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnKillerSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnSurvivorSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnSurvivorSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnSurvivorSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnLessInputTriggered
// (Final, Native, Private)

void UCoreArchiveTierPurchasePopupWidget::OnLessInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnLessInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnMoreInputTriggered
// (Final, Native, Private)

void UCoreArchiveTierPurchasePopupWidget::OnMoreInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnMoreInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnPurchaseClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTierPurchasePopupWidget::OnPurchaseClicked(ECurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnPurchaseClicked");

	Params::CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked Parms{};

	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.SetVisualData
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UArchiveTierPurchasePopupViewData*ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTierPurchasePopupWidget::SetVisualData(const class UArchiveTierPurchasePopupViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "SetVisualData");

	Params::CoreArchiveTierPurchasePopupWidget_SetVisualData Parms{};

	Parms.ViewData = ViewData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveTomeWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTomeWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTomeWidget", "OnMenuTabSelected");

	Params::CoreArchiveTomeWidget_OnMenuTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnButtonSelectedAgain(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnButtonSelectedAgain");

	Params::CoreButtonSelector_OnButtonSelectedAgain Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* SelectedButton, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnButtonSelectedChanged");

	Params::CoreButtonSelector_OnButtonSelectedChanged Parms{};

	Parms.SelectedButton = SelectedButton;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction DBDUIViewsCore.CoreButtonSelector.OnSelectedAgainDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnSelectedAgainDelegate__DelegateSignature(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnSelectedAgainDelegate__DelegateSignature");

	Params::CoreButtonSelector_OnSelectedAgainDelegate__DelegateSignature Parms{};

	Parms.SelectedButton = SelectedButton;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction DBDUIViewsCore.CoreButtonSelector.OnSelectedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnSelectedDelegate__DelegateSignature(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnSelectedDelegate__DelegateSignature");

	Params::CoreButtonSelector_OnSelectedDelegate__DelegateSignature Parms{};

	Parms.SelectedButton = SelectedButton;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction DBDUIViewsCore.CoreButtonSelector.OnTabChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnTabChangedDelegate__DelegateSignature(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnTabChangedDelegate__DelegateSignature");

	Params::CoreButtonSelector_OnTabChangedDelegate__DelegateSignature Parms{};

	Parms.SelectedButton = SelectedButton;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction DBDUIViewsCore.CoreButtonSelector.OnUnselectedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UCoreSelectableButtonWidget*      UnselectedButton                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnUnselectedDelegate__DelegateSignature(class UCoreSelectableButtonWidget* UnselectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnUnselectedDelegate__DelegateSignature");

	Params::CoreButtonSelector_OnUnselectedDelegate__DelegateSignature Parms{};

	Parms.UnselectedButton = UnselectedButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonSelector.Select
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonToSelect                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PerformAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::Select(class UCoreSelectableButtonWidget* buttonToSelect, bool PerformAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "Select");

	Params::CoreButtonSelector_Select Parms{};

	Parms.buttonToSelect = buttonToSelect;
	Parms.PerformAction = PerformAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SelectNext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::SelectNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SelectNext");

	Params::CoreButtonSelector_SelectNext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SelectPrevious
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::SelectPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SelectPrevious");

	Params::CoreButtonSelector_SelectPrevious Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SetAllEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::SetAllEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SetAllEnabled");

	Params::CoreButtonSelector_SetAllEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.SetInputsEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::SetInputsEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SetInputsEnabled");

	Params::CoreButtonSelector_SetInputsEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.UnselectCurrent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    PerformAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::UnselectCurrent(bool PerformAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "UnselectCurrent");

	Params::CoreButtonSelector_UnselectCurrent Parms{};

	Parms.PerformAction = PerformAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.GetInputsEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::GetInputsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "GetInputsEnabled");

	Params::CoreButtonSelector_GetInputsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.HasSelection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::HasSelection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "HasSelection");

	Params::CoreButtonSelector_HasSelection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.Init
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::Init(const TArray<struct FTabWidgetData>& TabsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "Init");

	Params::CoreTabContainerWidget_Init Parms{};

	Parms.TabsData = std::move(TabsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.LayOutTabs
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContainerWidget::LayOutTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "LayOutTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.OnTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::OnTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "OnTabSelected");

	Params::CoreTabContainerWidget_OnTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.RemoveTabs
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContainerWidget::RemoveTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "RemoveTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetNotificationVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HasNotification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetNotificationVisibility(int32 Key, bool HasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetNotificationVisibility");

	Params::CoreTabContainerWidget_SetNotificationVisibility Parms{};

	Parms.Key = Key;
	Parms.HasNotification = HasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetTabEnabled(int32 Key, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetTabEnabled");

	Params::CoreTabContainerWidget_SetTabEnabled Parms{};

	Parms.Key = Key;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetTabVisible(int32 Key, bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetTabVisible");

	Params::CoreTabContainerWidget_SetTabVisible Parms{};

	Parms.Key = Key;
	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetUiTakeoverActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetUiTakeoverActive(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetUiTakeoverActive");

	Params::CoreTabContainerWidget_SetUiTakeoverActive Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetUseControllerTabSwitching
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetUseControllerTabSwitching(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetUseControllerTabSwitching");

	Params::CoreTabContainerWidget_SetUseControllerTabSwitching Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.UpdateBackgroundSkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               SkinMaterial                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::UpdateBackgroundSkin(int32 Key, class UMaterialInterface* SkinMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "UpdateBackgroundSkin");

	Params::CoreTabContainerWidget_UpdateBackgroundSkin Parms{};

	Parms.Key = Key;
	Parms.SkinMaterial = SkinMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.GetTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreTabWidget*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTabWidget* UCoreTabContainerWidget::GetTab(int32 Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "GetTab");

	Params::CoreTabContainerWidget_GetTab Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.GetTabIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreTabContainerWidget::GetTabIndex(int32 Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "GetTabIndex");

	Params::CoreTabContainerWidget_GetTabIndex Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.HasLabelTooltip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreTabWidget::HasLabelTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "HasLabelTooltip");

	Params::CoreTabWidget_HasLabelTooltip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.PostInit
// (Event, Public, BlueprintEvent)

void UCoreTabWidget::PostInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "PostInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreTabWidget.SetIconSoftTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        IconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ForcedIconSize                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetIconSoftTexture(TSoftObjectPtr<class UTexture2D> IconTexture, const struct FVector2D& ForcedIconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetIconSoftTexture");

	Params::CoreTabWidget_SetIconSoftTexture Parms{};

	Parms.IconTexture = IconTexture;
	Parms.ForcedIconSize = std::move(ForcedIconSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.SetIconTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*                       IconTexture                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ForcedIconSize                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetIconTexture(class UTexture2D* IconTexture, const struct FVector2D& ForcedIconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetIconTexture");

	Params::CoreTabWidget_SetIconTexture Parms{};

	Parms.IconTexture = IconTexture;
	Parms.ForcedIconSize = std::move(ForcedIconSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.SetNotificationVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    HasNotification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetNotificationVisibility(bool HasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetNotificationVisibility");

	Params::CoreTabWidget_SetNotificationVisibility Parms{};

	Parms.HasNotification = HasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.GetKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreTabWidget::GetKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "GetKey");

	Params::CoreTabWidget_GetKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.GetTabText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreTabWidget::GetTabText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "GetTabText");

	Params::CoreTabWidget_GetTabText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchivesVignetteViewData        VignetteDataList                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetData(const struct FArchivesVignetteViewData& VignetteDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetData");

	Params::CoreArchiveVignetteButtonWidget_SetData Parms{};

	Parms.VignetteDataList = std::move(VignetteDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVignetteRead
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetVignetteRead(const bool IsRead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetVignetteRead");

	Params::CoreArchiveVignetteButtonWidget_SetVignetteRead Parms{};

	Parms.IsRead = IsRead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVisualData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             VignetteTitle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             VignetteSubtitle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             VignetteProgressText                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    DisplayProgress                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VignetteProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsUnread                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             UnreadIndicatorText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ShowCinematics                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LockCinematics                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetVisualData(const class FText& VignetteTitle, const class FText& VignetteSubtitle, const class FText& VignetteProgressText, const bool DisplayProgress, const float VignetteProgress, const bool IsUnread, const class FText& UnreadIndicatorText, const bool ShowCinematics, const bool LockCinematics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetVisualData");

	Params::CoreArchiveVignetteButtonWidget_SetVisualData Parms{};

	Parms.VignetteTitle = std::move(VignetteTitle);
	Parms.VignetteSubtitle = std::move(VignetteSubtitle);
	Parms.VignetteProgressText = std::move(VignetteProgressText);
	Parms.DisplayProgress = DisplayProgress;
	Parms.VignetteProgress = VignetteProgress;
	Parms.IsUnread = IsUnread;
	Parms.UnreadIndicatorText = std::move(UnreadIndicatorText);
	Parms.ShowCinematics = ShowCinematics;
	Parms.LockCinematics = LockCinematics;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.SetIsForceDisabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsForceDisabled                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteCinematicButton::SetIsForceDisabled(bool Param_IsForceDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicButton", "SetIsForceDisabled");

	Params::CoreArchiveVignetteCinematicButton_SetIsForceDisabled Parms{};

	Parms.Param_IsForceDisabled = Param_IsForceDisabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.UnlockCinematic
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveVignetteCinematicButton::UnlockCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicButton", "UnlockCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicContainerWidget.UnlockCinematics
// (Final, Native, Public)

void UCoreArchiveVignetteCinematicContainerWidget::UnlockCinematics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicContainerWidget", "UnlockCinematics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EntryNumber                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsImage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryButtonWidget::SetData(const int32 EntryNumber, const bool IsRead, const bool IsImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "SetData");

	Params::CoreArchiveVignetteEntryButtonWidget_SetData Parms{};

	Parms.EntryNumber = EntryNumber;
	Parms.IsRead = IsRead;
	Parms.IsImage = IsImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetVisualData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntryNumber                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             UnreadIndicatorText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsImage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryButtonWidget::SetVisualData(const int32 EntryNumber, const bool IsRead, const class FText& UnreadIndicatorText, const bool IsImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "SetVisualData");

	Params::CoreArchiveVignetteEntryButtonWidget_SetVisualData Parms{};

	Parms.EntryNumber = EntryNumber;
	Parms.IsRead = IsRead;
	Parms.UnreadIndicatorText = std::move(UnreadIndicatorText);
	Parms.IsImage = IsImage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.UnlockEntry
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveVignetteEntryButtonWidget::UnlockEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "UnlockEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.GetEntryNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UCoreArchiveVignetteEntryButtonWidget::GetEntryNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "GetEntryNumber");

	Params::CoreArchiveVignetteEntryButtonWidget_GetEntryNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockComplete
// (Final, Native, Public)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryContainerWidget::OnUnlockComplete(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryContainerWidget", "OnUnlockComplete");

	Params::CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockProgress
// (Final, Native, Public)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryContainerWidget::OnUnlockProgress(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryContainerWidget", "OnUnlockProgress");

	Params::CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.OnBuyButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsBundleWidget::OnBuyButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "OnBuyButtonClicked");

	Params::CoreAuricCellsBundleWidget_OnBuyButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetData
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAuricCellsBundleViewData        BundleData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAuricCellsBundleWidget::SetData(const struct FAuricCellsBundleViewData& BundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "SetData");

	Params::CoreAuricCellsBundleWidget_SetData Parms{};

	Parms.BundleData = std::move(BundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetRewardHighlight
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    RewardHighlight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsBundleWidget::SetRewardHighlight(bool RewardHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "SetRewardHighlight");

	Params::CoreAuricCellsBundleWidget_SetRewardHighlight Parms{};

	Parms.RewardHighlight = RewardHighlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetupAsReward
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreAuricCellsBundleWidget::SetupAsReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "SetupAsReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAuricCellsContainerWidget.OnBuyAction
// (Final, Native, Protected)
// Parameters:
// class FName                             bundleId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsContainerWidget::OnBuyAction(class FName bundleId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsContainerWidget", "OnBuyAction");

	Params::CoreAuricCellsContainerWidget_OnBuyAction Parms{};

	Parms.bundleId = bundleId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsContainerWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAuricCellsBundleViewData>bundlesData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAuricCellsContainerWidget::SetData(const TArray<struct FAuricCellsBundleViewData>& bundlesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsContainerWidget", "SetData");

	Params::CoreAuricCellsContainerWidget_SetData Parms{};

	Parms.bundlesData = std::move(bundlesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsWidget.OnBuyAction
// (Final, Native, Protected)
// Parameters:
// class FName                             bundleId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsWidget::OnBuyAction(class FName bundleId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsWidget", "OnBuyAction");

	Params::CoreAuricCellsWidget_OnBuyAction Parms{};

	Parms.bundleId = bundleId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.FadeInAnimation_Implementation
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   FadeInDuration                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::FadeInAnimation_Implementation(const float FadeInDuration, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "FadeInAnimation_Implementation");

	Params::CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation Parms{};

	Parms.FadeInDuration = FadeInDuration;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.FadeOutAnimation_Implementation
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   FadeOutDuration                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::FadeOutAnimation_Implementation(const float FadeOutDuration, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "FadeOutAnimation_Implementation");

	Params::CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation Parms{};

	Parms.FadeOutDuration = FadeOutDuration;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnEndReached
// (Final, Native, Public)

void UCoreBinkVideoPlayerWidget::OnEndReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnEndReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnFadeInAnimationComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnFadeInAnimationComplete(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnFadeInAnimationComplete");

	Params::CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnFadeOutAnimationComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnFadeOutAnimationComplete(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnFadeOutAnimationComplete");

	Params::CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnMediaClosed
// (Final, Native, Public)

void UCoreBinkVideoPlayerWidget::OnMediaClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnMediaClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnMediaOpened
// (Final, Native, Public)
// Parameters:
// class FString                           OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnMediaOpened(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnMediaOpened");

	Params::CoreBinkVideoPlayerWidget_OnMediaOpened Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnSkipInputSwitcherTriggered
// (Final, Native, Private)

void UCoreBinkVideoPlayerWidget::OnSkipInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnSkipInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnSubtitlesChanged
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<class FString>                   SubtitlesText                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnSubtitlesChanged(const TArray<class FString>& SubtitlesText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnSubtitlesChanged");

	Params::CoreBinkVideoPlayerWidget_OnSubtitlesChanged Parms{};

	Parms.SubtitlesText = std::move(SubtitlesText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.SetSize_Implementation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::SetSize_Implementation(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "SetSize_Implementation");

	Params::CoreBinkVideoPlayerWidget_SetSize_Implementation Parms{};

	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::OnButtonHovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "OnButtonHovered");

	Params::CoreChallengeCardWidget_OnButtonHovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsSelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* TargetButton, bool Param_IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "OnButtonSelectedChanged");

	Params::CoreChallengeCardWidget_OnButtonSelectedChanged Parms{};

	Parms.TargetButton = TargetButton;
	Parms.Param_IsSelected = Param_IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::OnButtonUnhovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "OnButtonUnhovered");

	Params::CoreChallengeCardWidget_OnButtonUnhovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateHeaderBackground
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::UpdateHeaderBackground(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "UpdateHeaderBackground");

	Params::CoreChallengeCardWidget_UpdateHeaderBackground Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateObjectivesProgression
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<struct FChallengeObjectiveProgressionViewData>ProgressionArray                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::UpdateObjectivesProgression(const TArray<struct FChallengeObjectiveProgressionViewData>& ProgressionArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "UpdateObjectivesProgression");

	Params::CoreChallengeCardWidget_UpdateObjectivesProgression Parms{};

	Parms.ProgressionArray = std::move(ProgressionArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateRewards
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<struct FRewardWrapperViewData>   Rewards                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::UpdateRewards(const TArray<struct FRewardWrapperViewData>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "UpdateRewards");

	Params::CoreChallengeCardWidget_UpdateRewards Parms{};

	Parms.Rewards = std::move(Rewards);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateTimerFlag
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FText                             TimeRemainingCaption                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::UpdateTimerFlag(const class FText& TimeRemainingCaption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "UpdateTimerFlag");

	Params::CoreChallengeCardWidget_UpdateTimerFlag Parms{};

	Parms.TimeRemainingCaption = std::move(TimeRemainingCaption);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.IsChallengeCompleted
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreChallengeCardWidget::IsChallengeCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "IsChallengeCompleted");

	Params::CoreChallengeCardWidget_IsChallengeCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreChallengeDetailsWidget.UpdateSmokebackground
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeDetailsWidget::UpdateSmokebackground(const EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeDetailsWidget", "UpdateSmokebackground");

	Params::CoreChallengeDetailsWidget_UpdateSmokebackground Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeDetailsWidget.UpdateTimerFlag
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FText                             TimeRemainingCaption                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeDetailsWidget::UpdateTimerFlag(const class FText& TimeRemainingCaption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeDetailsWidget", "UpdateTimerFlag");

	Params::CoreChallengeDetailsWidget_UpdateTimerFlag Parms{};

	Parms.TimeRemainingCaption = std::move(TimeRemainingCaption);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeIconWidget.SetChallengeData
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FChallengeViewData               ChallengeData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeIconWidget::SetChallengeData(const struct FChallengeViewData& ChallengeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeIconWidget", "SetChallengeData");

	Params::CoreChallengeIconWidget_SetChallengeData Parms{};

	Parms.ChallengeData = std::move(ChallengeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeIconWidget.UpdateVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeIconWidget::UpdateVisuals(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeIconWidget", "UpdateVisuals");

	Params::CoreChallengeIconWidget_UpdateVisuals Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeProgressBarWidget.SetChallengeData
// (Final, Native, Public, HasOutParams)
// Parameters:
// float                                   ProgressFraction                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeProgressBarWidget::SetChallengeData(const float ProgressFraction, const class FText& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeProgressBarWidget", "SetChallengeData");

	Params::CoreChallengeProgressBarWidget_SetChallengeData Parms{};

	Parms.ProgressFraction = ProgressFraction;
	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreChallengesMenuWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnMenuTabSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnMenuTabSelected");

	Params::CoreChallengesMenuWidget_OnMenuTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnSettingsButtonClicked
// (Final, Native, Protected)

void UCoreChallengesMenuWidget::OnSettingsButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnSettingsButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.GetSkinData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FChallengeSkinUIData       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FChallengeSkinUIData UCoreChallengesMenuWidget::GetSkinData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "GetSkinData");

	Params::CoreChallengesMenuWidget_GetSkinData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnReadingTimeDelayDone
// (Final, Native, Private)

void UCoreChallengeTrackerContainerWidget::OnReadingTimeDelayDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnReadingTimeDelayDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetClosingDone
// (Final, Native, Private)
// Parameters:
// class UCoreChallengeTrackerWidget*      TrackerWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeTrackerContainerWidget::OnWidgetClosingDone(class UCoreChallengeTrackerWidget* TrackerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnWidgetClosingDone");

	Params::CoreChallengeTrackerContainerWidget_OnWidgetClosingDone Parms{};

	Parms.TrackerWidget = TrackerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetOpeningDone
// (Final, Native, Private)
// Parameters:
// class UCoreChallengeTrackerWidget*      TrackerWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeTrackerContainerWidget::OnWidgetOpeningDone(class UCoreChallengeTrackerWidget* TrackerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnWidgetOpeningDone");

	Params::CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone Parms{};

	Parms.TrackerWidget = TrackerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetProgressingDone
// (Final, Native, Private)
// Parameters:
// class UCoreChallengeTrackerWidget*      TrackerWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeTrackerContainerWidget::OnWidgetProgressingDone(class UCoreChallengeTrackerWidget* TrackerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnWidgetProgressingDone");

	Params::CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone Parms{};

	Parms.TrackerWidget = TrackerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.BindHoverBorder
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bind                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::BindHoverBorder(const bool bind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "BindHoverBorder");

	Params::CoreRewardWidget_BindHoverBorder Parms{};

	Parms.bind = bind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::OnButtonHovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "OnButtonHovered");

	Params::CoreRewardWidget_OnButtonHovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsSelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* TargetButton, bool Param_IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "OnButtonSelectedChanged");

	Params::CoreRewardWidget_OnButtonSelectedChanged Parms{};

	Parms.TargetButton = TargetButton;
	Parms.Param_IsSelected = Param_IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::OnButtonUnhovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "OnButtonUnhovered");

	Params::CoreRewardWidget_OnButtonUnhovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetIsLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetIsLocked(bool IsLocked, bool UseAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetIsLocked");

	Params::CoreRewardWidget_SetIsLocked Parms{};

	Parms.IsLocked = IsLocked;
	Parms.UseAnimation = UseAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardViewData                  RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetRewardData(const struct FRewardViewData& RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetRewardData");

	Params::CoreRewardWidget_SetRewardData Parms{};

	Parms.RewardData = std::move(RewardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetRewardScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetRewardScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetRewardScale");

	Params::CoreRewardWidget_SetRewardScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCharacterRewardWidget.SetCharacterRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCharacterRewardViewData         CharacterRewardViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCharacterRewardWidget::SetCharacterRewardData(const struct FCharacterRewardViewData& CharacterRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCharacterRewardWidget", "SetCharacterRewardData");

	Params::CoreCharacterRewardWidget_SetCharacterRewardData Parms{};

	Parms.CharacterRewardViewData = std::move(CharacterRewardViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCreditsWidget.OnScrollEnd
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCreditsWidget::OnScrollEnd(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCreditsWidget", "OnScrollEnd");

	Params::CoreCreditsWidget_OnScrollEnd Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCreditsWidget.ScrollText
// (Final, Native, Private)

void UCoreCreditsWidget::ScrollText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCreditsWidget", "ScrollText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             KeyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerButtonWidget::SetKeyOverride(const struct FKey& KeyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerButtonWidget", "SetKeyOverride");

	Params::CoreKeyListenerButtonWidget_SetKeyOverride Parms{};

	Parms.KeyOverride = std::move(KeyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIActionType                           ActionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerButtonWidget::SetUIAction(const EUIActionType ActionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerButtonWidget", "SetUIAction");

	Params::CoreKeyListenerButtonWidget_SetUIAction Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.OnCurrencyButtonPressed
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyButtonWidget::OnCurrencyButtonPressed(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "OnCurrencyButtonPressed");

	Params::CoreCurrencyButtonWidget_OnCurrencyButtonPressed Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetCurrencyData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPriceTagViewData                CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyButtonWidget::SetCurrencyData(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "SetCurrencyData");

	Params::CoreCurrencyButtonWidget_SetCurrencyData Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.GetCurrencyType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECurrencyType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECurrencyType UCoreCurrencyButtonWidget::GetCurrencyType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "GetCurrencyType");

	Params::CoreCurrencyButtonWidget_GetCurrencyType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetBackgroundVisible
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    ShowBackground                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyButtonWidget::SetBackgroundVisible(const bool ShowBackground) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "SetBackgroundVisible");

	Params::CoreCurrencyButtonWidget_SetBackgroundVisible Parms{};

	Parms.ShowBackground = ShowBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyExpirationLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCurrencyExpirationLabelViewData ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyExpirationLabelWidget::SetData(const struct FCurrencyExpirationLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyExpirationLabelWidget", "SetData");

	Params::CoreCurrencyExpirationLabelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyForTooltipsWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCurrencyProgressionRewardViewDataCurrencyRewardViewData                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyForTooltipsWidget::SetData(const struct FCurrencyProgressionRewardViewData& CurrencyRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyForTooltipsWidget", "SetData");

	Params::CoreCurrencyForTooltipsWidget_SetData Parms{};

	Parms.CurrencyRewardViewData = std::move(CurrencyRewardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnAlignmentChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            NewAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::OnAlignmentChanged(ETextJustify NewAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnAlignmentChanged");

	Params::CoreKeyListenerInputPromptWidget_OnAlignmentChanged Parms{};

	Parms.NewAlignment = NewAlignment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnChargingComplete
// (Event, Protected, BlueprintEvent)

void UCoreKeyListenerInputPromptWidget::OnChargingComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnChargingComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnChargingTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::OnChargingTick(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnChargingTick");

	Params::CoreKeyListenerInputPromptWidget_OnChargingTick Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::OnEnabledChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnEnabledChanged");

	Params::CoreKeyListenerInputPromptWidget_OnEnabledChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SendAnalyticsData
// (Final, Native, Private)

void UCoreKeyListenerInputPromptWidget::SendAnalyticsData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SendAnalyticsData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        IconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> IconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetAdditionalIcon");

	Params::CoreKeyListenerInputPromptWidget_SetAdditionalIcon Parms{};

	Parms.IconTexture = IconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            NewAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetAlignment(ETextJustify NewAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetAlignment");

	Params::CoreKeyListenerInputPromptWidget_SetAlignment Parms{};

	Parms.NewAlignment = NewAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetBetaFeatureOverlayVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetBetaFeatureOverlayVisible(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetChargeable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsChargeable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      HoldingAnimCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetChargeable(bool IsChargeable, class UCurveFloat* HoldingAnimCurve, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetChargeable");

	Params::CoreKeyListenerInputPromptWidget_SetChargeable Parms{};

	Parms.IsChargeable = IsChargeable;
	Parms.HoldingAnimCurve = HoldingAnimCurve;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetEnabled");

	Params::CoreKeyListenerInputPromptWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             KeyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetKeyOverride(const struct FKey& KeyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetKeyOverride");

	Params::CoreKeyListenerInputPromptWidget_SetKeyOverride Parms{};

	Parms.KeyOverride = std::move(KeyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetLabel(const class FText& Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetLabel");

	Params::CoreKeyListenerInputPromptWidget_SetLabel Parms{};

	Parms.Label = std::move(Label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      RepetitionDelayCurve                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetRepeatable(bool IsRepeatable, class UCurveFloat* RepetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetRepeatable");

	Params::CoreKeyListenerInputPromptWidget_SetRepeatable Parms{};

	Parms.IsRepeatable = IsRepeatable;
	Parms.RepetitionDelayCurve = RepetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIActionType                           ActionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetUIAction(const EUIActionType ActionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetUIAction");

	Params::CoreKeyListenerInputPromptWidget_SetUIAction Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsCharging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreKeyListenerInputPromptWidget::IsCharging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "IsCharging");

	Params::CoreKeyListenerInputPromptWidget_IsCharging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreKeyListenerInputPromptWidget::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "IsEnabled");

	Params::CoreKeyListenerInputPromptWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetCurrencyData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPriceTagViewData                CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyInputPromptWidget::SetCurrencyData(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputPromptWidget", "SetCurrencyData");

	Params::CoreCurrencyInputPromptWidget_SetCurrencyData Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.GetCurrencyType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECurrencyType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECurrencyType UCoreCurrencyInputPromptWidget::GetCurrencyType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputPromptWidget", "GetCurrencyType");

	Params::CoreCurrencyInputPromptWidget_GetCurrencyType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetBackgroundVisible
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    ShowBackground                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyInputPromptWidget::SetBackgroundVisible(const bool ShowBackground) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputPromptWidget", "SetBackgroundVisible");

	Params::CoreCurrencyInputPromptWidget_SetBackgroundVisible Parms{};

	Parms.ShowBackground = ShowBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnAlignmentChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            NewAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::OnAlignmentChanged(ETextJustify NewAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnAlignmentChanged");

	Params::CoreInputSwitcherWidget_OnAlignmentChanged Parms{};

	Parms.NewAlignment = NewAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::OnButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnButtonClicked");

	Params::CoreInputSwitcherWidget_OnButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnInputPromptTriggered
// (Final, Native, Private)

void UCoreInputSwitcherWidget::OnInputPromptTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnInputPromptTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        IconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> IconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetAdditionalIcon");

	Params::CoreInputSwitcherWidget_SetAdditionalIcon Parms{};

	Parms.IconTexture = IconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            NewAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetAlignment(ETextJustify NewAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetAlignment");

	Params::CoreInputSwitcherWidget_SetAlignment Parms{};

	Parms.NewAlignment = NewAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInstance> backgroundMaterial                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetBackground");

	Params::CoreInputSwitcherWidget_SetBackground Parms{};

	Parms.backgroundMaterial = backgroundMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetChargeable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsChargeable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      HoldingAnimCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetChargeable(bool IsChargeable, class UCurveFloat* HoldingAnimCurve, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetChargeable");

	Params::CoreInputSwitcherWidget_SetChargeable Parms{};

	Parms.IsChargeable = IsChargeable;
	Parms.HoldingAnimCurve = HoldingAnimCurve;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetEnabled");

	Params::CoreInputSwitcherWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             KeyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetKeyOverride(const struct FKey& KeyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetKeyOverride");

	Params::CoreInputSwitcherWidget_SetKeyOverride Parms{};

	Parms.KeyOverride = std::move(KeyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetLabel(const class FText& Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetLabel");

	Params::CoreInputSwitcherWidget_SetLabel Parms{};

	Parms.Label = std::move(Label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      RepetitionDelayCurve                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetRepeatable(bool IsRepeatable, class UCurveFloat* RepetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetRepeatable");

	Params::CoreInputSwitcherWidget_SetRepeatable Parms{};

	Parms.IsRepeatable = IsRepeatable;
	Parms.RepetitionDelayCurve = RepetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIActionType                           ActionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetUIAction(const EUIActionType ActionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetUIAction");

	Params::CoreInputSwitcherWidget_SetUIAction Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreButtonWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreButtonWidget* UCoreInputSwitcherWidget::GetButton() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetButton");

	Params::CoreInputSwitcherWidget_GetButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInputSwitcherWidget::GetEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetEnabled");

	Params::CoreInputSwitcherWidget_GetEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetInputPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreKeyListenerInputPromptWidget* UCoreInputSwitcherWidget::GetInputPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetInputPrompt");

	Params::CoreInputSwitcherWidget_GetInputPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.OnInputSwitcherTriggered
// (Final, Native, Private)

void UCoreCurrencyInputSwitcherWidget::OnInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "OnInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.SetBackgroundVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ShowBackground                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyInputSwitcherWidget::SetBackgroundVisible(const bool ShowBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "SetBackgroundVisible");

	Params::CoreCurrencyInputSwitcherWidget_SetBackgroundVisible Parms{};

	Parms.ShowBackground = ShowBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.SetCurrencyData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPriceTagViewData                CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyInputSwitcherWidget::SetCurrencyData(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "SetCurrencyData");

	Params::CoreCurrencyInputSwitcherWidget_SetCurrencyData Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.GetCurrencyType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECurrencyType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECurrencyType UCoreCurrencyInputSwitcherWidget::GetCurrencyType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "GetCurrencyType");

	Params::CoreCurrencyInputSwitcherWidget_GetCurrencyType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.PlayNotEnoughCurrency
// (Event, Public, BlueprintEvent)

void UCoreCurrencyLabelWidget::PlayNotEnoughCurrency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "PlayNotEnoughCurrency");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FCurrencyLabelViewData           ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyLabelWidget::SetData(const struct FCurrencyLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "SetData");

	Params::CoreCurrencyLabelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.UpdateCurrency
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NewBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PreviousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyLabelWidget::UpdateCurrency(int32 NewBalance, int32 PreviousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "UpdateCurrency");

	Params::CoreCurrencyLabelWidget_UpdateCurrency Parms{};

	Parms.NewBalance = NewBalance;
	Parms.PreviousBalance = PreviousBalance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyProgressionRewardWidget.SetCurrencyProgressionRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCurrencyProgressionRewardViewDataCurrencyProgressionRewardViewData                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyProgressionRewardWidget::SetCurrencyProgressionRewardData(const struct FCurrencyProgressionRewardViewData& CurrencyProgressionRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyProgressionRewardWidget", "SetCurrencyProgressionRewardData");

	Params::CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData Parms{};

	Parms.CurrencyProgressionRewardViewData = std::move(CurrencyProgressionRewardViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCustomizationItemSlotWrapper.SetAsEmptySlot
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEmptySlot                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCustomizationItemSlotWrapper::SetAsEmptySlot(const bool IsEmptySlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationItemSlotWrapper", "SetAsEmptySlot");

	Params::CoreCustomizationItemSlotWrapper_SetAsEmptySlot Parms{};

	Parms.IsEmptySlot = IsEmptySlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCustomizationItemSlotWrapper.GetCustomizationItemWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCustomizationItemWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCustomizationItemWidget* UCoreCustomizationItemSlotWrapper::GetCustomizationItemWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationItemSlotWrapper", "GetCustomizationItemWidget");

	Params::CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetCustomizationRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationRewardViewData     CustomizationRewardViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCustomizationRewardWidget::SetCustomizationRewardData(const struct FCustomizationRewardViewData& CustomizationRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationRewardWidget", "SetCustomizationRewardData");

	Params::CoreCustomizationRewardWidget_SetCustomizationRewardData Parms{};

	Parms.CustomizationRewardViewData = std::move(CustomizationRewardViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisabledStateOverlayWidget.SetOverlayImage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EDisabledItemOption                     DisabledItemOption                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisabledStateOverlayWidget::SetOverlayImage(const EDisabledItemOption DisabledItemOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisabledStateOverlayWidget", "SetOverlayImage");

	Params::CoreDisabledStateOverlayWidget_SetOverlayImage Parms{};

	Parms.DisabledItemOption = DisabledItemOption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.OnDrag
// (Final, Native, Protected, HasDefaults)
// Parameters:
// struct FVector2D                        CursorDelta                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::OnDrag(const struct FVector2D& CursorDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "OnDrag");

	Params::CoreDisplayStandWidget_OnDrag Parms{};

	Parms.CursorDelta = std::move(CursorDelta);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetDisplayPrompt");

	Params::CoreDisplayStandWidget_SetDisplayPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPromptText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             DisplayPromptText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetDisplayPromptText(const class FText& DisplayPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetDisplayPromptText");

	Params::CoreDisplayStandWidget_SetDisplayPromptText Parms{};

	Parms.DisplayPromptText = std::move(DisplayPromptText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPromptVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Param_IsVisible                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetDisplayPromptVisibility(const bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetDisplayPromptVisibility");

	Params::CoreDisplayStandWidget_SetDisplayPromptVisibility Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetUseControllerRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    UseControllerRotation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetUseControllerRotation(const bool UseControllerRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetUseControllerRotation");

	Params::CoreDisplayStandWidget_SetUseControllerRotation Parms{};

	Parms.UseControllerRotation = UseControllerRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.GetUseControllerRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreDisplayStandWidget::GetUseControllerRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "GetUseControllerRotation");

	Params::CoreDisplayStandWidget_GetUseControllerRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreEffectCardWidget.SetTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationTooltipViewData    Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreEffectCardWidget::SetTooltipData(const struct FCustomizationTooltipViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEffectCardWidget", "SetTooltipData");

	Params::CoreEffectCardWidget_SetTooltipData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEffectCardWidget.UpdateCardState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEffectCardState                        State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEffectCardWidget::UpdateCardState(const EEffectCardState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEffectCardWidget", "UpdateCardState");

	Params::CoreEffectCardWidget_UpdateCardState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEffectCardWidget.UpdateTimer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   Param_CurrentTimer                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEffectCardWidget::UpdateTimer(const float Param_CurrentTimer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEffectCardWidget", "UpdateTimer");

	Params::CoreEffectCardWidget_UpdateTimer Parms{};

	Parms.Param_CurrentTimer = Param_CurrentTimer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.PlayToZeroAnimation
// (Event, Protected, BlueprintEvent)

void UCoreEndGameCollapseBarWidget::PlayToZeroAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEndGameCollapseBarWidget", "PlayToZeroAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.UpdateBarProgression
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEndGameCollapseBarWidget::UpdateBarProgression(const float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEndGameCollapseBarWidget", "UpdateBarProgression");

	Params::CoreEndGameCollapseBarWidget_UpdateBarProgression Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.OnLoadingHintsFadeSequenceCompleted
// (Final, Native, Protected)

void UCoreSpecialEventLoadingScreenWidget::OnLoadingHintsFadeSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "OnLoadingHintsFadeSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FSpecialEventLoadingScreenViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetData(const struct FSpecialEventLoadingScreenViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetData");

	Params::CoreSpecialEventLoadingScreenWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetLoadingHint
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FLoadingHintViewData             LoadingHintData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetLoadingHint(const struct FLoadingHintViewData& LoadingHintData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetLoadingHint");

	Params::CoreSpecialEventLoadingScreenWidget_SetLoadingHint Parms{};

	Parms.LoadingHintData = std::move(LoadingHintData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.UpdateProgress
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::UpdateProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "UpdateProgress");

	Params::CoreSpecialEventLoadingScreenWidget_UpdateProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetLoadingLogoColor
// (Final, Native, Protected, HasOutParams, HasDefaults, Const)
// Parameters:
// struct FLinearColor                     FillingColor                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetLoadingLogoColor(const struct FLinearColor& FillingColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetLoadingLogoColor");

	Params::CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor Parms{};

	Parms.FillingColor = std::move(FillingColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetProgressBarColors
// (Final, Native, Protected, HasOutParams, HasDefaults, Const)
// Parameters:
// struct FLinearColor                     MainColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     SecondaryColor                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetProgressBarColors(const struct FLinearColor& MainColor, const struct FLinearColor& SecondaryColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetProgressBarColors");

	Params::CoreSpecialEventLoadingScreenWidget_SetProgressBarColors Parms{};

	Parms.MainColor = std::move(MainColor);
	Parms.SecondaryColor = std::move(SecondaryColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWatermarkWidget.UpdateWatermarkText
// (Final, Native, Protected)

void UCoreWatermarkWidget::UpdateWatermarkText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWatermarkWidget", "UpdateWatermarkText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnBackAction
// (Final, Native, Public, BlueprintCallable)

void UCoreEventEntryWidget::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnEnter
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreEventEntryWidget::OnEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnEnter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnLeave
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreEventEntryWidget::OnLeave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnLeave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnShow
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreEventEntryWidget::OnShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEventEntryWidget::OnTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnTabSelected");

	Params::CoreEventEntryWidget_OnTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEventEntryWidget.SetTabsVisuals
// (Event, Protected, BlueprintEvent)

void UCoreEventEntryWidget::SetTabsVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "SetTabsVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.SetUiTakeoverActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEventEntryWidget::SetUiTakeoverActive(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "SetUiTakeoverActive");

	Params::CoreEventEntryWidget_SetUiTakeoverActive Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTutorialObjectiveItem.InitObjective
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTutorialObjectivesViewData      InteractionsViewData                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTutorialObjectiveItem::InitObjective(const struct FTutorialObjectivesViewData& InteractionsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectiveItem", "InitObjective");

	Params::CoreTutorialObjectiveItem_InitObjective Parms{};

	Parms.InteractionsViewData = std::move(InteractionsViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTutorialObjectiveItem.SetObjectiveCompleted
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RemoveAfterCompletion                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTutorialObjectiveItem::SetObjectiveCompleted(bool RemoveAfterCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectiveItem", "SetObjectiveCompleted");

	Params::CoreTutorialObjectiveItem_SetObjectiveCompleted Parms{};

	Parms.RemoveAfterCompletion = RemoveAfterCompletion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalAddon_Implementation
// (Native, Public)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalAddon_Implementation(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalAddon_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalAddon_Implementation Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalPerk_Implementation
// (Native, Public)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalPerk_Implementation(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalPerk_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalPerk_Implementation Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalSkill_Implementation
// (Native, Public)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalSkill_Implementation(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalSkill_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalSkill_Implementation Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSortingWidget.OnNextSortingOptionClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::OnNextSortingOptionClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "OnNextSortingOptionClick");

	Params::CoreSortingWidget_OnNextSortingOptionClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSortingWidget.OnPreviousSortingOptionClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::OnPreviousSortingOptionClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "OnPreviousSortingOptionClick");

	Params::CoreSortingWidget_OnPreviousSortingOptionClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSortingWidget.OnSortingOrderClick
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::OnSortingOrderClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "OnSortingOrderClick");

	Params::CoreSortingWidget_OnSortingOrderClick Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSortingWidget.SetSortingOrderButtonVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowSortingOrderButton                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::SetSortingOrderButtonVisibility(bool ShowSortingOrderButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "SetSortingOrderButtonVisibility");

	Params::CoreSortingWidget_SetSortingOrderButtonVisibility Parms{};

	Parms.ShowSortingOrderButton = ShowSortingOrderButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSortingWidget.ToggleSortingOrder
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESortingOrder                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESortingOrder UCoreSortingWidget::ToggleSortingOrder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "ToggleSortingOrder");

	Params::CoreSortingWidget_ToggleSortingOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSortingWidget.UpdateSortingOrderButton
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESortingOrder                           SortingOrder                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::UpdateSortingOrderButton(ESortingOrder SortingOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "UpdateSortingOrderButton");

	Params::CoreSortingWidget_UpdateSortingOrderButton Parms{};

	Parms.SortingOrder = SortingOrder;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSortingWidget.IsOptionEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESortingOption                          Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSortingWidget::IsOptionEnabled(ESortingOption Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "IsOptionEnabled");

	Params::CoreSortingWidget_IsOptionEnabled Parms{};

	Parms.Option = Option;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreFilterButtonWidget.SetToggledState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsToggled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFilterButtonWidget::SetToggledState(bool IsToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFilterButtonWidget", "SetToggledState");

	Params::CoreFilterButtonWidget_SetToggledState Parms{};

	Parms.IsToggled = IsToggled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreFilterButtonWidget.UpdateVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFilterButtonWidget::UpdateVisualState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFilterButtonWidget", "UpdateVisualState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFilterButtonWidget.IsToggled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreFilterButtonWidget::IsToggled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFilterButtonWidget", "IsToggled");

	Params::CoreFilterButtonWidget_IsToggled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.IsLocked
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreFooterButtonWidget::IsLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "IsLocked");

	Params::CoreFooterButtonWidget_IsLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetBetaFeatureOverlayVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::SetBetaFeatureOverlayVisible(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreFooterButtonWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetHoveredColor
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFooterButtonWidget::SetHoveredColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetHoveredColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetIconTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       IconTexture                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::SetIconTexture(class UTexture2D* IconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetIconTexture");

	Params::CoreFooterButtonWidget_SetIconTexture Parms{};

	Parms.IconTexture = IconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetNotificationVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::SetNotificationVisible(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetNotificationVisible");

	Params::CoreFooterButtonWidget_SetNotificationVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetSubPanelText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::SetSubPanelText(const class FText& Title, const class FText& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetSubPanelText");

	Params::CoreFooterButtonWidget_SetSubPanelText Parms{};

	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetUnhoveredColor
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFooterButtonWidget::SetUnhoveredColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetUnhoveredColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.UpdateLockedFeatureVisuals
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLockedFeature                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::UpdateLockedFeatureVisuals(bool IsLockedFeature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "UpdateLockedFeatureVisuals");

	Params::CoreFooterButtonWidget_UpdateLockedFeatureVisuals Parms{};

	Parms.IsLockedFeature = IsLockedFeature;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.HasValidLockedFeatureData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreFooterButtonWidget::HasValidLockedFeatureData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "HasValidLockedFeatureData");

	Params::CoreFooterButtonWidget_HasValidLockedFeatureData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreBaseTabWidget.OnShow
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreBaseTabWidget::OnShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreBaseTabWidget", "OnShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFooterInputSwitcherWidget.SetBetaFeatureOverlayVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterInputSwitcherWidget::SetBetaFeatureOverlayVisible(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterInputSwitcherWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualCategoryButton.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Param_Title                                            (ConstParm, Parm, NativeAccessSpecifierPublic)
// class FText                             Param_Description                                      (ConstParm, Parm, NativeAccessSpecifierPublic)

void UCoreGameManualCategoryButton::SetText(const class FText& Param_Title, const class FText& Param_Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualCategoryButton", "SetText");

	Params::CoreGameManualCategoryButton_SetText Parms{};

	Parms.Param_Title = std::move(Param_Title);
	Parms.Param_Description = std::move(Param_Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStartSequenceWidget.OnHideStartSequenceComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStartSequenceWidget::OnHideStartSequenceComplete(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStartSequenceWidget", "OnHideStartSequenceComplete");

	Params::CoreStartSequenceWidget_OnHideStartSequenceComplete Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.OnTopicsTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::OnTopicsTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "OnTopicsTabSelected");

	Params::CoreGameManualPanelWidget_OnTopicsTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ResetScrolls
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ResetTopicsScroll                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::ResetScrolls(bool ResetTopicsScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ResetScrolls");

	Params::CoreGameManualPanelWidget_ResetScrolls Parms{};

	Parms.ResetTopicsScroll = ResetTopicsScroll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetCurrentOnbardingMenuSubtitle
// (Final, Native, Private, BlueprintCallable)

void UCoreGameManualPanelWidget::SetCurrentOnbardingMenuSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "SetCurrentOnbardingMenuSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetGameManualMenuState
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EGameManualMenuState                    MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::SetGameManualMenuState(EGameManualMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "SetGameManualMenuState");

	Params::CoreGameManualPanelWidget_SetGameManualMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ShowHelpTopics
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EHelpType                               CategoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::ShowHelpTopics(EHelpType CategoryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ShowHelpTopics");

	Params::CoreGameManualPanelWidget_ShowHelpTopics Parms{};

	Parms.CategoryType = CategoryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ToggleGameManualMenuState
// (Final, Native, Private, BlueprintCallable)

void UCoreGameManualPanelWidget::ToggleGameManualMenuState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ToggleGameManualMenuState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnButtonHovered");

	Params::CoreGenericTextInputPopupWidget_OnButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnButtonUnhovered");

	Params::CoreGenericTextInputPopupWidget_OnButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnKeyboardButtonClicked
// (Final, Native, Protected)

void UCoreGenericTextInputPopupWidget::OnKeyboardButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnKeyboardButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextChanged(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextChanged");

	Params::CoreGenericTextInputPopupWidget_OnTextChanged Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextCommitted
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             InCommitType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextCommitted(const class FText& InText, ETextCommit InCommitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextCommitted");

	Params::CoreGenericTextInputPopupWidget_OnTextCommitted Parms{};

	Parms.InText = std::move(InText);
	Parms.InCommitType = InCommitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextEntered
// (Native, Protected, BlueprintCallable)
// Parameters:
// EPopupButtonType                        SelectedButtonType                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InputText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextEntered(EPopupButtonType SelectedButtonType, const class FString& InputText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextEntered");

	Params::CoreGenericTextInputPopupWidget_OnTextEntered Parms{};

	Parms.SelectedButtonType = SelectedButtonType;
	Parms.InputText = std::move(InputText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextInputChoiceSelected
// (Native, Public, BlueprintCallable)
// Parameters:
// EPopupButtonType                        SelectedButtonType                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InputText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextInputChoiceSelected(EPopupButtonType SelectedButtonType, const class FString& InputText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextInputChoiceSelected");

	Params::CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected Parms{};

	Parms.SelectedButtonType = SelectedButtonType;
	Parms.InputText = std::move(InputText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.UpdateCharacterCounterVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    LimitReached                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::UpdateCharacterCounterVisual(bool LimitReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "UpdateCharacterCounterVisual");

	Params::CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual Parms{};

	Parms.LimitReached = LimitReached;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreArchivePassItemWidget::OnButtonHovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchivePassItemWidget", "OnButtonHovered");

	Params::CoreStoreArchivePassItemWidget_OnButtonHovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreArchivePassItemWidget::OnButtonUnhovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchivePassItemWidget", "OnButtonUnhovered");

	Params::CoreStoreArchivePassItemWidget_OnButtonUnhovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreArchivePassViewData        Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreArchivePassItemWidget::SetData(const struct FStoreArchivePassViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchivePassItemWidget", "SetData");

	Params::CoreStoreArchivePassItemWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetPreviousState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAimingCrosshairState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAimingCrosshairState UCoreHudAimingCrosshairWidget::GetPreviousState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAimingCrosshairWidget", "GetPreviousState");

	Params::CoreHudAimingCrosshairWidget_GetPreviousState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetProgress
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreHudAimingCrosshairWidget::GetProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAimingCrosshairWidget", "GetProgress");

	Params::CoreHudAimingCrosshairWidget_GetProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAimingCrosshairState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAimingCrosshairState UCoreHudAimingCrosshairWidget::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAimingCrosshairWidget", "GetState");

	Params::CoreHudAimingCrosshairWidget_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OnClearFiltersClicked
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersFilterWidget::OnClearFiltersClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "OnClearFiltersClicked");

	Params::CoreStoreCharactersFilterWidget_OnClearFiltersClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OnFilterOptionCheckBoxToggled
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreCharactersFilterWidget::OnFilterOptionCheckBoxToggled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "OnFilterOptionCheckBoxToggled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OverrideDefaultFiltersAndSortingParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    DefaultFilterAvailable                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultFilterOwned                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SortingOptions                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortingOption                          DefaultSortingOption                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortingOrder                           DefaultSortingOrder                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersFilterWidget::OverrideDefaultFiltersAndSortingParams(bool DefaultFilterAvailable, bool DefaultFilterOwned, int32 SortingOptions, ESortingOption DefaultSortingOption, ESortingOrder DefaultSortingOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "OverrideDefaultFiltersAndSortingParams");

	Params::CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams Parms{};

	Parms.DefaultFilterAvailable = DefaultFilterAvailable;
	Parms.DefaultFilterOwned = DefaultFilterOwned;
	Parms.SortingOptions = SortingOptions;
	Parms.DefaultSortingOption = DefaultSortingOption;
	Parms.DefaultSortingOrder = DefaultSortingOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.GetCurrentFiltersData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStoreCharactersFiltersData      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreCharactersFiltersData UCoreStoreCharactersFilterWidget::GetCurrentFiltersData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "GetCurrentFiltersData");

	Params::CoreStoreCharactersFilterWidget_GetCurrentFiltersData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.ClearAlerts
// (Final, Native, Private)

void UCoreHudAlertWidget::ClearAlerts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "ClearAlerts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.OnClearAlertsComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudAlertWidget::OnClearAlertsComplete(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "OnClearAlertsComplete");

	Params::CoreHudAlertWidget_OnClearAlertsComplete Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.OnPopAlertComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudAlertWidget::OnPopAlertComplete(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "OnPopAlertComplete");

	Params::CoreHudAlertWidget_OnPopAlertComplete Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.PopAlert
// (Final, Native, Private)

void UCoreHudAlertWidget::PopAlert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "PopAlert");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetAlerts
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCoreBaseUserWidget*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreBaseUserWidget*> UCoreHudAlertWidget::GetAlerts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetAlerts");

	Params::CoreHudAlertWidget_GetAlerts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetPendingAlerts
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCoreBaseUserWidget*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreBaseUserWidget*> UCoreHudAlertWidget::GetPendingAlerts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetPendingAlerts");

	Params::CoreHudAlertWidget_GetPendingAlerts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetRemainingTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreHudAlertWidget::GetRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetRemainingTime");

	Params::CoreHudAlertWidget_GetRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAntiCampSelfUnhookMeterWidget.SetVisualState
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAntiCampSelfUnhookMeterState           NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudAntiCampSelfUnhookMeterWidget::SetVisualState(const EAntiCampSelfUnhookMeterState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAntiCampSelfUnhookMeterWidget", "SetVisualState");

	Params::CoreHudAntiCampSelfUnhookMeterWidget_SetVisualState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudAntiCampSelfUnhookMeterWidget.GetPreviousState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAntiCampSelfUnhookMeterState           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAntiCampSelfUnhookMeterState UCoreHudAntiCampSelfUnhookMeterWidget::GetPreviousState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAntiCampSelfUnhookMeterWidget", "GetPreviousState");

	Params::CoreHudAntiCampSelfUnhookMeterWidget_GetPreviousState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAntiCampSelfUnhookMeterWidget.GetProgress
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreHudAntiCampSelfUnhookMeterWidget::GetProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAntiCampSelfUnhookMeterWidget", "GetProgress");

	Params::CoreHudAntiCampSelfUnhookMeterWidget_GetProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAntiCampSelfUnhookMeterWidget.GetState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAntiCampSelfUnhookMeterState           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAntiCampSelfUnhookMeterState UCoreHudAntiCampSelfUnhookMeterWidget::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAntiCampSelfUnhookMeterWidget", "GetState");

	Params::CoreHudAntiCampSelfUnhookMeterWidget_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCategoryWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreCategoryViewData           Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCategoryWidget::SetData(const struct FStoreCategoryViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCategoryWidget", "SetData");

	Params::CoreStoreCategoryWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.Init
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDirectionalInputKey                    Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::Init(EDirectionalInputKey Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "Init");

	Params::CoreHudDirectionalMiniGameItemWidget_Init Parms{};

	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.RevealDirection
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WithAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::RevealDirection(bool WithAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "RevealDirection");

	Params::CoreHudDirectionalMiniGameItemWidget_RevealDirection Parms{};

	Parms.WithAnimation = WithAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateFinaleVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSuccessful                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::UpdateFinaleVisualState(bool IsSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "UpdateFinaleVisualState");

	Params::CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState Parms{};

	Parms.IsSuccessful = IsSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateResult
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSuccessful                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::UpdateResult(bool IsSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "UpdateResult");

	Params::CoreHudDirectionalMiniGameItemWidget_UpdateResult Parms{};

	Parms.IsSuccessful = IsSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetWidgets
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class UCoreHudDirectionalMiniGameItemWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreHudDirectionalMiniGameItemWidget*> UCoreHudDirectionalMiniGameWidget::GetWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "GetWidgets");

	Params::CoreHudDirectionalMiniGameWidget_GetWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.ShowVisual
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreHudDirectionalMiniGameWidget::ShowVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "ShowVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetCurrentType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDirectionalMiniGameType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDirectionalMiniGameType UCoreHudDirectionalMiniGameWidget::GetCurrentType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "GetCurrentType");

	Params::CoreHudDirectionalMiniGameWidget_GetCurrentType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStatusEffectWidget.GetStatusEffectMap
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<class FName, class UCoreStatusEffectIcon*>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class FName, class UCoreStatusEffectIcon*> UCoreStatusEffectWidget::GetStatusEffectMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectWidget", "GetStatusEffectMap");

	Params::CoreStatusEffectWidget_GetStatusEffectMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudScoreAlertItem.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FScoreAlertViewData              Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreHudScoreAlertItem::SetData(const struct FScoreAlertViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudScoreAlertItem", "SetData");

	Params::CoreHudScoreAlertItem_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudStatusEffectAlertItem.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStatusEffectAlertViewData       Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreHudStatusEffectAlertItem::SetData(const struct FStatusEffectAlertViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudStatusEffectAlertItem", "SetData");

	Params::CoreHudStatusEffectAlertItem_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreBaseSubTabsWidget.GetSubTabContentForTab
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SubTabId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCoreStoreBaseSubTabsWidget::GetSubTabContentForTab(int32 SubTabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreBaseSubTabsWidget", "GetSubTabContentForTab");

	Params::CoreStoreBaseSubTabsWidget_GetSubTabContentForTab Parms{};

	Parms.SubTabId = SubTabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreBaseSubTabsWidget.OnSubTabSelected
// (Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreBaseSubTabsWidget::OnSubTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreBaseSubTabsWidget", "OnSubTabSelected");

	Params::CoreStoreBaseSubTabsWidget_OnSubTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreIconButtonWidget.SetIconTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Param_IconTexture                                      (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreIconButtonWidget::SetIconTexture(const TSoftObjectPtr<class UTexture2D> Param_IconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreIconButtonWidget", "SetIconTexture");

	Params::CoreIconButtonWidget_SetIconTexture Parms{};

	Parms.Param_IconTexture = Param_IconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.SetActiveVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToggleButtonWidget::SetActiveVisualState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "SetActiveVisualState");

	Params::CoreToggleButtonWidget_SetActiveVisualState Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.SetToDefaultState
// (Final, Native, Public, BlueprintCallable)

void UCoreToggleButtonWidget::SetToDefaultState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "SetToDefaultState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.IsToggled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreToggleButtonWidget::IsToggled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "IsToggled");

	Params::CoreToggleButtonWidget_IsToggled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.BindHoverBorder
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsInteractable                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::BindHoverBorder(const bool Param_IsInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "BindHoverBorder");

	Params::CoreStoreItemWidget_BindHoverBorder Parms{};

	Parms.Param_IsInteractable = Param_IsInteractable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.ClearPriceTagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreItemWidget::ClearPriceTagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "ClearPriceTagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.ClearTimerFlagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreItemWidget::ClearTimerFlagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "ClearTimerFlagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.CreatePriceTagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCorePriceTagWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePriceTagWidget* UCoreStoreItemWidget::CreatePriceTagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "CreatePriceTagWidget");

	Params::CoreStoreItemWidget_CreatePriceTagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.CreateTimerFlagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreTimerFlagWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTimerFlagWidget* UCoreStoreItemWidget::CreateTimerFlagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "CreateTimerFlagWidget");

	Params::CoreStoreItemWidget_CreateTimerFlagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::OnButtonHovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "OnButtonHovered");

	Params::CoreStoreItemWidget_OnButtonHovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsSelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* TargetButton, bool Param_IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "OnButtonSelectedChanged");

	Params::CoreStoreItemWidget_OnButtonSelectedChanged Parms{};

	Parms.TargetButton = TargetButton;
	Parms.Param_IsSelected = Param_IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::OnButtonUnhovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "OnButtonUnhovered");

	Params::CoreStoreItemWidget_OnButtonUnhovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetNotificationTag
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNew                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetNotificationTag(const bool IsNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetNotificationTag");

	Params::CoreStoreItemWidget_SetNotificationTag Parms{};

	Parms.IsNew = IsNew;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetPriceTagScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PriceTagScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetPriceTagScale(const float PriceTagScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetPriceTagScale");

	Params::CoreStoreItemWidget_SetPriceTagScale Parms{};

	Parms.PriceTagScale = PriceTagScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetScale");

	Params::CoreStoreItemWidget_SetScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetShowTooltipOnHover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ShowTooltipOnHover                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetShowTooltipOnHover(const bool ShowTooltipOnHover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetShowTooltipOnHover");

	Params::CoreStoreItemWidget_SetShowTooltipOnHover Parms{};

	Parms.ShowTooltipOnHover = ShowTooltipOnHover;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetStoreItemData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreItemViewData*               Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetStoreItemData(class UStoreItemViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetStoreItemData");

	Params::CoreStoreItemWidget_SetStoreItemData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetStoreItemLayout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LayoutMask                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetStoreItemLayout(int32 LayoutMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetStoreItemLayout");

	Params::CoreStoreItemWidget_SetStoreItemLayout Parms{};

	Parms.LayoutMask = LayoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetTimerFlagSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFlagSize                               FlagSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetTimerFlagSize(EFlagSize FlagSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetTimerFlagSize");

	Params::CoreStoreItemWidget_SetTimerFlagSize Parms{};

	Parms.FlagSize = FlagSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.IsTagEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LayoutMask                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreStoreItemWidget::IsTagEnabled(const int32 LayoutMask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "IsTagEnabled");

	Params::CoreStoreItemWidget_IsTagEnabled Parms{};

	Parms.LayoutMask = LayoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharacterItemWidget.SetStoreCharacterItemData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCharacterItemViewData*      Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterItemWidget::SetStoreCharacterItemData(class UStoreCharacterItemViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterItemWidget", "SetStoreCharacterItemData");

	Params::CoreStoreCharacterItemWidget_SetStoreCharacterItemData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreIconToggleWidget.SetNotificationIconVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowNotification                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreIconToggleWidget::SetNotificationIconVisibility(bool ShowNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreIconToggleWidget", "SetNotificationIconVisibility");

	Params::CoreIconToggleWidget_SetNotificationIconVisibility Parms{};

	Parms.ShowNotification = ShowNotification;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.OnItemClicked
// (Final, Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::OnItemClicked(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "OnItemClicked");

	Params::CoreImagePreviewAreaWidget_OnItemClicked Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetAnimatedPreviewData
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCustomizationItemViewData*  PreviewItemData                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::SetAnimatedPreviewData(const class UStoreCustomizationItemViewData* PreviewItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "SetAnimatedPreviewData");

	Params::CoreImagePreviewAreaWidget_SetAnimatedPreviewData Parms{};

	Parms.PreviewItemData = PreviewItemData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationItemPreviewAreaViewDataViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::SetData(const struct FCustomizationItemPreviewAreaViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "SetData");

	Params::CoreImagePreviewAreaWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetPreviewContainerVisual
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECustomizationCategory                  CustomizationCategory                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::SetPreviewContainerVisual(const ECustomizationCategory CustomizationCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "SetPreviewContainerVisual");

	Params::CoreImagePreviewAreaWidget_SetPreviewContainerVisual Parms{};

	Parms.CustomizationCategory = CustomizationCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.ShowBGImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreImagePreviewAreaWidget::ShowBGImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "ShowBGImage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.GetSectionType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENewsAndMessagesSectionType             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENewsAndMessagesSectionType UCoreInboxBodySectionBaseWidget::GetSectionType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionBaseWidget", "GetSectionType");

	Params::CoreInboxBodySectionBaseWidget_GetSectionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInboxBodySectionViewData*        ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInboxBodySectionBaseWidget::SetData(class UInboxBodySectionViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionBaseWidget", "SetData");

	Params::CoreInboxBodySectionBaseWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemAvailabilityBannerWidget.OnAvailabilityBannerClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemAvailabilityBannerWidget::OnAvailabilityBannerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemAvailabilityBannerWidget", "OnAvailabilityBannerClicked");

	Params::CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.CreateSectionOfType
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ENewsAndMessagesSectionType             Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxBodySectionWrapperWidget::CreateSectionOfType(const ENewsAndMessagesSectionType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionWrapperWidget", "CreateSectionOfType");

	Params::CoreInboxBodySectionWrapperWidget_CreateSectionOfType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.DestroyCurrentSection
// (Final, Native, Protected, BlueprintCallable)

void UCoreInboxBodySectionWrapperWidget::DestroyCurrentSection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionWrapperWidget", "DestroyCurrentSection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInboxBodySectionViewData*        ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInboxBodySectionWrapperWidget::SetData(class UInboxBodySectionViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionWrapperWidget", "SetData");

	Params::CoreInboxBodySectionWrapperWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.OnClaimButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedMysteryBoxWidget::OnClaimButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedMysteryBoxWidget", "OnClaimButtonClicked");

	Params::CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreMysteryBoxViewData         ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedMysteryBoxWidget::SetData(const struct FStoreMysteryBoxViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedMysteryBoxWidget", "SetData");

	Params::CoreStoreFeaturedMysteryBoxWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.GetMysteryBoxViewData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FStoreMysteryBoxViewData   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FStoreMysteryBoxViewData UCoreStoreFeaturedMysteryBoxWidget::GetMysteryBoxViewData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedMysteryBoxWidget", "GetMysteryBoxViewData");

	Params::CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInboxBodyWidget.GetBodyType
// (Event, Public, BlueprintEvent)
// Parameters:
// ENewsAndMessagesBodyType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENewsAndMessagesBodyType UCoreInboxBodyWidget::GetBodyType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodyWidget", "GetBodyType");

	Params::CoreInboxBodyWidget_GetBodyType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInboxBodyWidget.OnClaimClicked
// (Final, Native, Private)

void UCoreInboxBodyWidget::OnClaimClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodyWidget", "OnClaimClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodyWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInboxItemViewData*               ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxBodyWidget::SetData(const class UInboxItemViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodyWidget", "SetData");

	Params::CoreInboxBodyWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.OnItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::OnItemClicked(class UCoreButtonWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "OnItemClicked");

	Params::CoreInboxItemWidget_OnItemClicked Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.OnSelectedStateChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsSelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::OnSelectedStateChanged(class UCoreSelectableButtonWidget* TargetButton, bool Param_IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "OnSelectedStateChanged");

	Params::CoreInboxItemWidget_OnSelectedStateChanged Parms{};

	Parms.TargetButton = TargetButton;
	Parms.Param_IsSelected = Param_IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetClaimStatus
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EInboxRewardStatus                      Status                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetClaimStatus(const EInboxRewardStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetClaimStatus");

	Params::CoreInboxItemWidget_SetClaimStatus Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInboxItemViewData*               ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetData(const class UInboxItemViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetData");

	Params::CoreInboxItemWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetNotificationIcon
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    IsNew                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetNotificationIcon(const bool IsNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetNotificationIcon");

	Params::CoreInboxItemWidget_SetNotificationIcon Parms{};

	Parms.IsNew = IsNew;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetSticky
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSticky                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetSticky(const bool IsSticky)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetSticky");

	Params::CoreInboxItemWidget_SetSticky Parms{};

	Parms.IsSticky = IsSticky;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UArchiveStoryLevelViewData*       ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelectorReadOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::SetData(const class UArchiveStoryLevelViewData* ViewData, bool IsSelectorReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "SetData");

	Params::CoreStoryLevelButtonWidget_SetData Parms{};

	Parms.ViewData = ViewData;
	Parms.IsSelectorReadOnly = IsSelectorReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateStatusData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EArchivesStoryLevelStatus               NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelectorReadOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateStatusData(EArchivesStoryLevelStatus NewStatus, bool IsSelectorReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateStatusData");

	Params::CoreStoryLevelButtonWidget_UpdateStatusData Parms{};

	Parms.NewStatus = NewStatus;
	Parms.IsSelectorReadOnly = IsSelectorReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UArchiveStoryLevelViewData*       ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewlyUnlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateVisual(const class UArchiveStoryLevelViewData* ViewData, bool NewlyUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateVisual");

	Params::CoreStoryLevelButtonWidget_UpdateVisual Parms{};

	Parms.ViewData = ViewData;
	Parms.NewlyUnlocked = NewlyUnlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisualStatus
// (Event, Protected, BlueprintEvent)
// Parameters:
// EArchivesStoryLevelStatus               NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewlyUnlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateVisualStatus(EArchivesStoryLevelStatus NewStatus, bool NewlyUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateVisualStatus");

	Params::CoreStoryLevelButtonWidget_UpdateVisualStatus Parms{};

	Parms.NewStatus = NewStatus;
	Parms.NewlyUnlocked = NewlyUnlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.GetLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreStoryLevelButtonWidget::GetLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "GetLevel");

	Params::CoreStoryLevelButtonWidget_GetLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInboxListWidget.OnItemClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::OnItemClicked(const class FName& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "OnItemClicked");

	Params::CoreInboxListWidget_OnItemClicked Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxListWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class UInboxItemViewData*>       Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             EmptyListText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::SetData(const TArray<class UInboxItemViewData*>& Data, const class FText& EmptyListText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "SetData");

	Params::CoreInboxListWidget_SetData Parms{};

	Parms.Data = std::move(Data);
	Parms.EmptyListText = std::move(EmptyListText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxListWidget.SetError
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             ErrorText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::SetError(const class FText& ErrorText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "SetError");

	Params::CoreInboxListWidget_SetError Parms{};

	Parms.ErrorText = std::move(ErrorText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxListWidget.SetLoading
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             LoadingText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::SetLoading(const class FText& LoadingText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "SetLoading");

	Params::CoreInboxListWidget_SetLoading Parms{};

	Parms.LoadingText = std::move(LoadingText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxListWidget.SetSelectedItem
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             SelectedItemId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::SetSelectedItem(const class FName& SelectedItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "SetSelectedItem");

	Params::CoreInboxListWidget_SetSelectedItem Parms{};

	Parms.SelectedItemId = SelectedItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.DestroyCurrentBody
// (Final, Native, Protected, BlueprintCallable)

void UCoreInboxWidget::DestroyCurrentBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "DestroyCurrentBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnBackButtonClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnClaimAllClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnClaimAllClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnClaimAllClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnClaimClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnClaimClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnClaimClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnItemClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxWidget::OnItemClicked(const class FName& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnItemClicked");

	Params::CoreInboxWidget_OnItemClicked Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnReadAllClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnReadAllClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnReadAllClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxWidget::OnTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnTabSelected");

	Params::CoreInboxWidget_OnTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.AnimateHide
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::AnimateHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "AnimateHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.AnimateShow
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::AnimateShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "AnimateShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnArchivePassClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnArchivePassClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnArchivePassClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCharacterClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnCharacterClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnCharacterClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnCharacterClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCurrencyButtonClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnCurrencyButtonClicked(ECurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnCurrencyButtonClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked Parms{};

	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCustomizationClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnCustomizationClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnCustomizationClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnHideAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::OnHideAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnHideAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnPremiumButtonClicked
// (Final, Native, Private)

void UCoreStoreSpecialPackDetailsWidget::OnPremiumButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnPremiumButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnShowAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::OnShowAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnShowAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.SetSpecialPackImageUsingComposition
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumberOfItems                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStorePackContentData*>    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, class UTexture2D*>    Icons                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::SetSpecialPackImageUsingComposition(const int32 NumberOfItems, const TArray<class UStorePackContentData*>& Data, const TMap<class FName, class UTexture2D*>& Icons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "SetSpecialPackImageUsingComposition");

	Params::CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition Parms{};

	Parms.NumberOfItems = NumberOfItems;
	Parms.Data = std::move(Data);
	Parms.Icons = std::move(Icons);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.LoadPackImage
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        LocalPtr                                               (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftRemoteContentCacheObjectPtr RemotePtr                                              (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::LoadPackImage(const TSoftObjectPtr<class UTexture2D>& LocalPtr, struct FSoftRemoteContentCacheObjectPtr* RemotePtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "LoadPackImage");

	Params::CoreStoreSpecialPackDetailsWidget_LoadPackImage Parms{};

	Parms.LocalPtr = LocalPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RemotePtr != nullptr)
		*RemotePtr = std::move(Parms.RemotePtr);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.DisplayPrompt
// (Event, Protected, BlueprintEvent)

void UCoreInputPromptWidget::DisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "DisplayPrompt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UCoreInputPromptWidget::GetInputKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "GetInputKey");

	Params::CoreInputPromptWidget_GetInputKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInputPromptWidget::IsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "IsEnabled");

	Params::CoreInputPromptWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::OnEnabledChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "OnEnabledChanged");

	Params::CoreInputPromptWidget_OnEnabledChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.PromptNotFound
// (Final, Native, Protected, BlueprintCallable)

void UCoreInputPromptWidget::PromptNotFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "PromptNotFound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetBetaFeatureOverlayVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetBetaFeatureOverlayVisible(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreInputPromptWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetEnabled");

	Params::CoreInputPromptWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetInputKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             InputKey                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetInputKey(const struct FKey& InputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetInputKey");

	Params::CoreInputPromptWidget_SetInputKey Parms{};

	Parms.InputKey = std::move(InputKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputShortDisplayName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreInputPromptWidget::GetInputShortDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "GetInputShortDisplayName");

	Params::CoreInputPromptWidget_GetInputShortDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionProgressWidget.SetProficiencies
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FStatusEffectViewData>    ProficiencyDatas                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInteractionProgressWidget::SetProficiencies(const TArray<struct FStatusEffectViewData>& ProficiencyDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionProgressWidget", "SetProficiencies");

	Params::CoreInteractionProgressWidget_SetProficiencies Parms{};

	Parms.ProficiencyDatas = std::move(ProficiencyDatas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.InitItemContainer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreFeaturedCustomizationItemContainerWidget::InitItemContainer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "InitItemContainer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.MoveNext
// (Final, Native, Private)

void UCoreStoreFeaturedCustomizationItemContainerWidget::MoveNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "MoveNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.MovePrevious
// (Final, Native, Private)

void UCoreStoreFeaturedCustomizationItemContainerWidget::MovePrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "MovePrevious");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnMoveCompleted
// (Final, Native, Private)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnMoveCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnMoveCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnSelectedItemAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnSelectedItemAgain(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnSelectedItemAgain");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnSelectedItemChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnSelectedItemChanged(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnSelectedItemChanged");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.SetItems
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>ViewDataArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::SetItems(const TArray<class UStoreCustomizationItemViewData*>& ViewDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "SetItems");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_SetItems Parms{};

	Parms.ViewDataArray = std::move(ViewDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.PlayIdleAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreInteractionPromptActionWidget::PlayIdleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "PlayIdleAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Param_InputKey                                         (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey(const struct FKey& Param_InputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey");

	Params::CoreInteractionPromptActionWidget_SetInputKey Parms{};

	Parms.Param_InputKey = std::move(Param_InputKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Param_InputKey2                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey2(const struct FKey& Param_InputKey2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey2");

	Params::CoreInteractionPromptActionWidget_SetInputKey2 Parms{};

	Parms.Param_InputKey2 = std::move(Param_InputKey2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Param_InputKey3                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey3(const struct FKey& Param_InputKey3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey3");

	Params::CoreInteractionPromptActionWidget_SetInputKey3 Parms{};

	Parms.Param_InputKey3 = std::move(Param_InputKey3);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey4
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Param_InputKey4                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey4(const struct FKey& Param_InputKey4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey4");

	Params::CoreInteractionPromptActionWidget_SetInputKey4 Parms{};

	Parms.Param_InputKey4 = std::move(Param_InputKey4);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.StopIdleAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreInteractionPromptActionWidget::StopIdleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "StopIdleAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasFourthPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasFourthPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasFourthPrompt");

	Params::CoreInteractionPromptActionWidget_HasFourthPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasSecondPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasSecondPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasSecondPrompt");

	Params::CoreInteractionPromptActionWidget_HasSecondPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasThirdPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasThirdPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasThirdPrompt");

	Params::CoreInteractionPromptActionWidget_HasThirdPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreSpecialsWidget.OnArchivePassBannerClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialsWidget::OnArchivePassBannerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialsWidget", "OnArchivePassBannerClicked");

	Params::CoreStoreSpecialsWidget_OnArchivePassBannerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialsWidget.OnSpecialItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialsWidget::OnSpecialItemClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialsWidget", "OnSpecialItemClicked");

	Params::CoreStoreSpecialsWidget_OnSpecialItemClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreInteractionPromptWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.OnLargeTextSettingsChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsLargeTextEnabled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptWidget::OnLargeTextSettingsChanged(bool IsLargeTextEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "OnLargeTextSettingsChanged");

	Params::CoreInteractionPromptWidget_OnLargeTextSettingsChanged Parms{};

	Parms.IsLargeTextEnabled = IsLargeTextEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInteractionPromptViewData       Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInteractionPromptWidget::SetData(const struct FInteractionPromptViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "SetData");

	Params::CoreInteractionPromptWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.BindToButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::BindToButton(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "BindToButton");

	Params::CoreTimerFlagWidget_BindToButton Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.GetCachedData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimerFlagViewData               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTimerFlagViewData UCoreTimerFlagWidget::GetCachedData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "GetCachedData");

	Params::CoreTimerFlagWidget_GetCachedData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.NativeDestruct
// (Native, Public)

void UCoreTimerFlagWidget::NativeDestruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "NativeDestruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTargetHovered
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::OnTargetHovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "OnTargetHovered");

	Params::CoreTimerFlagWidget_OnTargetHovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTargetUnhovered
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::OnTargetUnhovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "OnTargetUnhovered");

	Params::CoreTimerFlagWidget_OnTargetUnhovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTimerTick
// (Final, Native, Protected)
// Parameters:
// int32                                   RemainingTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::OnTimerTick(int32 RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "OnTimerTick");

	Params::CoreTimerFlagWidget_OnTimerTick Parms{};

	Parms.RemainingTime = RemainingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimerFlagViewData               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::SetData(const struct FTimerFlagViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "SetData");

	Params::CoreTimerFlagWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.UnbindFromButton
// (Final, Native, Public, BlueprintCallable)

void UCoreTimerFlagWidget::UnbindFromButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "UnbindFromButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.UpdateFlagSize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFlagSize                               FlagSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::UpdateFlagSize(EFlagSize FlagSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "UpdateFlagSize");

	Params::CoreTimerFlagWidget_UpdateFlagSize Parms{};

	Parms.FlagSize = FlagSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.UpdateTimer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           NewTimer                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::UpdateTimer(const class FString& NewTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "UpdateTimer");

	Params::CoreTimerFlagWidget_UpdateTimer Parms{};

	Parms.NewTimer = std::move(NewTimer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.GetCurrentFlagSize
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFlagSize                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFlagSize UCoreTimerFlagWidget::GetCurrentFlagSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "GetCurrentFlagSize");

	Params::CoreTimerFlagWidget_GetCurrentFlagSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.IsDataSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreTimerFlagWidget::IsDataSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "IsDataSet");

	Params::CoreTimerFlagWidget_IsDataSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksListWidget.OnItemClicked
// (Final, Native, Private)
// Parameters:
// class FString                           PackId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPacksListWidget::OnItemClicked(const class FString& PackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksListWidget", "OnItemClicked");

	Params::CoreStoreSpecialPacksListWidget_OnItemClicked Parms{};

	Parms.PackId = std::move(PackId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksListWidget.OnItemSeen
// (Final, Native, Private)
// Parameters:
// class FString                           PackId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPacksListWidget::OnItemSeen(const class FString& PackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksListWidget", "OnItemSeen");

	Params::CoreStoreSpecialPacksListWidget_OnItemSeen Parms{};

	Parms.PackId = std::move(PackId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetLoadingHint
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLoadingHintViewData             LoadingHintData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::SetLoadingHint(const struct FLoadingHintViewData& LoadingHintData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "SetLoadingHint");

	Params::CoreLoadingHintsDisplayWidget_SetLoadingHint Parms{};

	Parms.LoadingHintData = std::move(LoadingHintData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetTextAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            TitleAlignment                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextJustify                            DescriptionAlignment                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::SetTextAlignment(ETextJustify TitleAlignment, ETextJustify DescriptionAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "SetTextAlignment");

	Params::CoreLoadingHintsDisplayWidget_SetTextAlignment Parms{};

	Parms.TitleAlignment = TitleAlignment;
	Parms.DescriptionAlignment = DescriptionAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetTextColors
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     TitleColor                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     DescriptionColor                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::SetTextColors(const struct FLinearColor& TitleColor, const struct FLinearColor& DescriptionColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "SetTextColors");

	Params::CoreLoadingHintsDisplayWidget_SetTextColors Parms{};

	Parms.TitleColor = std::move(TitleColor);
	Parms.DescriptionColor = std::move(DescriptionColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.StartFadeSequence
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeOutDelay                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::StartFadeSequence(float FadeOutDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "StartFadeSequence");

	Params::CoreLoadingHintsDisplayWidget_StartFadeSequence Parms{};

	Parms.FadeOutDelay = FadeOutDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLoadingLogoWidget.UpdateColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingLogoWidget::UpdateColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingLogoWidget", "UpdateColor");

	Params::CoreLoadingLogoWidget_UpdateColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.FullUpdateCurrency
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCurrencyLabelViewData           ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreWalletWidget::FullUpdateCurrency(const struct FCurrencyLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "FullUpdateCurrency");

	Params::CoreWalletWidget_FullUpdateCurrency Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.InitWallet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FCurrencyLabelViewData>   WalletData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreWalletWidget::InitWallet(const TArray<struct FCurrencyLabelViewData>& WalletData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "InitWallet");

	Params::CoreWalletWidget_InitWallet Parms{};

	Parms.WalletData = std::move(WalletData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.OnCurrencyClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::OnCurrencyClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "OnCurrencyClicked");

	Params::CoreWalletWidget_OnCurrencyClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.PlayNotEnoughCurrency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECurrencyType                           Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::PlayNotEnoughCurrency(const ECurrencyType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "PlayNotEnoughCurrency");

	Params::CoreWalletWidget_PlayNotEnoughCurrency Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.SetCurrenciesButtonsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::SetCurrenciesButtonsEnabled(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "SetCurrenciesButtonsEnabled");

	Params::CoreWalletWidget_SetCurrenciesButtonsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.UpdateCurrency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECurrencyType                           Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PreviousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::UpdateCurrency(const ECurrencyType Type, int32 NewBalance, int32 PreviousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "UpdateCurrency");

	Params::CoreWalletWidget_UpdateCurrency Parms{};

	Parms.Type = Type;
	Parms.NewBalance = NewBalance;
	Parms.PreviousBalance = PreviousBalance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingScreenWidget.OnLoadingHintsFadeSequenceCompleted
// (Final, Native, Protected)

void UCoreLoadingScreenWidget::OnLoadingHintsFadeSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingScreenWidget", "OnLoadingHintsFadeSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingScreenWidget.SetProgressBarColors
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     PrimaryColor                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     SecondaryColor                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingScreenWidget::SetProgressBarColors(const struct FLinearColor& PrimaryColor, const struct FLinearColor& SecondaryColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingScreenWidget", "SetProgressBarColors");

	Params::CoreLoadingScreenWidget_SetProgressBarColors Parms{};

	Parms.PrimaryColor = std::move(PrimaryColor);
	Parms.SecondaryColor = std::move(SecondaryColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingScreenWidget.SetProgressBarValue
// (Final, Native, Protected, BlueprintCallable, Const)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingScreenWidget::SetProgressBarValue(float Progress) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingScreenWidget", "SetProgressBarValue");

	Params::CoreLoadingScreenWidget_SetProgressBarValue Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnScrollableStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsScrollable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::OnScrollableStateChanged(const bool IsScrollable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "OnScrollableStateChanged");

	Params::CoreLobbyCharactersWidget_OnScrollableStateChanged Parms{};

	Parms.IsScrollable = IsScrollable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSelectionSubTabHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::OnSelectionSubTabHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "OnSelectionSubTabHovered");

	Params::CoreLobbyCharactersWidget_OnSelectionSubTabHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSelectionSubTabUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::OnSelectionSubTabUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "OnSelectionSubTabUnhovered");

	Params::CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSubTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::OnSubTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "OnSubTabSelected");

	Params::CoreLobbyCharactersWidget_OnSubTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.SetRightStickWidget
// (Final, Native, Protected, BlueprintCallable)

void UCoreLobbyCharactersWidget::SetRightStickWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "SetRightStickWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.SetRightStickWidgetBehaviours
// (Final, Native, Protected, BlueprintCallable)

void UCoreLobbyCharactersWidget::SetRightStickWidgetBehaviours()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "SetRightStickWidgetBehaviours");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.SetScrollPrompts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*ScrollPrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::SetScrollPrompts(class UCoreKeyListenerInputPromptWidget* ScrollPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "SetScrollPrompts");

	Params::CoreLobbyCharactersWidget_SetScrollPrompts Parms{};

	Parms.ScrollPrompt = ScrollPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.UpdateScrollPrompt
// (Final, Native, Public, BlueprintCallable, Const)

void UCoreLobbyCharactersWidget::UpdateScrollPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "UpdateScrollPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.ChangeVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::ChangeVisibility(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "ChangeVisibility");

	Params::CoreToastNotificationWidget_ChangeVisibility Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnButtonClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   buttonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::OnButtonClicked(const int32 buttonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnButtonClicked");

	Params::CoreToastNotificationWidget_OnButtonClicked Parms{};

	Parms.buttonId = buttonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnLeftButtonClicked
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::OnLeftButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnLeftButtonClicked");

	Params::CoreToastNotificationWidget_OnLeftButtonClicked Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnRightButtonClicked
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::OnRightButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnRightButtonClicked");

	Params::CoreToastNotificationWidget_OnRightButtonClicked Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnTimerFinished
// (Final, Native, Private)

void UCoreToastNotificationWidget::OnTimerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnTimerFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.SetVisuals
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FToastNotificationViewData       ToastData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    Param_IsInteractable                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::SetVisuals(const struct FToastNotificationViewData& ToastData, const bool Param_IsInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "SetVisuals");

	Params::CoreToastNotificationWidget_SetVisuals Parms{};

	Parms.ToastData = std::move(ToastData);
	Parms.Param_IsInteractable = Param_IsInteractable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.UpdateScaleformInputBlocker
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreToastNotificationWidget::UpdateScaleformInputBlocker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "UpdateScaleformInputBlocker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnOutAnimationFinished
// (Final, Native, Private, BlueprintCallable, Const)

void UCoreToastNotificationWidget::OnOutAnimationFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnOutAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.HideBackgroundVisual
// (Event, Protected, BlueprintEvent)

void UCoreLobbyWidget::HideBackgroundVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "HideBackgroundVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreLobbyWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnDailyRitualsButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnDailyRitualsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnDailyRitualsButtonClicked");

	Params::CoreLobbyWidget_OnDailyRitualsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnFriendsButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnFriendsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnFriendsButtonClicked");

	Params::CoreLobbyWidget_OnFriendsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnMatchManagementButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnMatchManagementButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnMatchManagementButtonClicked");

	Params::CoreLobbyWidget_OnMatchManagementButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnSettingsButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnSettingsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnSettingsButtonClicked");

	Params::CoreLobbyWidget_OnSettingsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.ShowBackgroundVisual
// (Event, Protected, BlueprintEvent)

void UCoreLobbyWidget::ShowBackgroundVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "ShowBackgroundVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreLobbyWidget.UpdateRightStickInputPrompts
// (Final, Native, Protected, BlueprintCallable)

void UCoreLobbyWidget::UpdateRightStickInputPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "UpdateRightStickInputPrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLockedFeatureButtonWidget.UpdateLockedFeatureVisuals
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLockedFeature                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLockedFeatureButtonWidget::UpdateLockedFeatureVisuals(bool IsLockedFeature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLockedFeatureButtonWidget", "UpdateLockedFeatureVisuals");

	Params::CoreLockedFeatureButtonWidget_UpdateLockedFeatureVisuals Parms{};

	Parms.IsLockedFeature = IsLockedFeature;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLockedFeatureButtonWidget.HasValidLockedFeatureData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreLockedFeatureButtonWidget::HasValidLockedFeatureData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLockedFeatureButtonWidget", "HasValidLockedFeatureData");

	Params::CoreLockedFeatureButtonWidget_HasValidLockedFeatureData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.HideLoadoutTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                UnhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::HideLoadoutTooltip(class UCoreButtonWidget* UnhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "HideLoadoutTooltip");

	Params::CoreTallyPlayerStatusWidget_HideLoadoutTooltip Parms{};

	Parms.UnhoveredSlotWidget = UnhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnPlayerStatusClicked
// (Final, Native, Private, BlueprintCallable)

void UCoreTallyPlayerStatusWidget::OnPlayerStatusClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnPlayerStatusClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnPlayerStatusHovered
// (Final, Native, Private, BlueprintCallable)

void UCoreTallyPlayerStatusWidget::OnPlayerStatusHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnPlayerStatusHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnPlayerStatusUnhovered
// (Final, Native, Private, BlueprintCallable)

void UCoreTallyPlayerStatusWidget::OnPlayerStatusUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnPlayerStatusUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnReportButtonClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::OnReportButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnReportButtonClicked");

	Params::CoreTallyPlayerStatusWidget_OnReportButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetAsReported
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReported                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetAsReported(const bool IsReported)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetAsReported");

	Params::CoreTallyPlayerStatusWidget_SetAsReported Parms{};

	Parms.IsReported = IsReported;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTallyPlayerStatusViewData       ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGameType                               GameType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsUsingCharacterClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetData(const struct FTallyPlayerStatusViewData& ViewData, EGameType GameType, bool IsUsingCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetData");

	Params::CoreTallyPlayerStatusWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.GameType = GameType;
	Parms.IsUsingCharacterClass = IsUsingCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetKillerLoadoutBlocked
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBlocked                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetKillerLoadoutBlocked(const bool IsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetKillerLoadoutBlocked");

	Params::CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked Parms{};

	Parms.IsBlocked = IsBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetPlayerCardAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsAnimationPlaying                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetPlayerCardAnimation(const bool Param_IsAnimationPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetPlayerCardAnimation");

	Params::CoreTallyPlayerStatusWidget_SetPlayerCardAnimation Parms{};

	Parms.Param_IsAnimationPlaying = Param_IsAnimationPlaying;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetPlayerCardAnimationMode
// (Final, Native, Public)
// Parameters:
// EPlayerCardAnimationMode                PlayerCardAnimationMode                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetPlayerCardAnimationMode(const EPlayerCardAnimationMode PlayerCardAnimationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetPlayerCardAnimationMode");

	Params::CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode Parms{};

	Parms.PlayerCardAnimationMode = PlayerCardAnimationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetReportButtonOpacity
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Opacity                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetReportButtonOpacity(const float Opacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetReportButtonOpacity");

	Params::CoreTallyPlayerStatusWidget_SetReportButtonOpacity Parms{};

	Parms.Opacity = Opacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.ShowLoadoutTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                HoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::ShowLoadoutTooltip(class UCoreButtonWidget* HoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "ShowLoadoutTooltip");

	Params::CoreTallyPlayerStatusWidget_ShowLoadoutTooltip Parms{};

	Parms.HoveredSlotWidget = HoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLockedOverlayWidget.SetIsLocked
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLockedOverlayWidget::SetIsLocked(bool IsLocked, bool UseAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLockedOverlayWidget", "SetIsLocked");

	Params::CoreLockedOverlayWidget_SetIsLocked Parms{};

	Parms.IsLocked = IsLocked;
	Parms.UseAnimation = UseAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.AddTimerFlag
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimerFlagViewData               TimerFlagViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::AddTimerFlag(const struct FTimerFlagViewData& TimerFlagViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "AddTimerFlag");

	Params::CoreMainMenuButtonWidget_AddTimerFlag Parms{};

	Parms.TimerFlagViewData = std::move(TimerFlagViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.ClearAllTimerFlags
// (Final, Native, Public, BlueprintCallable)

void UCoreMainMenuButtonWidget::ClearAllTimerFlags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "ClearAllTimerFlags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.CreateTimerFlag
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreTimerFlagWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTimerFlagWidget* UCoreMainMenuButtonWidget::CreateTimerFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "CreateTimerFlag");

	Params::CoreMainMenuButtonWidget_CreateTimerFlag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.PlaySubMenuAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFadingOut                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::PlaySubMenuAnimation(bool IsFadingOut, float AnimDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "PlaySubMenuAnimation");

	Params::CoreMainMenuButtonWidget_PlaySubMenuAnimation Parms{};

	Parms.IsFadingOut = IsFadingOut;
	Parms.AnimDuration = AnimDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonusText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetBonusText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetBonusText");

	Params::CoreMainMenuButtonWidget_SetBonusText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonusVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetBonusVisibility(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetBonusVisibility");

	Params::CoreMainMenuButtonWidget_SetBonusVisibility Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetDecoration
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           DecorationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetDecoration(const class FString& DecorationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetDecoration");

	Params::CoreMainMenuButtonWidget_SetDecoration Parms{};

	Parms.DecorationId = std::move(DecorationId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetDecorationVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetDecorationVisible(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetDecorationVisible");

	Params::CoreMainMenuButtonWidget_SetDecorationVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetIcon
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetIcon(const class FString& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetIcon");

	Params::CoreMainMenuButtonWidget_SetIcon Parms{};

	Parms.EventID = std::move(EventID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetSubtitle(const class FText& Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetSubtitle");

	Params::CoreMainMenuButtonWidget_SetSubtitle Parms{};

	Parms.Subtitle = std::move(Subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitleVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetSubtitleVisible(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetSubtitleVisible");

	Params::CoreMainMenuButtonWidget_SetSubtitleVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.UpdateNotificationVisibility
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreMainMenuButtonWidget::UpdateNotificationVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "UpdateNotificationVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.UpdateSubMenuVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGoingInSubMenu                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsPreTransitionCall                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::UpdateSubMenuVisuals(bool IsGoingInSubMenu, bool IsPreTransitionCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "UpdateSubMenuVisuals");

	Params::CoreMainMenuButtonWidget_UpdateSubMenuVisuals Parms{};

	Parms.IsGoingInSubMenu = IsGoingInSubMenu;
	Parms.IsPreTransitionCall = IsPreTransitionCall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.UpdateTimerFlagsVisibility
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreMainMenuButtonWidget::UpdateTimerFlagsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "UpdateTimerFlagsVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.ObjectiveTrackerTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FEventObjectiveTrackerViewData   ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UObjectiveTrackerTooltipWidget::SetTooltipData(const struct FEventObjectiveTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectiveTrackerTooltipWidget", "SetTooltipData");

	Params::ObjectiveTrackerTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.GetButton
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EMainMenuButtonType                     Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreBaseUserWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreBaseUserWidget* UCoreMainMenuWidget::GetButton(EMainMenuButtonType Button, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "GetButton");

	Params::CoreMainMenuWidget_GetButton Parms{};

	Parms.Button = Button;
	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnArchivesButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnArchivesButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnArchivesButtonClicked");

	Params::CoreMainMenuWidget_OnArchivesButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnChallengesButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnChallengesButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnChallengesButtonClicked");

	Params::CoreMainMenuWidget_OnChallengesButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnCreditsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnCreditsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnCreditsButtonClicked");

	Params::CoreMainMenuWidget_OnCreditsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnDailyRitualsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnDailyRitualsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnDailyRitualsButtonClicked");

	Params::CoreMainMenuWidget_OnDailyRitualsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnEventButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnEventButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnEventButtonClicked");

	Params::CoreMainMenuWidget_OnEventButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnExitButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnExitButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnExitButtonClicked");

	Params::CoreMainMenuWidget_OnExitButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnExitButtonTriggered
// (Final, Native, Private)

void UCoreMainMenuWidget::OnExitButtonTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnExitButtonTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnFriendsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnFriendsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnFriendsButtonClicked");

	Params::CoreMainMenuWidget_OnFriendsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnMarketingInvitationButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnMarketingInvitationButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnMarketingInvitationButtonClicked");

	Params::CoreMainMenuWidget_OnMarketingInvitationButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnNewsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnNewsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnNewsButtonClicked");

	Params::CoreMainMenuWidget_OnNewsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayButtonClicked");

	Params::CoreMainMenuWidget_OnPlayButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayCustomButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayCustomButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayCustomButtonClicked");

	Params::CoreMainMenuWidget_OnPlayCustomButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayKillerButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayKillerButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayKillerButtonClicked");

	Params::CoreMainMenuWidget_OnPlayKillerButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayLimitedTimeEventButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayLimitedTimeEventButtonClicked");

	Params::CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventKillerButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayLimitedTimeEventKillerButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayLimitedTimeEventKillerButtonClicked");

	Params::CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventSurvivorButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayLimitedTimeEventSurvivorButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayLimitedTimeEventSurvivorButtonClicked");

	Params::CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlaySurvivorButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlaySurvivorButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlaySurvivorButtonClicked");

	Params::CoreMainMenuWidget_OnPlaySurvivorButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnSettingsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnSettingsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnSettingsButtonClicked");

	Params::CoreMainMenuWidget_OnSettingsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnStoreButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnStoreButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnStoreButtonClicked");

	Params::CoreMainMenuWidget_OnStoreButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnTutorialButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnTutorialButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnTutorialButtonClicked");

	Params::CoreMainMenuWidget_OnTutorialButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.ShowLimitedTimeEventSubMenu
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::ShowLimitedTimeEventSubMenu(bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "ShowLimitedTimeEventSubMenu");

	Params::CoreMainMenuWidget_ShowLimitedTimeEventSubMenu Parms{};

	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuWidget.ShowPlaySubMenu
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::ShowPlaySubMenu(bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "ShowPlaySubMenu");

	Params::CoreMainMenuWidget_ShowPlaySubMenu Parms{};

	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuWidget.ShowUiTakeover
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::ShowUiTakeover(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "ShowUiTakeover");

	Params::CoreMainMenuWidget_ShowUiTakeover Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuWidget.HasActiveLTE
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMainMenuWidget::HasActiveLTE() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "HasActiveLTE");

	Params::CoreMainMenuWidget_HasActiveLTE Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.OnWatchVideoClicked
// (Final, Native, Public)

void UCoreMarketingInvitationPopupWidget::OnWatchVideoClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "OnWatchVideoClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.SetOptOutToggleValue
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOptOutToggleActive                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::SetOptOutToggleValue(const bool IsOptOutToggleActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "SetOptOutToggleValue");

	Params::CoreMarketingInvitationPopupWidget_SetOptOutToggleValue Parms{};

	Parms.IsOptOutToggleActive = IsOptOutToggleActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.SetQRCodeImage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        QrCodeImage                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::SetQRCodeImage(const TSoftObjectPtr<class UTexture2D>& QrCodeImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "SetQRCodeImage");

	Params::CoreMarketingInvitationPopupWidget_SetQRCodeImage Parms{};

	Parms.QrCodeImage = QrCodeImage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.ShowOptOutToggle
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldShowToggle                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::ShowOptOutToggle(const bool ShouldShowToggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "ShowOptOutToggle");

	Params::CoreMarketingInvitationPopupWidget_ShowOptOutToggle Parms{};

	Parms.ShouldShowToggle = ShouldShowToggle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.ShowRewards
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_ShowRewards                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::ShowRewards(const bool Param_ShowRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "ShowRewards");

	Params::CoreMarketingInvitationPopupWidget_ShowRewards Parms{};

	Parms.Param_ShowRewards = Param_ShowRewards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.OnInstructionButtonClicked
// (Final, Native, Public, BlueprintCallable, Const)

void UCoreMarketingInvitationPopupWidget::OnInstructionButtonClicked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "OnInstructionButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.OnOptOutToggleButtonClicked
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    IsOptOutToggleActive                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::OnOptOutToggleButtonClicked(bool IsOptOutToggleActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "OnOptOutToggleButtonClicked");

	Params::CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked Parms{};

	Parms.IsOptOutToggleActive = IsOptOutToggleActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualClaimButtonClicked
// (Final, Native, Protected)
// Parameters:
// class FString                           DailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDailyRitualClaimButtonClicked(const class FString& DailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDailyRitualClaimButtonClicked");

	Params::DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked Parms{};

	Parms.DailyRitualKey = std::move(DailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualRemoveButtonClicked
// (Final, Native, Protected)
// Parameters:
// class FString                           DailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDailyRitualRemoveButtonClicked(const class FString& DailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDailyRitualRemoveButtonClicked");

	Params::DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked Parms{};

	Parms.DailyRitualKey = std::move(DailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualTileFadeOutComplete
// (Final, Native, Private)
// Parameters:
// class UDailyRitualTileWidget*           DailyRitualTile                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDailyRitualTileFadeOutComplete(class UDailyRitualTileWidget* DailyRitualTile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDailyRitualTileFadeOutComplete");

	Params::DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete Parms{};

	Parms.DailyRitualTile = DailyRitualTile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDelayUntilFadeInSequenceComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 DelayUntilFadeInSequenceTween                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDelayUntilFadeInSequenceComplete(class UUITweenInstance* DelayUntilFadeInSequenceTween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDelayUntilFadeInSequenceComplete");

	Params::DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete Parms{};

	Parms.DelayUntilFadeInSequenceTween = DelayUntilFadeInSequenceTween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnRecentlyAssignedDailyRitualFadeInComplete
// (Final, Native, Private)
// Parameters:
// class UDailyRitualTileWidget*           DailyRitualTile                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnRecentlyAssignedDailyRitualFadeInComplete(class UDailyRitualTileWidget* DailyRitualTile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnRecentlyAssignedDailyRitualFadeInComplete");

	Params::DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete Parms{};

	Parms.DailyRitualTile = DailyRitualTile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDailyRitualViewData>     DailyRitualsData                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    IsAfterTrial                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::SetData(const TArray<struct FDailyRitualViewData>& DailyRitualsData, const bool IsAfterTrial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "SetData");

	Params::DailyRitualsContainerWidget_SetData Parms{};

	Parms.DailyRitualsData = std::move(DailyRitualsData);
	Parms.IsAfterTrial = IsAfterTrial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.StartAnim
// (Final, Native, Public, BlueprintCallable)

void UDailyRitualsContainerWidget::StartAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "StartAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ProfileMenuPlayerRankWrapper.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRankViewData                    Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UProfileMenuPlayerRankWrapper::SetData(const struct FRankViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuPlayerRankWrapper", "SetData");

	Params::ProfileMenuPlayerRankWrapper_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetAvailabilityVisuals
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAvailable                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetAvailabilityVisuals(const bool IsAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetAvailabilityVisuals");

	Params::CoreMenuLoadoutPartWidget_SetAvailabilityVisuals Parms{};

	Parms.IsAvailable = IsAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetBackgroundShadowLayers
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuLoadoutPartWidget::SetBackgroundShadowLayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetBackgroundShadowLayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetEmptyWidget
// (Native, Public)

void UCoreMenuLoadoutPartWidget::SetEmptyWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetEmptyWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetIsPerkSurfacingExperimentActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsPerkSurfacingExperimentActive                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetIsPerkSurfacingExperimentActive(bool IsPerkSurfacingExperimentActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetIsPerkSurfacingExperimentActive");

	Params::CoreMenuLoadoutPartWidget_SetIsPerkSurfacingExperimentActive Parms{};

	Parms.IsPerkSurfacingExperimentActive = IsPerkSurfacingExperimentActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMenuLoadoutPartViewData*         Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetLoadoutPartData(const class UMenuLoadoutPartViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetLoadoutPartData");

	Params::CoreMenuLoadoutPartWidget_SetLoadoutPartData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetSelectedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    SelectedState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetSelectedState(bool SelectedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetSelectedState");

	Params::CoreMenuLoadoutPartWidget_SetSelectedState Parms{};

	Parms.SelectedState = SelectedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.UpdateBackgroundImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuLoadoutPartWidget::UpdateBackgroundImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "UpdateBackgroundImage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetLoadoutPartData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UMenuLoadoutPartViewData*   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UMenuLoadoutPartViewData* UCoreMenuLoadoutPartWidget::GetLoadoutPartData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetLoadoutPartData");

	Params::CoreMenuLoadoutPartWidget_GetLoadoutPartData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetTooltipData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLoadoutTooltipData              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLoadoutTooltipData UCoreMenuLoadoutPartWidget::GetTooltipData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetTooltipData");

	Params::CoreMenuLoadoutPartWidget_GetTooltipData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetItemId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UCoreMenuLoadoutPartWidget::GetWidgetItemId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetWidgetItemId");

	Params::CoreMenuLoadoutPartWidget_GetWidgetItemId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetLockedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMenuLoadoutPartWidget::GetWidgetLockedState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetWidgetLockedState");

	Params::CoreMenuLoadoutPartWidget_GetWidgetLockedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.GetAddonInventoryScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreMenuAddonWidget::GetAddonInventoryScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "GetAddonInventoryScale");

	Params::CoreMenuAddonWidget_GetAddonInventoryScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.GetWidgetParentDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreMenuAddonWidget::GetWidgetParentDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "GetWidgetParentDisplayName");

	Params::CoreMenuAddonWidget_GetWidgetParentDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.SetAddonDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsParentAvailable                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuAddonWidget::SetAddonDisabled(bool IsParentAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "SetAddonDisabled");

	Params::CoreMenuAddonWidget_SetAddonDisabled Parms{};

	Parms.IsParentAvailable = IsParentAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.SetWhitePlusIconVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuAddonWidget::SetWhitePlusIconVisibility(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "SetWhitePlusIconVisibility");

	Params::CoreMenuAddonWidget_SetWhitePlusIconVisibility Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ModalWidget.FinishCloseAnimation
// (Final, Native, Protected, BlueprintCallable)

void UModalWidget::FinishCloseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "FinishCloseAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.FinishOpenAnimation
// (Final, Native, Protected, BlueprintCallable)

void UModalWidget::FinishOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "FinishOpenAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnHoveredInternal
// (Final, Native, Protected)

void UModalWidget::OnHoveredInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnHoveredInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnKeyDownAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKeyEvent                        Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnKeyDownAnywhere(const struct FKeyEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnKeyDownAnywhere");

	Params::ModalWidget_OnKeyDownAnywhere Parms{};

	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnKeyUpAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKeyEvent                        Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnKeyUpAnywhere(const struct FKeyEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnKeyUpAnywhere");

	Params::ModalWidget_OnKeyUpAnywhere Parms{};

	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnMouseDownAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnMouseDownAnywhere(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnMouseDownAnywhere");

	Params::ModalWidget_OnMouseDownAnywhere Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnMouseUpAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnMouseUpAnywhere(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnMouseUpAnywhere");

	Params::ModalWidget_OnMouseUpAnywhere Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnUnhoveredInternal
// (Final, Native, Protected)

void UModalWidget::OnUnhoveredInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnUnhoveredInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.StartCloseAnimation
// (Native, Event, Protected, BlueprintEvent)

void UModalWidget::StartCloseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StartCloseAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.StartOpenAnimation
// (Native, Event, Protected, BlueprintEvent)

void UModalWidget::StartOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StartOpenAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.StopCloseAnimation
// (Event, Protected, BlueprintEvent)

void UModalWidget::StopCloseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StopCloseAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.ModalWidget.StopOpenAnimation
// (Event, Protected, BlueprintEvent)

void UModalWidget::StopOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StopOpenAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                ClickedButton                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::OnButtonClicked(class UCoreButtonWidget* ClickedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "OnButtonClicked");

	Params::NotEnoughCurrencyModalWidget_OnButtonClicked Parms{};

	Parms.ClickedButton = ClickedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                HoveredButton                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::OnHovered(class UCoreButtonWidget* HoveredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "OnHovered");

	Params::NotEnoughCurrencyModalWidget_OnHovered Parms{};

	Parms.HoveredButton = HoveredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                UnhoveredButton                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::OnUnhovered(class UCoreButtonWidget* UnhoveredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "OnUnhovered");

	Params::NotEnoughCurrencyModalWidget_OnUnhovered Parms{};

	Parms.UnhoveredButton = UnhoveredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNotEnoughCurrencyModalViewData  Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::SetTooltipData(const struct FNotEnoughCurrencyModalViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "SetTooltipData");

	Params::NotEnoughCurrencyModalWidget_SetTooltipData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableArchivesButton
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableArchivesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableArchivesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableCurrencyButton
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableCurrencyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableCurrencyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableInputs
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableStoreButton
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableStoreButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableStoreButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.OnButtonClick
// (Final, Native, Protected)

void UCustomizationItemOriginWidget::OnButtonClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "OnButtonClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetArchivesState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetArchivesState(const TArray<class FText>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetArchivesState");

	Params::CustomizationItemOriginWidget_SetArchivesState Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetCurrencyPurchaseState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPriceTagViewData                CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetCurrencyPurchaseState(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetCurrencyPurchaseState");

	Params::CustomizationItemOriginWidget_SetCurrencyPurchaseState Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationItemOriginViewData ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetData(const struct FCustomizationItemOriginViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetData");

	Params::CustomizationItemOriginWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetDefaultState
// (Native, Event, Protected, BlueprintEvent)

void UCustomizationItemOriginWidget::SetDefaultState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetDefaultState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetGameplayState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetGameplayState(const TArray<class FText>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetGameplayState");

	Params::CustomizationItemOriginWidget_SetGameplayState Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetInputSwitcherEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreInputSwitcherWidget*         InputSwitcher                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetInputSwitcherEnabled(class UCoreInputSwitcherWidget* InputSwitcher, const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetInputSwitcherEnabled");

	Params::CustomizationItemOriginWidget_SetInputSwitcherEnabled Parms{};

	Parms.InputSwitcher = InputSwitcher;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetMilestonePointsState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetMilestonePointsState(const TArray<class FText>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetMilestonePointsState");

	Params::CustomizationItemOriginWidget_SetMilestonePointsState Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetState
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationItemOriginViewData ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetState(const struct FCustomizationItemOriginViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetState");

	Params::CustomizationItemOriginWidget_SetState Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetStoreState
// (Native, Event, Protected, BlueprintEvent)

void UCustomizationItemOriginWidget::SetStoreState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetStoreState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuOfferingWidget.SetHiddenOffering
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsHidden                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuOfferingWidget::SetHiddenOffering(bool IsHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuOfferingWidget", "SetHiddenOffering");

	Params::CoreMenuOfferingWidget_SetHiddenOffering Parms{};

	Parms.IsHidden = IsHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkLevel
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuPerkWidget::SetMenuPerkLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetMenuPerkLevel");

	Params::CoreMenuPerkWidget_SetMenuPerkLevel Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDDropDownListWidget.BindToTrigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                TriggerButton                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::BindToTrigger(class UCoreButtonWidget* TriggerButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "BindToTrigger");

	Params::DBDDropDownListWidget_BindToTrigger Parms{};

	Parms.TriggerButton = TriggerButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.HideDropDownList
// (Final, Native, Private, BlueprintCallable)

void UDBDDropDownListWidget::HideDropDownList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "HideDropDownList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnOptionSelected
// (Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnOptionSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnOptionSelected");

	Params::DBDDropDownListWidget_OnOptionSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction DBDUIViewsCore.DBDDropDownListWidget.OnSelectedOptionDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FTabWidgetData                   buttonData                                             (Parm, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnSelectedOptionDelegate__DelegateSignature(const struct FTabWidgetData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnSelectedOptionDelegate__DelegateSignature");

	Params::DBDDropDownListWidget_OnSelectedOptionDelegate__DelegateSignature Parms{};

	Parms.buttonData = std::move(buttonData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnTriggerClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnTriggerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnTriggerClicked");

	Params::DBDDropDownListWidget_OnTriggerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnUserClicked
// (Native, Protected, HasOutParams)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnUserClicked(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnUserClicked");

	Params::DBDDropDownListWidget_OnUserClicked Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.UnbindFromTrigger
// (Final, Native, Public, BlueprintCallable)

void UDBDDropDownListWidget::UnbindFromTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "UnbindFromTrigger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.UpdateDropDown
// (Native, Public)

void UDBDDropDownListWidget::UpdateDropDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "UpdateDropDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuSkillWidget.SetMenuSkillLocked
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreMenuSkillWidget::SetMenuSkillLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuSkillWidget", "SetMenuSkillLocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.DailyRitualTileWidget.OnClaimButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualTileWidget::OnClaimButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "OnClaimButtonClicked");

	Params::DailyRitualTileWidget_OnClaimButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualTileWidget.OnRemoveButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualTileWidget::OnRemoveButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "OnRemoveButtonClicked");

	Params::DailyRitualTileWidget_OnRemoveButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualTileWidget.PlayFadeInAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UDailyRitualTileWidget::PlayFadeInAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "PlayFadeInAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.DailyRitualTileWidget.PlayFadeOutAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UDailyRitualTileWidget::PlayFadeOutAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "PlayFadeOutAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreNewsWidget.OnBackButtonClicked
// (Final, Native, Private)

void UCoreNewsWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreNewsWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CurrencyProgressionTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCurrencyProgressionTooltipViewDataCurrencyViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCurrencyProgressionTooltipWidget::SetTooltipData(const struct FCurrencyProgressionTooltipViewData& CurrencyViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrencyProgressionTooltipWidget", "SetTooltipData");

	Params::CurrencyProgressionTooltipWidget_SetTooltipData Parms{};

	Parms.CurrencyViewData = std::move(CurrencyViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.GetStepId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreOnboardingButtonHolderWidget::GetStepId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "GetStepId");

	Params::CoreOnboardingButtonHolderWidget_GetStepId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnButtonSetDataAnimationCompleteDelegate
// (Final, Native, Protected)

void UCoreOnboardingButtonHolderWidget::OnButtonSetDataAnimationCompleteDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "OnButtonSetDataAnimationCompleteDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnClickedTutorialButton
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                ClickedTutorialButton                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingButtonHolderWidget::OnClickedTutorialButton(class UCoreButtonWidget* ClickedTutorialButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "OnClickedTutorialButton");

	Params::CoreOnboardingButtonHolderWidget_OnClickedTutorialButton Parms{};

	Parms.ClickedTutorialButton = ClickedTutorialButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDComboBoxString.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   OptionsList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           DefaultOption                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDComboBoxString::SetData(const TArray<class FString>& OptionsList, const class FString& DefaultOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDComboBoxString", "SetData");

	Params::DBDComboBoxString_SetData Parms{};

	Parms.OptionsList = std::move(OptionsList);
	Parms.DefaultOption = std::move(DefaultOption);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.ResetOnboardingMenuSubtitle
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreOnboardingMenuTitleWidget::ResetOnboardingMenuSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "ResetOnboardingMenuSubtitle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuDoubleTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MenuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             MenuSubTitle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuDoubleTitle(const class FText& MenuTitle, const class FText& MenuSubTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuDoubleTitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle Parms{};

	Parms.MenuTitle = std::move(MenuTitle);
	Parms.MenuSubTitle = std::move(MenuSubTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuSubtitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MenuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuSubtitle(const class FText& MenuTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuSubtitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle Parms{};

	Parms.MenuTitle = std::move(MenuTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MenuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuTitle(const class FText& MenuTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuTitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle Parms{};

	Parms.MenuTitle = std::move(MenuTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "OnMenuTabSelected");

	Params::CoreOnboardingMenuWidget_OnMenuTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelectedAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "OnMenuTabSelectedAgain");

	Params::CoreOnboardingMenuWidget_OnMenuTabSelectedAgain Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetBackButton
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    IsFTUE                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::SetBackButton(const bool IsFTUE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "SetBackButton");

	Params::CoreOnboardingMenuWidget_SetBackButton Parms{};

	Parms.IsFTUE = IsFTUE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetTitleText
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    IsInTutorial                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::SetTitleText(const bool IsInTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "SetTitleText");

	Params::CoreOnboardingMenuWidget_SetTitleText Parms{};

	Parms.IsInTutorial = IsInTutorial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.OnLargeTextSettingsChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsLargeText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::OnLargeTextSettingsChanged(bool IsLargeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "OnLargeTextSettingsChanged");

	Params::DBDRichTextBlock_OnLargeTextSettingsChanged Parms{};

	Parms.IsLargeText = IsLargeText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.OnSwitchDockStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsDocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::OnSwitchDockStateChanged(bool IsDocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "OnSwitchDockStateChanged");

	Params::DBDRichTextBlock_OnSwitchDockStateChanged Parms{};

	Parms.IsDocked = IsDocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewHTMLText
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewHTMLText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewHTMLText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewLargeText
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewLargeText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewLargeText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewUndocked
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewUndocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewUndocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.SetHTMLText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::SetHTMLText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "SetHTMLText");

	Params::DBDRichTextBlock_SetHTMLText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.SetIsUpperCase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsUpperCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::SetIsUpperCase(bool IsUpperCase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "SetIsUpperCase");

	Params::DBDRichTextBlock_SetIsUpperCase Parms{};

	Parms.IsUpperCase = IsUpperCase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.GetIsUpperCase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDRichTextBlock::GetIsUpperCase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "GetIsUpperCase");

	Params::DBDRichTextBlock_GetIsUpperCase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardClicked");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardPressed
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardPressed(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardPressed");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardPressed Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardReleased
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardReleased(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardReleased");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardReleased Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FOnboardingTutorialButtonViewDataParam_ViewData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsRefreshingWithAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetData(const struct FOnboardingTutorialButtonViewData& Param_ViewData, bool IsRefreshingWithAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetData");

	Params::CoreOnboardingTutorialButtonWidget_SetData Parms{};

	Parms.Param_ViewData = std::move(Param_ViewData);
	Parms.IsRefreshingWithAnimation = IsRefreshingWithAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetIsKillSwitch
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsKillSwitch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetIsKillSwitch(bool IsKillSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetIsKillSwitch");

	Params::CoreOnboardingTutorialButtonWidget_SetIsKillSwitch Parms{};

	Parms.IsKillSwitch = IsKillSwitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetUIEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetUIEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetUIEnabled");

	Params::CoreOnboardingTutorialButtonWidget_SetUIEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetVisual
// (Final, Native, Protected, BlueprintCallable)

void UCoreOnboardingTutorialButtonWidget::SetVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetVisual");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.IsInUnavailableStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreOnboardingTutorialButtonWidget::IsInUnavailableStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "IsInUnavailableStep");

	Params::CoreOnboardingTutorialButtonWidget_IsInUnavailableStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.CheckNextPendingButtonUpdate
// (Final, Native, Private)

void UCoreOnboardingTutorialPanelWidget::CheckNextPendingButtonUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "CheckNextPendingButtonUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.NextPendingButtonUpdated
// (Final, Native, Private)

void UCoreOnboardingTutorialPanelWidget::NextPendingButtonUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "NextPendingButtonUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialDescription
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsWarning                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::SetTutorialDescription(const class FText& Description, bool IsWarning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "SetTutorialDescription");

	Params::CoreOnboardingTutorialPanelWidget_SetTutorialDescription Parms{};

	Parms.Description = std::move(Description);
	Parms.IsWarning = IsWarning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialSeparators
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           CompletedStepId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::SetTutorialSeparators(const class FString& CompletedStepId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "SetTutorialSeparators");

	Params::CoreOnboardingTutorialPanelWidget_SetTutorialSeparators Parms{};

	Parms.CompletedStepId = std::move(CompletedStepId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.TryBroadcastSelectedTutorial
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::TryBroadcastSelectedTutorial(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "TryBroadcastSelectedTutorial");

	Params::CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDEditableTextBox.SetCharacterLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterLimit                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDEditableTextBox::SetCharacterLimit(int32 CharacterLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDEditableTextBox", "SetCharacterLimit");

	Params::DBDEditableTextBox_SetCharacterLimit Parms{};

	Parms.CharacterLimit = CharacterLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDEditableTextBox.GetCharacterLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDBDEditableTextBox::GetCharacterLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDEditableTextBox", "GetCharacterLimit");

	Params::DBDEditableTextBox_GetCharacterLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.BindToButton
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonToBindOn                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::BindToButton(class UCoreButtonWidget* buttonToBindOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "BindToButton");

	Params::CoreOnHoverBorderWidget_BindToButton Parms{};

	Parms.buttonToBindOn = buttonToBindOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayHoveredAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayForward                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::PlayHoveredAnimation(bool PlayForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "PlayHoveredAnimation");

	Params::CoreOnHoverBorderWidget_PlayHoveredAnimation Parms{};

	Parms.PlayForward = PlayForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayPressedAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayForward                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::PlayPressedAnimation(bool PlayForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "PlayPressedAnimation");

	Params::CoreOnHoverBorderWidget_PlayPressedAnimation Parms{};

	Parms.PlayForward = PlayForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UnbindFromButton
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreOnHoverBorderWidget::UnbindFromButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UnbindFromButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateBorderSize
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        DesiredSize                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::UpdateBorderSize(int32 Thickness, const struct FVector2D& DesiredSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UpdateBorderSize");

	Params::CoreOnHoverBorderWidget_UpdateBorderSize Parms{};

	Parms.Thickness = Thickness;
	Parms.DesiredSize = std::move(DesiredSize);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateColors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     ProgressBarColor                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     BackgroundColor                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::UpdateColors(const struct FLinearColor& ProgressBarColor, const struct FLinearColor& BackgroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UpdateColors");

	Params::CoreOnHoverBorderWidget_UpdateColors Parms{};

	Parms.ProgressBarColor = std::move(ProgressBarColor);
	Parms.BackgroundColor = std::move(BackgroundColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.GetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCorePaginationContainerWidget::GetCurrentPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "GetCurrentPage");

	Params::CorePaginationContainerWidget_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.OnPaginationSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePaginationContainerWidget::OnPaginationSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "OnPaginationSelected");

	Params::CorePaginationContainerWidget_OnPaginationSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction DBDUIViewsCore.CorePaginationContainerWidget.OnSelectedPageDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   SelectedPage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsUpdate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePaginationContainerWidget::OnSelectedPageDelegate__DelegateSignature(int32 SelectedPage, bool IsUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "OnSelectedPageDelegate__DelegateSignature");

	Params::CorePaginationContainerWidget_OnSelectedPageDelegate__DelegateSignature Parms{};

	Parms.SelectedPage = SelectedPage;
	Parms.IsUpdate = IsUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.UpdateSelectedWidget
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CurrentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfPages                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePaginationContainerWidget::UpdateSelectedWidget(int32 CurrentIndex, int32 NumberOfPages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "UpdateSelectedWidget");

	Params::CorePaginationContainerWidget_UpdateSelectedWidget Parms{};

	Parms.CurrentIndex = CurrentIndex;
	Parms.NumberOfPages = NumberOfPages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillEmptySpace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InbFillEmptySpace                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetFillEmptySpace(bool InbFillEmptySpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetFillEmptySpace");

	Params::DBDWrapBoxSlot_SetFillEmptySpace Parms{};

	Parms.InbFillEmptySpace = InbFillEmptySpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillSpanWhenLessThan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFillSpanWhenLessThan                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetFillSpanWhenLessThan(float InFillSpanWhenLessThan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetFillSpanWhenLessThan");

	Params::DBDWrapBoxSlot_SetFillSpanWhenLessThan Parms{};

	Parms.InFillSpanWhenLessThan = InFillSpanWhenLessThan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetHorizontalAlignment");

	Params::DBDWrapBoxSlot_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetPadding");

	Params::DBDWrapBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetVerticalAlignment");

	Params::DBDWrapBoxSlot_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.Add
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   bonusXp                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::Add(const int32 bonusXp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "Add");

	Params::CorePlayerExpGaugeWidget_Add Parms{};

	Parms.bonusXp = bonusXp;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction DBDUIViewsCore.CorePlayerExpGaugeWidget.OnPlayerExpUpdateCompleted__DelegateSignature
// (Public, Delegate)

void UCorePlayerExpGaugeWidget::OnPlayerExpUpdateCompleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "OnPlayerExpUpdateCompleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.OnUpdateComplete
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::OnUpdateComplete(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "OnUpdateComplete");

	Params::CorePlayerExpGaugeWidget_OnUpdateComplete Parms{};

	Parms.Tween = Tween;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.OnUpdateProgress
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::OnUpdateProgress(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "OnUpdateProgress");

	Params::CorePlayerExpGaugeWidget_OnUpdateProgress Parms{};

	Parms.Tween = Tween;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.SetViewData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerLevelViewData             PlayerViewData                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::SetViewData(const struct FPlayerLevelViewData& PlayerViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "SetViewData");

	Params::CorePlayerExpGaugeWidget_SetViewData Parms{};

	Parms.PlayerViewData = std::move(PlayerViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDScrollBox.HandleControllerInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   AnalogValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::HandleControllerInput(float AnalogValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "HandleControllerInput");

	Params::DBDScrollBox_HandleControllerInput Parms{};

	Parms.AnalogValue = AnalogValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.HideDisplayPrompt
// (Final, Native, Public, BlueprintCallable)

void UDBDScrollBox::HideDisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "HideDisplayPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.IsMouseOver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDScrollBox::IsMouseOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "IsMouseOver");

	Params::DBDScrollBox_IsMouseOver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDScrollBox.OnControlModeChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EControlMode                            ControlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::OnControlModeChanged(EControlMode ControlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "OnControlModeChanged");

	Params::DBDScrollBox_OnControlModeChanged Parms{};

	Parms.ControlMode = ControlMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.SetDisplayPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "SetDisplayPrompt");

	Params::DBDScrollBox_SetDisplayPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.UpdateDisplayPrompt
// (Final, Native, Public, BlueprintCallable)

void UDBDScrollBox::UpdateDisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "UpdateDisplayPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.UpdateSmoothMask
// (Final, Native, Private)
// Parameters:
// float                                   CurrentOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::UpdateSmoothMask(float CurrentOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "UpdateSmoothMask");

	Params::DBDScrollBox_UpdateSmoothMask Parms{};

	Parms.CurrentOffset = CurrentOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.IsScrollable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDScrollBox::IsScrollable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "IsScrollable");

	Params::DBDScrollBox_IsScrollable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerLevelTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FCorePlayerLevelTooltipViewData  ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePlayerLevelTooltipWidget::SetTooltipData(const struct FCorePlayerLevelTooltipViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerLevelTooltipWidget", "SetTooltipData");

	Params::CorePlayerLevelTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerLevelWidget.AnimateLevelUp
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerLevelWidget::AnimateLevelUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerLevelWidget", "AnimateLevelUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CorePlayerLevelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerLevelViewData             ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePlayerLevelWidget::SetData(const struct FPlayerLevelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerLevelWidget", "SetData");

	Params::CorePlayerLevelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDImage.SetBrushFromSoftTextureWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        SoftTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    MatchSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetBrushFromSoftTextureWithDefault(TSoftObjectPtr<class UTexture2D> SoftTexture, bool MatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetBrushFromSoftTextureWithDefault");

	Params::DBDImage_SetBrushFromSoftTextureWithDefault Parms{};

	Parms.SoftTexture = SoftTexture;
	Parms.MatchSize = MatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDImage.SetBrushFromTextureWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    MatchSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetBrushFromTextureWithDefault(class UTexture2D* Texture, bool MatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetBrushFromTextureWithDefault");

	Params::DBDImage_SetBrushFromTextureWithDefault Parms{};

	Parms.Texture = Texture;
	Parms.MatchSize = MatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDImage.SetMaterialTextureFromSoftTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        SoftTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetMaterialTextureFromSoftTexture(TSoftObjectPtr<class UTexture2D> SoftTexture, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetMaterialTextureFromSoftTexture");

	Params::DBDImage_SetMaterialTextureFromSoftTexture Parms{};

	Parms.SoftTexture = SoftTexture;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerNameWidget.SetPlayerName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             PlayerName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerNameWidget::SetPlayerName(const class FText& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerNameWidget", "SetPlayerName");

	Params::CorePlayerNameWidget_SetPlayerName Parms{};

	Parms.PlayerName = std::move(PlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardBannerHovered
// (Final, Native, Private)

void UCorePlayerProfileWidget::OnPlayerCardBannerHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardBannerHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardBannerUnhovered
// (Final, Native, Private)

void UCorePlayerProfileWidget::OnPlayerCardBannerUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardBannerUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::OnPlayerCardButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardButtonHovered");

	Params::CorePlayerProfileWidget_OnPlayerCardButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::OnPlayerCardButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardButtonUnhovered");

	Params::CorePlayerProfileWidget_OnPlayerCardButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerProfileClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::OnPlayerProfileClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerProfileClicked");

	Params::CorePlayerProfileWidget_OnPlayerProfileClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.SetBadgeBannerData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerCardViewData              Badge                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPlayerCardViewData              Banner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ShowBanner                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::SetBadgeBannerData(const struct FPlayerCardViewData& Badge, const struct FPlayerCardViewData& Banner, const bool ShowBanner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "SetBadgeBannerData");

	Params::CorePlayerProfileWidget_SetBadgeBannerData Parms{};

	Parms.Badge = std::move(Badge);
	Parms.Banner = std::move(Banner);
	Parms.ShowBanner = ShowBanner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.SetPlayerCardAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsAnimationPlaying                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::SetPlayerCardAnimation(const bool Param_IsAnimationPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "SetPlayerCardAnimation");

	Params::CorePlayerProfileWidget_SetPlayerCardAnimation Parms{};

	Parms.Param_IsAnimationPlaying = Param_IsAnimationPlaying;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.GetStoreCollectionViewData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStoreCollectionViewData*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoreCollectionViewData* UCoreStoreCollectionsItemWidget::GetStoreCollectionViewData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsItemWidget", "GetStoreCollectionViewData");

	Params::CoreStoreCollectionsItemWidget_GetStoreCollectionViewData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStoreCollectionViewData*         CollectionViewData                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollectionItemScaleType                CollectionItemScale                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsItemWidget::SetData(class UStoreCollectionViewData* CollectionViewData, const ECollectionItemScaleType CollectionItemScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsItemWidget", "SetData");

	Params::CoreStoreCollectionsItemWidget_SetData Parms{};

	Parms.CollectionViewData = CollectionViewData;
	Parms.CollectionItemScale = CollectionItemScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.SetupVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCollectionViewData*         CollectionViewData                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollectionItemScaleType                CollectionItemScale                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsItemWidget::SetupVisuals(class UStoreCollectionViewData* CollectionViewData, const ECollectionItemScaleType CollectionItemScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsItemWidget", "SetupVisuals");

	Params::CoreStoreCollectionsItemWidget_SetupVisuals Parms{};

	Parms.CollectionViewData = CollectionViewData;
	Parms.CollectionItemScale = CollectionItemScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerRankWidget.AnimateRankUp
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerRankWidget::AnimateRankUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "AnimateRankUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CorePlayerRankWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRankViewData                    Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerRankWidget::SetData(const struct FRankViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "SetData");

	Params::CorePlayerRankWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerRankWidget.SetRankImageAndText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RankIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsKiller                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerRankWidget::SetRankImageAndText(const int32 RankIndex, const bool IsKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "SetRankImageAndText");

	Params::CorePlayerRankWidget_SetRankImageAndText Parms{};

	Parms.RankIndex = RankIndex;
	Parms.IsKiller = IsKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerRankWidget.GetConfiguration
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCoreRankWidgetConfiguration     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCoreRankWidgetConfiguration UCorePlayerRankWidget::GetConfiguration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "GetConfiguration");

	Params::CorePlayerRankWidget_GetConfiguration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionButtonWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPlayerSocialOptionViewData      Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerSocialOptionButtonWidget::SetData(const struct FPlayerSocialOptionViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionButtonWidget", "SetData");

	Params::CorePlayerSocialOptionButtonWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionButtonWidget.UpdateVisual
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerSocialOptionButtonWidget::UpdateVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionButtonWidget", "UpdateVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInputs
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInstructionArchivesButton
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInstructionArchivesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInstructionArchivesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInstructionCurrencyButton
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInstructionCurrencyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInstructionCurrencyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInstructionStoreButton
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInstructionStoreButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInstructionStoreButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetInstructionWidgetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationItemOriginViewData ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetInstructionWidgetData(const struct FCustomizationItemOriginViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetInstructionWidgetData");

	Params::EventEntryRewardsDisplayWidget_SetInstructionWidgetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetItemsData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>CustomizationRewardsData                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetItemsData(const TArray<class UStoreCustomizationItemViewData*>& CustomizationRewardsData, const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetItemsData");

	Params::EventEntryRewardsDisplayWidget_SetItemsData Parms{};

	Parms.CustomizationRewardsData = std::move(CustomizationRewardsData);
	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetPreviewAreaData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationItemPreviewAreaViewDataViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetPreviewAreaData(const struct FCustomizationItemPreviewAreaViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetPreviewAreaData");

	Params::EventEntryRewardsDisplayWidget_SetPreviewAreaData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetScrollPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetScrollPrompt");

	Params::EventEntryRewardsDisplayWidget_SetScrollPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetSelectedReward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetSelectedReward(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetSelectedReward");

	Params::EventEntryRewardsDisplayWidget_SetSelectedReward Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetVisuals
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventEntryPopupSkinUIData       SkinUIData                                             (Parm, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetVisuals(const struct FEventEntryPopupSkinUIData& SkinUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetVisuals");

	Params::EventEntryRewardsDisplayWidget_SetVisuals Parms{};

	Parms.SkinUIData = std::move(SkinUIData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.Hide
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerSocialOptionsMenuWidget::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.OnPlayerSocialOptionButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerSocialOptionsMenuWidget::OnPlayerSocialOptionButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "OnPlayerSocialOptionButtonClicked");

	Params::CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FPlayerSocialOptionViewData>Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerSocialOptionsMenuWidget::SetData(const TArray<struct FPlayerSocialOptionViewData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "SetData");

	Params::CorePlayerSocialOptionsMenuWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.Show
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerSocialOptionsMenuWidget::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCharacterContainerWidget.OnCharacterTileClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCharacterContainerWidget::OnCharacterTileClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCharacterContainerWidget", "OnCharacterTileClicked");

	Params::CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.ClearVisual
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCorePlayerStatusKillerEffectWidget::ClearVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectWidget", "ClearVisual");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.SetKillerData
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerStatusViewData            Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerStatusKillerEffectWidget::SetKillerData(const struct FPlayerStatusViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectWidget", "SetKillerData");

	Params::CorePlayerStatusKillerEffectWidget_SetKillerData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectK07Widget.AfflictionHit
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCorePlayerStatusKillerEffectK07Widget::AfflictionHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectK07Widget", "AfflictionHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsSelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* TargetButton, bool Param_IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotWidget", "OnButtonSelectedChanged");

	Params::CoreStoreCharmSlotWidget_OnButtonSelectedChanged Parms{};

	Parms.TargetButton = TargetButton;
	Parms.Param_IsSelected = Param_IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.SetEmptyCharmSlotData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotWidget::SetEmptyCharmSlotData(const int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotWidget", "SetEmptyCharmSlotData");

	Params::CoreStoreCharmSlotWidget_SetEmptyCharmSlotData Parms{};

	Parms.SlotIndex = SlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.SetSelectedCharmSlotData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCustomizationRewardViewData     CharmSlotData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotWidget::SetSelectedCharmSlotData(const int32 SlotIndex, const struct FCustomizationRewardViewData& CharmSlotData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotWidget", "SetSelectedCharmSlotData");

	Params::CoreStoreCharmSlotWidget_SetSelectedCharmSlotData Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.CharmSlotData = std::move(CharmSlotData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.CacheViewData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FPlayerStatusViewData            Data                                                   (Parm, NativeAccessSpecifierPublic)
// struct FPlayerStatusViewData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPlayerStatusViewData UCorePlayerStatusWidget::CacheViewData(const struct FPlayerStatusViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "CacheViewData");

	Params::CorePlayerStatusWidget_CacheViewData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusDataMappingDB
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UCorePlayerStatusWidget::GetKillerStatusDataMappingDB() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetKillerStatusDataMappingDB");

	Params::CorePlayerStatusWidget_GetKillerStatusDataMappingDB Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusEffectWidget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCorePlayerStatusKillerEffectWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePlayerStatusKillerEffectWidget* UCorePlayerStatusWidget::GetKillerStatusEffectWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetKillerStatusEffectWidget");

	Params::CorePlayerStatusWidget_GetKillerStatusEffectWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetPlayerStateChangeType
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPlayerStatusViewData            NewViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayerStateChangeType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerStateChangeType UCorePlayerStatusWidget::GetPlayerStateChangeType(const struct FPlayerStatusViewData& NewViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetPlayerStateChangeType");

	Params::CorePlayerStatusWidget_GetPlayerStateChangeType Parms{};

	Parms.NewViewData = std::move(NewViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasKillerStatusDataChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPlayerStatusViewData            NewViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasKillerStatusDataChanged(const struct FPlayerStatusViewData& NewViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasKillerStatusDataChanged");

	Params::CorePlayerStatusWidget_HasKillerStatusDataChanged Parms{};

	Parms.NewViewData = std::move(NewViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasObsessionStateChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EObsessionUIState                       NewObsessionState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasObsessionStateChanged(EObsessionUIState NewObsessionState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasObsessionStateChanged");

	Params::CorePlayerStatusWidget_HasObsessionStateChanged Parms{};

	Parms.NewObsessionState = NewObsessionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStateChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerStatus                           NewPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasPlayerStateChanged(EPlayerStatus NewPlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasPlayerStateChanged");

	Params::CorePlayerStatusWidget_HasPlayerStateChanged Parms{};

	Parms.NewPlayerState = NewPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStatusDataChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPlayerStatusViewData            NewViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasPlayerStatusDataChanged(const struct FPlayerStatusViewData& NewViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasPlayerStatusDataChanged");

	Params::CorePlayerStatusWidget_HasPlayerStatusDataChanged Parms{};

	Parms.NewViewData = std::move(NewViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasTimerProgressChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   NewTimerProgress                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasTimerProgressChanged(float NewTimerProgress) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasTimerProgressChanged");

	Params::CorePlayerStatusWidget_HasTimerProgressChanged Parms{};

	Parms.NewTimerProgress = NewTimerProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.ShouldPlaySleepAnimation
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESleepingUIState                        NewSleepState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::ShouldPlaySleepAnimation(ESleepingUIState NewSleepState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "ShouldPlaySleepAnimation");

	Params::CorePlayerStatusWidget_ShouldPlaySleepAnimation Parms{};

	Parms.NewSleepState = NewSleepState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePowerBundleWidget.SetActiveState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePowerBundleWidget::SetActiveState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePowerBundleWidget", "SetActiveState");

	Params::CorePowerBundleWidget_SetActiveState Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePremiumCurrencyButtonWidget.SetPrice
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             PriceText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePremiumCurrencyButtonWidget::SetPrice(const class FText& PriceText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePremiumCurrencyButtonWidget", "SetPrice");

	Params::CorePremiumCurrencyButtonWidget_SetPrice Parms{};

	Parms.PriceText = std::move(PriceText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsSelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* buttonTarget, bool Param_IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "OnButtonSelectedChanged");

	Params::CorePresetWidget_OnButtonSelectedChanged Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.Param_IsSelected = Param_IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.OnPresetButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::OnPresetButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "OnPresetButtonHovered");

	Params::CorePresetWidget_OnPresetButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.OnPresetButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::OnPresetButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "OnPresetButtonUnhovered");

	Params::CorePresetWidget_OnPresetButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PresetId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::SetData(const int32 PresetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "SetData");

	Params::CorePresetWidget_SetData Parms{};

	Parms.PresetId = PresetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.SetIsPreviewingAnyCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsPreviewingAnyCustomization                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::SetIsPreviewingAnyCustomization(const bool IsPreviewingAnyCustomization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "SetIsPreviewingAnyCustomization");

	Params::CorePresetWidget_SetIsPreviewingAnyCustomization Parms{};

	Parms.IsPreviewingAnyCustomization = IsPreviewingAnyCustomization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FEventObjectiveTargetData        Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerTarget::SetData(const struct FEventObjectiveTargetData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerTarget", "SetData");

	Params::EventObjectiveTrackerTarget_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetIsReached
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsReached                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerTarget::SetIsReached(const bool IsReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerTarget", "SetIsReached");

	Params::EventObjectiveTrackerTarget_SetIsReached Parms{};

	Parms.IsReached = IsReached;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetRewardPreviewVisible
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerTarget::SetRewardPreviewVisible(const bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerTarget", "SetRewardPreviewVisible");

	Params::EventObjectiveTrackerTarget_SetRewardPreviewVisible Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction DBDUIViewsCore.CorePresetWidgetContainer.OnSelectedPresetDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   SelectedPreset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidgetContainer::OnSelectedPresetDelegate__DelegateSignature(int32 SelectedPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidgetContainer", "OnSelectedPresetDelegate__DelegateSignature");

	Params::CorePresetWidgetContainer_OnSelectedPresetDelegate__DelegateSignature Parms{};

	Parms.SelectedPreset = SelectedPreset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePresetWidgetContainer.SetPreset
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           PresetData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedPreset                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidgetContainer::SetPreset(const TArray<int32>& PresetData, const int32 SelectedPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidgetContainer", "SetPreset");

	Params::CorePresetWidgetContainer_SetPreset Parms{};

	Parms.PresetData = std::move(PresetData);
	Parms.SelectedPreset = SelectedPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidgetContainer.SetSelectedPreset
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidgetContainer::SetSelectedPreset(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidgetContainer", "SetSelectedPreset");

	Params::CorePresetWidgetContainer_SetSelectedPreset Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.SetClawVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::SetClawVisibility(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "SetClawVisibility");

	Params::CorePrestigeWidget_SetClawVisibility Parms{};

	Parms.Show = Show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrestigeViewData                Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    HideClaws                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::SetData(const struct FPrestigeViewData& Data, bool HideClaws)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "SetData");

	Params::CorePrestigeWidget_SetData Parms{};

	Parms.Data = std::move(Data);
	Parms.HideClaws = HideClaws;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePrestigeWidget.SetProgressVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::SetProgressVisibility(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "SetProgressVisibility");

	Params::CorePrestigeWidget_SetProgressVisibility Parms{};

	Parms.Show = Show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.UpdateImagesAndText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPrestigeViewData                Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::UpdateImagesAndText(const struct FPrestigeViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "UpdateImagesAndText");

	Params::CorePrestigeWidget_UpdateImagesAndText Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.UpdateComponentVisibility
// (Final, Native, Public, BlueprintCallable, Const)

void UCorePrestigeWidget::UpdateComponentVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "UpdateComponentVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.UpdatePrestigeImageOpacity
// (Final, Native, Public, BlueprintCallable, Const)

void UCorePrestigeWidget::UpdatePrestigeImageOpacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "UpdatePrestigeImageOpacity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryDetailsTabContentWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSpecialEventDetailsTabContentDataContentData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventEntryPopupSkinUIData       SkinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryDetailsTabContentWidget::SetData(const struct FSpecialEventDetailsTabContentData& ContentData, const struct FEventEntryPopupSkinUIData& SkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryDetailsTabContentWidget", "SetData");

	Params::EventEntryDetailsTabContentWidget_SetData Parms{};

	Parms.ContentData = std::move(ContentData);
	Parms.SkinData = std::move(SkinData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetBackgroundVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_ShowBackground                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetBackgroundVisible(const bool Param_ShowBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetBackgroundVisible");

	Params::CorePriceTagWidget_SetBackgroundVisible Parms{};

	Parms.Param_ShowBackground = Param_ShowBackground;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPriceTagViewData                ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetData(const struct FPriceTagViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetData");

	Params::CorePriceTagWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetDiscountTagSpacing
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   bottomPadding                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetDiscountTagSpacing(const float bottomPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetDiscountTagSpacing");

	Params::CorePriceTagWidget_SetDiscountTagSpacing Parms{};

	Parms.bottomPadding = bottomPadding;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetHighlightInsufficientCurrency
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Highlight                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetHighlightInsufficientCurrency(const bool Highlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetHighlightInsufficientCurrency");

	Params::CorePriceTagWidget_SetHighlightInsufficientCurrency Parms{};

	Parms.Highlight = Highlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.UpdatePriceTagScale
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PriceTagScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::UpdatePriceTagScale(const float PriceTagScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "UpdatePriceTagScale");

	Params::CorePriceTagWidget_UpdatePriceTagScale Parms{};

	Parms.PriceTagScale = PriceTagScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreProfileMenuWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreProfileMenuWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreProfileMenuWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreProfileMenuWidget.OnMenuTabSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreProfileMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreProfileMenuWidget", "OnMenuTabSelected");

	Params::CoreProfileMenuWidget_OnMenuTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.FriendSearchPopupWidget.OnFriendClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFriendSearchPopupWidget::OnFriendClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendSearchPopupWidget", "OnFriendClicked");

	Params::FriendSearchPopupWidget_OnFriendClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRankTooltipWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FRankTooltipViewData             ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreRankTooltipWidget::SetTooltipData(const struct FRankTooltipViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRankTooltipWidget", "SetTooltipData");

	Params::CoreRankTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.AnimateHideReward
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreRewardPopupWidget::AnimateHideReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "AnimateHideReward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.OnHideRewardAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreRewardPopupWidget::OnHideRewardAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "OnHideRewardAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.OnNextClicked
// (Final, Native, Private)

void UCoreRewardPopupWidget::OnNextClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "OnNextClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.PlaySfx
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EItemRarity                             Rarity                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisceral                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardPopupWidget::PlaySfx(const EItemRarity Rarity, const bool IsVisceral)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "PlaySfx");

	Params::CoreRewardPopupWidget_PlaySfx Parms{};

	Parms.Rarity = Rarity;
	Parms.IsVisceral = IsVisceral;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.SetRewardData
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGrantedRewardPopupViewData*      RewardData                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardPopupWidget::SetRewardData(class UGrantedRewardPopupViewData* RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "SetRewardData");

	Params::CoreRewardPopupWidget_SetRewardData Parms{};

	Parms.RewardData = RewardData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.ShowNextReward
// (Final, Native, Protected, BlueprintCallable)

void UCoreRewardPopupWidget::ShowNextReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "ShowNextReward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.OnBackgroundImageLoadingCompleted
// (Final, Native, Public)

void UMilestoneTrackerTierItem::OnBackgroundImageLoadingCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "OnBackgroundImageLoadingCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.OnBackgroundImageLoadingStarted
// (Final, Native, Public)

void UMilestoneTrackerTierItem::OnBackgroundImageLoadingStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "OnBackgroundImageLoadingStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMilestoneTrackerItemViewData    Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMilestoneTrackerTierItem::SetData(const struct FMilestoneTrackerItemViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "SetData");

	Params::MilestoneTrackerTierItem_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.SetVisualState
// (Event, Public, BlueprintEvent)
// Parameters:
// EMilestoneTrackerItemState              State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerTierItem::SetVisualState(const EMilestoneTrackerItemState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "SetVisualState");

	Params::MilestoneTrackerTierItem_SetVisualState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.UpdateBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInstance> Background                                             (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerTierItem::UpdateBackground(const TSoftObjectPtr<class UMaterialInstance> Background)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "UpdateBackground");

	Params::MilestoneTrackerTierItem_UpdateBackground Parms{};

	Parms.Background = Background;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.Clear
// (Final, Native, Public, BlueprintCallable, Const)

void UMilestoneTrackerTierItem::Clear() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.ClearData
// (Final, Native, Public, BlueprintCallable)

void UCoreRewardWrapperWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.CreateRewardWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCoreRewardWidget>    RewardClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::CreateRewardWidget(TSubclassOf<class UCoreRewardWidget> RewardClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "CreateRewardWidget");

	Params::CoreRewardWrapperWidget_CreateRewardWidget Parms{};

	Parms.RewardClass = RewardClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardWrapperViewData           ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetData(const struct FRewardWrapperViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetData");

	Params::CoreRewardWrapperWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsClickable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetIsClickable(bool IsClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetIsClickable");

	Params::CoreRewardWrapperWidget_SetIsClickable Parms{};

	Parms.IsClickable = IsClickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_PlayAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetIsLocked(bool IsLocked, bool Param_PlayAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetIsLocked");

	Params::CoreRewardWrapperWidget_SetIsLocked Parms{};

	Parms.IsLocked = IsLocked;
	Parms.Param_PlayAnimation = Param_PlayAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetScaleToFit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetScaleToFit(float Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetScaleToFit");

	Params::CoreRewardWrapperWidget_SetScaleToFit Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetScaleUserSpecified
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetScaleUserSpecified(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetScaleUserSpecified");

	Params::CoreRewardWrapperWidget_SetScaleUserSpecified Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetRewardWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreRewardWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreRewardWidget* UCoreRewardWrapperWidget::GetRewardWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "GetRewardWidget");

	Params::CoreRewardWrapperWidget_GetRewardWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetWidgetClassFromRewardType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERewardType                             RewardType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCoreRewardWidget>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UCoreRewardWidget> UCoreRewardWrapperWidget::GetWidgetClassFromRewardType(ERewardType RewardType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "GetWidgetClassFromRewardType");

	Params::CoreRewardWrapperWidget_GetWidgetClassFromRewardType Parms{};

	Parms.RewardType = RewardType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.GetScreenIndicatorsMap
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TMap<class FString, class UCoreScreenIndicatorWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class FString, class UCoreScreenIndicatorWidget*> UCoreScreenIndicatorsContainerWidget::GetScreenIndicatorsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorsContainerWidget", "GetScreenIndicatorsMap");

	Params::CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.FindScreenIndicatorKey
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreScreenIndicatorWidget*       Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreScreenIndicatorsContainerWidget::FindScreenIndicatorKey(class UCoreScreenIndicatorWidget* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorsContainerWidget", "FindScreenIndicatorKey");

	Params::CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.HideMenuLoadoutPartsTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                UnhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::HideMenuLoadoutPartsTooltip(class UCoreButtonWidget* UnhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "HideMenuLoadoutPartsTooltip");

	Params::LoadoutMenuWidget_HideMenuLoadoutPartsTooltip Parms{};

	Parms.UnhoveredSlotWidget = UnhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnAcceptAction
// (Final, Native, Protected, BlueprintCallable)

void ULoadoutMenuWidget::OnAcceptAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnAcceptAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnBackAction
// (Final, Native, Protected, BlueprintCallable)

void ULoadoutMenuWidget::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnDropDownListSelectedOptionChanged
// (Final, Native, Private)
// Parameters:
// struct FTabWidgetData                   buttonData                                             (Parm, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::OnDropDownListSelectedOptionChanged(const struct FTabWidgetData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnDropDownListSelectedOptionChanged");

	Params::LoadoutMenuWidget_OnDropDownListSelectedOptionChanged Parms{};

	Parms.buttonData = std::move(buttonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnDropdownSelected
// (Final, Native, Private)
// Parameters:
// ESlateVisibility                        InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::OnDropdownSelected(ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnDropdownSelected");

	Params::LoadoutMenuWidget_OnDropdownSelected Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnLoadoutMenuEquippedSlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::OnLoadoutMenuEquippedSlotClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnLoadoutMenuEquippedSlotClicked");

	Params::LoadoutMenuWidget_OnLoadoutMenuEquippedSlotClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnLoadoutMenuInventorySlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                MenuPerkWidget                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::OnLoadoutMenuInventorySlotClicked(class UCoreButtonWidget* MenuPerkWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnLoadoutMenuInventorySlotClicked");

	Params::LoadoutMenuWidget_OnLoadoutMenuInventorySlotClicked Parms{};

	Parms.MenuPerkWidget = MenuPerkWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnLoadoutMenuLeftArrowClicked
// (Final, Native, Private, BlueprintCallable)

void ULoadoutMenuWidget::OnLoadoutMenuLeftArrowClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnLoadoutMenuLeftArrowClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnLoadoutMenuPresetClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   SelectedPresetId                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::OnLoadoutMenuPresetClicked(const int32 SelectedPresetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnLoadoutMenuPresetClicked");

	Params::LoadoutMenuWidget_OnLoadoutMenuPresetClicked Parms{};

	Parms.SelectedPresetId = SelectedPresetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnLoadoutMenuRightArrowClicked
// (Final, Native, Private, BlueprintCallable)

void ULoadoutMenuWidget::OnLoadoutMenuRightArrowClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnLoadoutMenuRightArrowClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.OnPaginationSelected
// (Final, Native, Private)
// Parameters:
// int32                                   CurrentPage                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsUpdate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::OnPaginationSelected(const int32 CurrentPage, bool IsUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "OnPaginationSelected");

	Params::LoadoutMenuWidget_OnPaginationSelected Parms{};

	Parms.CurrentPage = CurrentPage;
	Parms.IsUpdate = IsUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.PlayPaginationInAnimation
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void ULoadoutMenuWidget::PlayPaginationInAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "PlayPaginationInAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.LoadoutMenuWidget.PlayPaginationOutAnimation
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNextPage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::PlayPaginationOutAnimation(bool IsNextPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "PlayPaginationOutAnimation");

	Params::LoadoutMenuWidget_PlayPaginationOutAnimation Parms{};

	Parms.IsNextPage = IsNextPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LoadoutMenuWidget.SetInventoryItemEnabled
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCoreMenuLoadoutPartWidget*       Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EItemAvailability                       Availability                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::SetInventoryItemEnabled(class UCoreMenuLoadoutPartWidget* Widget, const EItemAvailability Availability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "SetInventoryItemEnabled");

	Params::LoadoutMenuWidget_SetInventoryItemEnabled Parms{};

	Parms.Widget = Widget;
	Parms.Availability = Availability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LoadoutMenuWidget.ShowMenuLoadoutPartsTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                HoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuWidget::ShowMenuLoadoutPartsTooltip(class UCoreButtonWidget* HoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "ShowMenuLoadoutPartsTooltip");

	Params::LoadoutMenuWidget_ShowMenuLoadoutPartsTooltip Parms{};

	Parms.HoveredSlotWidget = HoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuWidget.UpdateInventoryItemData
// (Final, Native, Private, BlueprintCallable)

void ULoadoutMenuWidget::UpdateInventoryItemData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuWidget", "UpdateInventoryItemData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreScreenIndicatorWidget.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreScreenIndicatorWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorWidget", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreScreenIndicatorWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FScreenIndicatorViewData         Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreScreenIndicatorWidget::SetData(const struct FScreenIndicatorViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorWidget", "SetData");

	Params::CoreScreenIndicatorWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnClearButtonClicked
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnClearButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnClearButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnKeyboardButtonClicked
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnKeyboardButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnKeyboardButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSearchBarWidget::OnTextChanged(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextChanged");

	Params::CoreSearchBarWidget_OnTextChanged Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextCommitted
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             InCommitType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSearchBarWidget::OnTextCommitted(const class FText& InText, ETextCommit InCommitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextCommitted");

	Params::CoreSearchBarWidget_OnTextCommitted Parms{};

	Parms.InText = std::move(InText);
	Parms.InCommitType = InCommitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextInputChanged
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnTextInputChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextInputChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextInputEntered
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnTextInputEntered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextInputEntered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.SimulateExtraClick
// (Final, Native, Protected)
// Parameters:
// struct FPointerEvent                    MouseDownEvent                                         (Parm, NativeAccessSpecifierPublic)

void UCoreSearchBarWidget::SimulateExtraClick(const struct FPointerEvent& MouseDownEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "SimulateExtraClick");

	Params::CoreSearchBarWidget_SimulateExtraClick Parms{};

	Parms.MouseDownEvent = std::move(MouseDownEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.GetEnteredText
// (Final, Native, Protected, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreSearchBarWidget::GetEnteredText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "GetEnteredText");

	Params::CoreSearchBarWidget_GetEnteredText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.EventPointsWidget.Highlight
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHighlighted                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventPointsWidget::Highlight(bool IsHighlighted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventPointsWidget", "Highlight");

	Params::EventPointsWidget_Highlight Parms{};

	Parms.IsHighlighted = IsHighlighted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventPointsWidget.SetValue
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventPointsWidget::SetValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventPointsWidget", "SetValue");

	Params::EventPointsWidget_SetValue Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.SettingsMatchDetailsWidget.OnSurvivorInfoButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USettingsMatchDetailsWidget::OnSurvivorInfoButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsWidget", "OnSurvivorInfoButtonClicked");

	Params::SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsOfferingsDisplayWidget.OnOfferingHovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                HoveredOffering                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsOfferingsDisplayWidget::OnOfferingHovered(class UCoreButtonWidget* HoveredOffering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsOfferingsDisplayWidget", "OnOfferingHovered");

	Params::CoreSettingsOfferingsDisplayWidget_OnOfferingHovered Parms{};

	Parms.HoveredOffering = HoveredOffering;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsOfferingsDisplayWidget.OnOfferingUnhovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                UnhoveredOffering                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsOfferingsDisplayWidget::OnOfferingUnhovered(class UCoreButtonWidget* UnhoveredOffering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsOfferingsDisplayWidget", "OnOfferingUnhovered");

	Params::CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered Parms{};

	Parms.UnhoveredOffering = UnhoveredOffering;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkHovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                HoveredPerk                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPerksDisplayWidget::OnPerkHovered(class UCoreButtonWidget* HoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPerksDisplayWidget", "OnPerkHovered");

	Params::CoreSettingsPerksDisplayWidget_OnPerkHovered Parms{};

	Parms.HoveredPerk = HoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkUnhovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                UnhoveredPerk                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPerksDisplayWidget::OnPerkUnhovered(class UCoreButtonWidget* UnhoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPerksDisplayWidget", "OnPerkUnhovered");

	Params::CoreSettingsPerksDisplayWidget_OnPerkUnhovered Parms{};

	Parms.UnhoveredPerk = UnhoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsPlayerInfoButtonWidget.UpdateVisuals
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FPlayerInfoData                  PlayerInfoData                                         (Parm, NativeAccessSpecifierPublic)
// bool                                    IsLocalPlayerSurvivor                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPlayerInfoButtonWidget::UpdateVisuals(const struct FPlayerInfoData& PlayerInfoData, bool IsLocalPlayerSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPlayerInfoButtonWidget", "UpdateVisuals");

	Params::CoreSettingsPlayerInfoButtonWidget_UpdateVisuals Parms{};

	Parms.PlayerInfoData = std::move(PlayerInfoData);
	Parms.IsLocalPlayerSurvivor = IsLocalPlayerSurvivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.OnPlayerInfoButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPlayerInfoContainerWidget::OnPlayerInfoButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPlayerInfoContainerWidget", "OnPlayerInfoButtonClicked");

	Params::CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillHovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                HoveredPerk                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsSkillsDisplayWidget::OnSkillHovered(class UCoreButtonWidget* HoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsSkillsDisplayWidget", "OnSkillHovered");

	Params::CoreSettingsSkillsDisplayWidget_OnSkillHovered Parms{};

	Parms.HoveredPerk = HoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillUnhovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                UnhoveredPerk                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsSkillsDisplayWidget::OnSkillUnhovered(class UCoreButtonWidget* UnhoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsSkillsDisplayWidget", "OnSkillUnhovered");

	Params::CoreSettingsSkillsDisplayWidget_OnSkillUnhovered Parms{};

	Parms.UnhoveredPerk = UnhoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.OnPurchaseButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsItemWidget::OnPurchaseButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "OnPurchaseButtonClicked");

	Params::CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.PlayUnlockanimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreShrineOfSecretsItemWidget::PlayUnlockanimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "PlayUnlockanimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.SetEventDiscountVisualData
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FShrineOfSecretsDiscountUIInfo   DiscountInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsItemWidget::SetEventDiscountVisualData(const struct FShrineOfSecretsDiscountUIInfo& DiscountInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "SetEventDiscountVisualData");

	Params::CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData Parms{};

	Parms.DiscountInfo = std::move(DiscountInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.SetVisuals
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FShrineOfSecretsItemViewData     ShrineOfSecretsItemViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsItemWidget::SetVisuals(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "SetVisuals");

	Params::CoreShrineOfSecretsItemWidget_SetVisuals Parms{};

	Parms.ShrineOfSecretsItemViewData = std::move(ShrineOfSecretsItemViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.OnBackButtonClicked
// (Final, Native, Private)

void UCoreShrineOfSecretsWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.OnPurchaseButtonClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FShrineOfSecretsItemViewData     ShrineOfSecretsItemViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsWidget::OnPurchaseButtonClicked(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "OnPurchaseButtonClicked");

	Params::CoreShrineOfSecretsWidget_OnPurchaseButtonClicked Parms{};

	Parms.ShrineOfSecretsItemViewData = std::move(ShrineOfSecretsItemViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.SetEventUi
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FShrineOfSecretsViewData         ShrineOfSecretsViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsWidget::SetEventUi(const struct FShrineOfSecretsViewData& ShrineOfSecretsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "SetEventUi");

	Params::CoreShrineOfSecretsWidget_SetEventUi Parms{};

	Parms.ShrineOfSecretsViewData = std::move(ShrineOfSecretsViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.UpdateTimer
// (Final, Native, Private)
// Parameters:
// int32                                   RemainingTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsWidget::UpdateTimer(int32 RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "UpdateTimer");

	Params::CoreShrineOfSecretsWidget_UpdateTimer Parms{};

	Parms.RemainingTime = RemainingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.HideLoadoutPartTooltip
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                UnhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::HideLoadoutPartTooltip(class UCoreButtonWidget* UnhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "HideLoadoutPartTooltip");

	Params::LobbyPlayerListItemWidget_HideLoadoutPartTooltip Parms{};

	Parms.UnhoveredSlotWidget = UnhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.OnBindHoverBorder
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerListItemState                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsHoverEnabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::OnBindHoverBorder(EPlayerListItemState State, bool IsHoverEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "OnBindHoverBorder");

	Params::LobbyPlayerListItemWidget_OnBindHoverBorder Parms{};

	Parms.State = State;
	Parms.IsHoverEnabled = IsHoverEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.SetState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerListItemState                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::SetState(EPlayerListItemState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "SetState");

	Params::LobbyPlayerListItemWidget_SetState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.ShowLoadoutPartTooltip
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                HoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::ShowLoadoutPartTooltip(class UCoreButtonWidget* HoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "ShowLoadoutPartTooltip");

	Params::LobbyPlayerListItemWidget_ShowLoadoutPartTooltip Parms{};

	Parms.HoveredSlotWidget = HoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.ClearActiveSpecialLoadingScreenWidget
// (Final, Native, Public, BlueprintCallable)

void UCoreSpecialEventLoadingScreenContainer::ClearActiveSpecialLoadingScreenWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "ClearActiveSpecialLoadingScreenWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.HasCustomWidgetForEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             EventID                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSpecialEventLoadingScreenContainer::HasCustomWidgetForEvent(const class FName& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "HasCustomWidgetForEvent");

	Params::CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent Parms{};

	Parms.EventID = EventID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.OnLoadingHintsFadeSequenceCompleted
// (Final, Native, Protected)

void UCoreSpecialEventLoadingScreenContainer::OnLoadingHintsFadeSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "OnLoadingHintsFadeSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.SetLoadingHint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLoadingHintViewData             LoadingHintData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenContainer::SetLoadingHint(const struct FLoadingHintViewData& LoadingHintData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "SetLoadingHint");

	Params::CoreSpecialEventLoadingScreenContainer_SetLoadingHint Parms{};

	Parms.LoadingHintData = std::move(LoadingHintData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.SetupSpecialEventLoadingScreen
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             EventLabel                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenContainer::SetupSpecialEventLoadingScreen(const class FName& EventLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "SetupSpecialEventLoadingScreen");

	Params::CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen Parms{};

	Parms.EventLabel = EventLabel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.UpdateProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenContainer::UpdateProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "UpdateProgress");

	Params::CoreSpecialEventLoadingScreenContainer_UpdateProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnLeaveTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnLeaveTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnLeaveTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnLeftArrowTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnLeftArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnLeftArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnRightArrowTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnRightArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnRightArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.GetStatusEffectData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FStatusEffectViewData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStatusEffectViewData UCoreStatusEffectIcon::GetStatusEffectData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "GetStatusEffectData");

	Params::CoreStatusEffectIcon_GetStatusEffectData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.ResetWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStatusEffectIcon::ResetWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "ResetWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.SetInactiveTicks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InactiveTicks                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::SetInactiveTicks(const int32 InactiveTicks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "SetInactiveTicks");

	Params::CoreStatusEffectIcon_SetInactiveTicks Parms{};

	Parms.InactiveTicks = InactiveTicks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.SetStatusEffectData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStatusEffectViewData            Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::SetStatusEffectData(const struct FStatusEffectViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "SetStatusEffectData");

	Params::CoreStatusEffectIcon_SetStatusEffectData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdatePercentageFill
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::UpdatePercentageFill(float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "UpdatePercentageFill");

	Params::CoreStatusEffectIcon_UpdatePercentageFill Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdateWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStatusEffectIcon::UpdateWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "UpdateWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.GetInactiveTicks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreStatusEffectIcon::GetInactiveTicks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "GetInactiveTicks");

	Params::CoreStatusEffectIcon_GetInactiveTicks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreArchiveFragmentItemWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreArchiveFragmentItemWidget::OnButtonHovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchiveFragmentItemWidget", "OnButtonHovered");

	Params::CoreStoreArchiveFragmentItemWidget_OnButtonHovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreArchiveFragmentItemWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                TargetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreArchiveFragmentItemWidget::OnButtonUnhovered(class UCoreButtonWidget* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchiveFragmentItemWidget", "OnButtonUnhovered");

	Params::CoreStoreArchiveFragmentItemWidget_OnButtonUnhovered Parms{};

	Parms.TargetButton = TargetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreArchiveFragmentItemWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreArchiveFragmentViewData    Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreArchiveFragmentItemWidget::SetData(const struct FStoreArchiveFragmentViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchiveFragmentItemWidget", "SetData");

	Params::CoreStoreArchiveFragmentItemWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.HideTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                UnhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::HideTooltip(class UCoreButtonWidget* UnhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "HideTooltip");

	Params::CoreStoreCharacterPerksToastWidget_HideTooltip Parms{};

	Parms.UnhoveredSlotWidget = UnhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.OnPlayerClick
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::OnPlayerClick(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "OnPlayerClick");

	Params::CoreStoreCharacterPerksToastWidget_OnPlayerClick Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.OnWidgetVisibilityChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::OnWidgetVisibilityChanged(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "OnWidgetVisibilityChanged");

	Params::CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.SetCharacterData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UMenuPerkViewData*>        CharacterUniquePerksViewData                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::SetCharacterData(const TArray<class UMenuPerkViewData*>& CharacterUniquePerksViewData, EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "SetCharacterData");

	Params::CoreStoreCharacterPerksToastWidget_SetCharacterData Parms{};

	Parms.CharacterUniquePerksViewData = std::move(CharacterUniquePerksViewData);
	Parms.Role = Role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.SetCharacterRole
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::SetCharacterRole(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "SetCharacterRole");

	Params::CoreStoreCharacterPerksToastWidget_SetCharacterRole Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.SetPerkData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreMenuPerkWidget*              PerkWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMenuPerkViewData*                PerkViewData                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::SetPerkData(class UCoreMenuPerkWidget* PerkWidget, class UMenuPerkViewData* PerkViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "SetPerkData");

	Params::CoreStoreCharacterPerksToastWidget_SetPerkData Parms{};

	Parms.PerkWidget = PerkWidget;
	Parms.PerkViewData = PerkViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.ShowTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                HoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::ShowTooltip(class UCoreButtonWidget* HoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "ShowTooltip");

	Params::CoreStoreCharacterPerksToastWidget_ShowTooltip Parms{};

	Parms.HoveredSlotWidget = HoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.ToggleWidgetVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreCharacterPerksToastWidget::ToggleWidgetVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "ToggleWidgetVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.SetKillerPowerData
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UMenuPowerViewData*               KillerPowerViewData                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::SetKillerPowerData(class UMenuPowerViewData* KillerPowerViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "SetKillerPowerData");

	Params::CoreStoreCharacterPerksToastWidget_SetKillerPowerData Parms{};

	Parms.KillerPowerViewData = KillerPowerViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategoryButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategoryButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategoryButtonHovered");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategoryButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategoryButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategoryButtonUnhovered");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategorySelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategorySelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategorySelected");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategorySelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategorySelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategorySelectedAgain(class UCoreSelectableButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategorySelectedAgain");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnClearFiltersClicked
// (Final, Native, Protected)

void UCoreStoreCharactersCustomizationsWidget::OnClearFiltersClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnClearFiltersClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCustomizationSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCustomizationSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCustomizationSelected");

	Params::CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCustomizationSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCustomizationSelectedAgain(class UCoreSelectableButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCustomizationSelectedAgain");

	Params::CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnFiltersButtonClicked");

	Params::CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FStoreCharactersFiltersData      StoreFiltersData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnFiltersChanged(const struct FStoreCharactersFiltersData& StoreFiltersData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnFiltersChanged");

	Params::CoreStoreCharactersCustomizationsWidget_OnFiltersChanged Parms{};

	Parms.StoreFiltersData = std::move(StoreFiltersData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersWidgetVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnFiltersWidgetVisibilityChanged(const ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnFiltersWidgetVisibilityChanged");

	Params::CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnPresetSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnPresetSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnPresetSelected");

	Params::CoreStoreCharactersCustomizationsWidget_OnPresetSelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnPresetSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnPresetSelectedAgain(class UCoreSelectableButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnPresetSelectedAgain");

	Params::CoreStoreCharactersCustomizationsWidget_OnPresetSelectedAgain Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnCharacterSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnCharacterSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnCharacterSelected");

	Params::CoreStoreCharactersSelectionWidget_OnCharacterSelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnClearFiltersClicked
// (Final, Native, Protected)

void UCoreStoreCharactersSelectionWidget::OnClearFiltersClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnClearFiltersClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnFiltersButtonClicked");

	Params::CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FStoreCharactersFiltersData      StoreFiltersData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnFiltersChanged(const struct FStoreCharactersFiltersData& StoreFiltersData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnFiltersChanged");

	Params::CoreStoreCharactersSelectionWidget_OnFiltersChanged Parms{};

	Parms.StoreFiltersData = std::move(StoreFiltersData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersWidgetVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnFiltersWidgetVisibilityChanged(const ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnFiltersWidgetVisibilityChanged");

	Params::CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnPerkToastButtonClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnPerkToastButtonClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnPerkToastButtonClick");

	Params::CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnPerkWidgetVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnPerkWidgetVisibilityChanged(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnPerkWidgetVisibilityChanged");

	Params::CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharmSlotListWidget.OnCharmSlotSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotListWidget::OnCharmSlotSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotListWidget", "OnCharmSlotSelected");

	Params::CoreStoreCharmSlotListWidget_OnCharmSlotSelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCollectionsCustomizationsWidget.SetCollectionVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCollectionViewData*         CollectionViewData                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsCustomizationsWidget::SetCollectionVisuals(const class UStoreCollectionViewData* CollectionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsCustomizationsWidget", "SetCollectionVisuals");

	Params::CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals Parms{};

	Parms.CollectionViewData = CollectionViewData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreCollectionsListWidget.OnCollectionItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsListWidget::OnCollectionItemClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsListWidget", "OnCollectionItemClicked");

	Params::CoreStoreCollectionsListWidget_OnCollectionItemClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCollectionsListWidget.UpdateTitleFromScroll
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// float                                   CurrentOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsListWidget::UpdateTitleFromScroll(float CurrentOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsListWidget", "UpdateTitleFromScroll");

	Params::CoreStoreCollectionsListWidget_UpdateTitleFromScroll Parms{};

	Parms.CurrentOffset = CurrentOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.GetRealSize
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UCoreStoreCustomizationItemWidget::GetRealSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCustomizationItemWidget", "GetRealSize");

	Params::CoreStoreCustomizationItemWidget_GetRealSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.SetStoreCustomizationItemData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCustomizationItemViewData*  Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCustomizationItemWidget::SetStoreCustomizationItemData(class UStoreCustomizationItemViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCustomizationItemWidget", "SetStoreCustomizationItemData");

	Params::CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.MakeStoreRedirectionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStoreRedirectionData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreRedirectionData UCoreStoreCustomizationItemWidget::MakeStoreRedirectionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCustomizationItemWidget", "MakeStoreRedirectionData");

	Params::CoreStoreCustomizationItemWidget_MakeStoreRedirectionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCharacterWidget.GetCharacterViewData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FStoreFeaturedCharacterViewData  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreFeaturedCharacterViewData UCoreStoreFeaturedCharacterWidget::GetCharacterViewData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCharacterWidget", "GetCharacterViewData");

	Params::CoreStoreFeaturedCharacterWidget_GetCharacterViewData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCharacterWidget.SetCharacterData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreFeaturedCharacterViewData  CharacterData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCharacterWidget::SetCharacterData(const struct FStoreFeaturedCharacterViewData& CharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCharacterWidget", "SetCharacterData");

	Params::CoreStoreFeaturedCharacterWidget_SetCharacterData Parms{};

	Parms.CharacterData = std::move(CharacterData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.ClearPriceTagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreFeaturedCustomizationItemWidget::ClearPriceTagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "ClearPriceTagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.ClearTimerFlagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreFeaturedCustomizationItemWidget::ClearTimerFlagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "ClearTimerFlagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.CreatePriceTagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCorePriceTagWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePriceTagWidget* UCoreStoreFeaturedCustomizationItemWidget::CreatePriceTagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "CreatePriceTagWidget");

	Params::CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.OnSelectedItemChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsSelected                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::OnSelectedItemChanged(class UCoreSelectableButtonWidget* buttonTarget, bool Param_IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "OnSelectedItemChanged");

	Params::CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.Param_IsSelected = Param_IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetCustomizationData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCustomizationItemViewData*  CustomizationItemViewData                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetCustomizationData(class UStoreCustomizationItemViewData* CustomizationItemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetCustomizationData");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData Parms{};

	Parms.CustomizationItemViewData = CustomizationItemViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetOwnedTagVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Param_IsVisible                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetOwnedTagVisibility(const bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetOwnedTagVisibility");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetTimerFlags
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTimerFlagViewData               LimitedTimeFlag                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTimerFlagViewData               DiscountTimeFlag                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsOwned                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetTimerFlags(const struct FTimerFlagViewData& LimitedTimeFlag, const struct FTimerFlagViewData& DiscountTimeFlag, const bool IsOwned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetTimerFlags");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags Parms{};

	Parms.LimitedTimeFlag = std::move(LimitedTimeFlag);
	Parms.DiscountTimeFlag = std::move(DiscountTimeFlag);
	Parms.IsOwned = IsOwned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.ShowTimerFlagWidget
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTimerFlagViewData               TimerFlagData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCoreTimerFlagWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTimerFlagWidget* UCoreStoreFeaturedCustomizationItemWidget::ShowTimerFlagWidget(const struct FTimerFlagViewData& TimerFlagData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "ShowTimerFlagWidget");

	Params::CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget Parms{};

	Parms.TimerFlagData = std::move(TimerFlagData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateOnHoverBorder
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdateOnHoverBorder(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdateOnHoverBorder");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdatePosition
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdatePosition(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdatePosition");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdatePosition Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateSize
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdateSize(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdateSize");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdateSize Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateSizeCompleted
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 Tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdateSizeCompleted(class UUITweenInstance* Tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdateSizeCompleted");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted Parms{};

	Parms.Tween = Tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.ClearRightStickWidget
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreMenuWidget::ClearRightStickWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "ClearRightStickWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.DisableRightStickInputs
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreMenuWidget::DisableRightStickInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "DisableRightStickInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.EnableRightStickInputs
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreMenuWidget::EnableRightStickInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "EnableRightStickInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnBackAction
// (Final, Native, Protected)

void UCoreStoreMenuWidget::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnGetAuricCellsInputSwitcherTriggered
// (Final, Native, Protected)

void UCoreStoreMenuWidget::OnGetAuricCellsInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnGetAuricCellsInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnMenuTabSelected");

	Params::CoreStoreMenuWidget_OnMenuTabSelected Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnMenuTabSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      SelectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreMenuWidget::OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* SelectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnMenuTabSelectedAgain");

	Params::CoreStoreMenuWidget_OnMenuTabSelectedAgain Parms{};

	Parms.SelectedButton = SelectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnRedeemCodeInputSwitcherTriggered
// (Final, Native, Protected)

void UCoreStoreMenuWidget::OnRedeemCodeInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnRedeemCodeInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.SetRightStickWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EStoreMenuState                         MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IStoreRightStickControllableViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreRightStickControllableViewInterface> UCoreStoreMenuWidget::SetRightStickWidget(EStoreMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "SetRightStickWidget");

	Params::CoreStoreMenuWidget_SetRightStickWidget Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.SetRightStickWidgetBehaviours
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreMenuWidget::SetRightStickWidgetBehaviours()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "SetRightStickWidgetBehaviours");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.UpdateRightStickInputPrompts
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreMenuWidget::UpdateRightStickInputPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "UpdateRightStickInputPrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.OnItemUnhovered
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::OnItemUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "OnItemUnhovered");

	Params::CoreStoreSpecialPackItemWidget_OnItemUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.OnPackClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::OnPackClicked(class UCoreButtonWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "OnPackClicked");

	Params::CoreStoreSpecialPackItemWidget_OnPackClicked Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetChapterPackData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreChapterPackViewData*        Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AppendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetChapterPackData(class UStoreChapterPackViewData* Data, const bool AppendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetChapterPackData");

	Params::CoreStoreSpecialPackItemWidget_SetChapterPackData Parms{};

	Parms.Data = Data;
	Parms.AppendDataToAnalyticsName = AppendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetCrossPromotionData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCrossPromoCampaignViewData      Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    AppendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetCrossPromotionData(const struct FCrossPromoCampaignViewData& Data, const bool AppendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetCrossPromotionData");

	Params::CoreStoreSpecialPackItemWidget_SetCrossPromotionData Parms{};

	Parms.Data = std::move(Data);
	Parms.AppendDataToAnalyticsName = AppendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetHeritagePackData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreHeritagePackViewData       Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    AppendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetHeritagePackData(const struct FStoreHeritagePackViewData& Data, const bool AppendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetHeritagePackData");

	Params::CoreStoreSpecialPackItemWidget_SetHeritagePackData Parms{};

	Parms.Data = std::move(Data);
	Parms.AppendDataToAnalyticsName = AppendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetImageCompositionData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PackId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             DisplayTitle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   PackImageCompositionNumberOfItems                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStorePackContentData*>    PackContentData                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetImageCompositionData(const class FString& PackId, const class FText& DisplayTitle, const int32 PackImageCompositionNumberOfItems, const TArray<class UStorePackContentData*>& PackContentData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetImageCompositionData");

	Params::CoreStoreSpecialPackItemWidget_SetImageCompositionData Parms{};

	Parms.PackId = std::move(PackId);
	Parms.DisplayTitle = std::move(DisplayTitle);
	Parms.PackImageCompositionNumberOfItems = PackImageCompositionNumberOfItems;
	Parms.PackContentData = std::move(PackContentData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetNewIcon
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNew                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetNewIcon(const bool IsNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetNewIcon");

	Params::CoreStoreSpecialPackItemWidget_SetNewIcon Parms{};

	Parms.IsNew = IsNew;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetSimplifiedData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PackId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             DisplayTitle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ImagePtr                                               (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftRemoteContentCacheObjectPtr ImageRemotePtr                                         (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetSimplifiedData(const class FString& PackId, const class FText& DisplayTitle, const TSoftObjectPtr<class UTexture2D>& ImagePtr, const struct FSoftRemoteContentCacheObjectPtr& ImageRemotePtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetSimplifiedData");

	Params::CoreStoreSpecialPackItemWidget_SetSimplifiedData Parms{};

	Parms.PackId = std::move(PackId);
	Parms.DisplayTitle = std::move(DisplayTitle);
	Parms.ImagePtr = ImagePtr;
	Parms.ImageRemotePtr = std::move(ImageRemotePtr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetSpecialPackData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreSpecialPackViewData*        Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AppendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetSpecialPackData(class UStoreSpecialPackViewData* Data, const bool AppendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetSpecialPackData");

	Params::CoreStoreSpecialPackItemWidget_SetSpecialPackData Parms{};

	Parms.Data = Data;
	Parms.AppendDataToAnalyticsName = AppendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.SetSpecialPackImageUsingComposition
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumberOfItems                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStorePackContentData*>    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, class UTexture2D*>    Icons                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::SetSpecialPackImageUsingComposition(const int32 NumberOfItems, const TArray<class UStorePackContentData*>& Data, const TMap<class FName, class UTexture2D*>& Icons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "SetSpecialPackImageUsingComposition");

	Params::CoreStoreSpecialPackItemWidget_SetSpecialPackImageUsingComposition Parms{};

	Parms.NumberOfItems = NumberOfItems;
	Parms.Data = std::move(Data);
	Parms.Icons = std::move(Icons);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackItemWidget.LoadPackImage
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        LocalPtr                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftRemoteContentCacheObjectPtr RemotePtr                                              (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackItemWidget::LoadPackImage(TSoftObjectPtr<class UTexture2D> LocalPtr, struct FSoftRemoteContentCacheObjectPtr* RemotePtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackItemWidget", "LoadPackImage");

	Params::CoreStoreSpecialPackItemWidget_LoadPackImage Parms{};

	Parms.LocalPtr = LocalPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RemotePtr != nullptr)
		*RemotePtr = std::move(Parms.RemotePtr);
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateHideDetails
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateHideDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateHideDetails");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateHideTabs
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateHideTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateHideTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateShowDetails
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateShowDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateShowDetails");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateShowTabs
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateShowTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateShowTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnDetailsHideAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnDetailsHideAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnDetailsHideAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnDetailsShowAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnDetailsShowAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnDetailsShowAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnTabsHideAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnTabsHideAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnTabsHideAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnTabsShowAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnTabsShowAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnTabsShowAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.SetTabInputsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPacksWidget::SetTabInputsEnabled(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "SetTabInputsEnabled");

	Params::CoreStoreSpecialPacksWidget_SetTabInputsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreUnlockConfirmationPopupWidget.OnUnlockAction
// (Final, Native, Protected)
// Parameters:
// ECurrencyType                           CurrencyType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreUnlockConfirmationPopupWidget::OnUnlockAction(const ECurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreUnlockConfirmationPopupWidget", "OnUnlockAction");

	Params::CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction Parms{};

	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.AdaptButtonsPoolToData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   DataNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::AdaptButtonsPoolToData(int32 DataNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "AdaptButtonsPoolToData");

	Params::CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData Parms{};

	Parms.DataNumber = DataNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.OnStoryLevelUnlockedAnimation
// (Final, Native, Private)

void UCoreStoryLevelsSelectorWidget::OnStoryLevelUnlockedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "OnStoryLevelUnlockedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UArchiveStoryLevelViewData*>LevelbuttonsData                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::SetData(const TArray<class UArchiveStoryLevelViewData*>& LevelbuttonsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetData");

	Params::CoreStoryLevelsSelectorWidget_SetData Parms{};

	Parms.LevelbuttonsData = std::move(LevelbuttonsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetEnabled");

	Params::CoreStoryLevelsSelectorWidget_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetUpInteractionMode
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoryLevelsSelectorWidget::SetUpInteractionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetUpInteractionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateLevelStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchivesStoryLevelStatus               Status                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::UpdateLevelStatus(const int32 Level, const EArchivesStoryLevelStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "UpdateLevelStatus");

	Params::CoreStoryLevelsSelectorWidget_UpdateLevelStatus Parms{};

	Parms.Level = Level;
	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// EArchivesStoryLevelStatus               GlobalStatus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_PlayAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::UpdateVisual(EArchivesStoryLevelStatus GlobalStatus, bool Param_PlayAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "UpdateVisual");

	Params::CoreStoryLevelsSelectorWidget_UpdateVisual Parms{};

	Parms.GlobalStatus = GlobalStatus;
	Parms.Param_PlayAnimation = Param_PlayAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.GetStoryLevelButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreStoryLevelButtonWidget*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoryLevelButtonWidget* UCoreStoryLevelsSelectorWidget::GetStoryLevelButton(int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "GetStoryLevelButton");

	Params::CoreStoryLevelsSelectorWidget_GetStoryLevelButton Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnPlayerSocialOptionClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FPlayerSocialOptionViewData      PlayerSocialOptionData                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTallyScoreboardWidget::OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& PlayerSocialOptionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyScoreboardWidget", "OnPlayerSocialOptionClicked");

	Params::CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked Parms{};

	Parms.PlayerSocialOptionData = std::move(PlayerSocialOptionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnPlayerStatusClicked
// (Final, Native, Private)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyScoreboardWidget::OnPlayerStatusClicked(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyScoreboardWidget", "OnPlayerStatusClicked");

	Params::CoreTallyScoreboardWidget_OnPlayerStatusClicked Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnReportButtonClicked
// (Final, Native, Private)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyScoreboardWidget::OnReportButtonClicked(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyScoreboardWidget", "OnReportButtonClicked");

	Params::CoreTallyScoreboardWidget_OnReportButtonClicked Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTestBuildFlagWidget.UpdateTestFlagPosition
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETestBuildFlagPosition                  TestBuildFlagPosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTestBuildFlagWidget::UpdateTestFlagPosition(ETestBuildFlagPosition TestBuildFlagPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTestBuildFlagWidget", "UpdateTestFlagPosition");

	Params::CoreTestBuildFlagWidget_UpdateTestFlagPosition Parms{};

	Parms.TestBuildFlagPosition = TestBuildFlagPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastButtonSelected
// (Final, Native, Protected)
// Parameters:
// int32                                   buttonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  NotificationId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationContainerWidget::HandleToastButtonSelected(const int32 buttonId, const uint32 NotificationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationContainerWidget", "HandleToastButtonSelected");

	Params::CoreToastNotificationContainerWidget_HandleToastButtonSelected Parms{};

	Parms.buttonId = buttonId;
	Parms.NotificationId = NotificationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastDisplayEnded
// (Final, Native, Protected)
// Parameters:
// uint32                                  NotificationId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationContainerWidget::HandleToastDisplayEnded(const uint32 NotificationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationContainerWidget", "HandleToastDisplayEnded");

	Params::CoreToastNotificationContainerWidget_HandleToastDisplayEnded Parms{};

	Parms.NotificationId = NotificationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastPromptSelected
// (Final, Native, Protected)
// Parameters:
// uint32                                  NotificationId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationContainerWidget::HandleToastPromptSelected(const uint32 NotificationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationContainerWidget", "HandleToastPromptSelected");

	Params::CoreToastNotificationContainerWidget_HandleToastPromptSelected Parms{};

	Parms.NotificationId = NotificationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTutorialObjectivesContainer.OnTutorialObjectiveCompleted
// (Final, Native, Private)
// Parameters:
// class UCoreTutorialObjectiveItem*       Item                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTutorialObjectivesContainer::OnTutorialObjectiveCompleted(class UCoreTutorialObjectiveItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectivesContainer", "OnTutorialObjectiveCompleted");

	Params::CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.HideMenuPerkTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                UnhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreUnlockPersonalPerksPopupWidget::HideMenuPerkTooltip(class UCoreButtonWidget* UnhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreUnlockPersonalPerksPopupWidget", "HideMenuPerkTooltip");

	Params::CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip Parms{};

	Parms.UnhoveredSlotWidget = UnhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.ShowMenuPerkTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                HoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreUnlockPersonalPerksPopupWidget::ShowMenuPerkTooltip(class UCoreButtonWidget* HoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreUnlockPersonalPerksPopupWidget", "ShowMenuPerkTooltip");

	Params::CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip Parms{};

	Parms.HoveredSlotWidget = HoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemAvailabilityBannerClicked
// (Final, Native, Private)

void UCoreWardrobeActionButtonsWidget::OnItemAvailabilityBannerClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemAvailabilityBannerClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemEquipAllClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemEquipAllClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemEquipAllClicked");

	Params::CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemEquipClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemEquipClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemEquipClicked");

	Params::CoreWardrobeActionButtonsWidget_OnItemEquipClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemSelectAllClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemSelectAllClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemSelectAllClicked");

	Params::CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemUnlockPressed
// (Final, Native, Private)

void UCoreWardrobeActionButtonsWidget::OnItemUnlockPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemUnlockPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemUnlockReleased
// (Final, Native, Private)

void UCoreWardrobeActionButtonsWidget::OnItemUnlockReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemUnlockReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemUnlockTriggered
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           CurrencyType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemUnlockTriggered(const ECurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemUnlockTriggered");

	Params::CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered Parms{};

	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlayMoriClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlayMoriClicked");

	Params::CoreWardrobeActionButtonsWidget_OnPlayMoriClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlayMoriHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlayMoriHovered");

	Params::CoreWardrobeActionButtonsWidget_OnPlayMoriHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlayMoriUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlayMoriUnhovered");

	Params::CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlaySecondMoriClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlaySecondMoriClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlaySecondMoriClicked");

	Params::CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnSecondMoriHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnSecondMoriHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnSecondMoriHovered");

	Params::CoreWardrobeActionButtonsWidget_OnSecondMoriHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnSecondMoriUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnSecondMoriUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnSecondMoriUnhovered");

	Params::CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnZoomCharmClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnZoomCharmClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnZoomCharmClicked");

	Params::CoreWardrobeActionButtonsWidget_OnZoomCharmClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.UpdateZoomCharmIcon
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    IsCharmZoomed                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::UpdateZoomCharmIcon(const bool IsCharmZoomed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "UpdateZoomCharmIcon");

	Params::CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon Parms{};

	Parms.IsCharmZoomed = IsCharmZoomed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CurrencyConversionPopupWidget.SetData
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurrencyConversionPopupViewData* Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCurrencyConversionPopupWidget::SetData(const class UCurrencyConversionPopupViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrencyConversionPopupWidget", "SetData");

	Params::CurrencyConversionPopupWidget_SetData Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.ClearGrid
// (Final, Native, Protected, BlueprintCallable)

void UCustomizationItemGridContainer::ClearGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "ClearGrid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.OnItemClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::OnItemClicked(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "OnItemClicked");

	Params::CustomizationItemGridContainer_OnItemClicked Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction DBDUIViewsCore.CustomizationItemGridContainer.OnItemClickedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::OnItemClickedDelegate__DelegateSignature(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "OnItemClickedDelegate__DelegateSignature");

	Params::CustomizationItemGridContainer_OnItemClickedDelegate__DelegateSignature Parms{};

	Parms.SelectedIndex = SelectedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>CustomizationRewardsData                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetData(const TArray<class UStoreCustomizationItemViewData*>& CustomizationRewardsData, const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetData");

	Params::CustomizationItemGridContainer_SetData Parms{};

	Parms.CustomizationRewardsData = std::move(CustomizationRewardsData);
	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetItemsLayout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LayoutMask                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetItemsLayout(int32 LayoutMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetItemsLayout");

	Params::CustomizationItemGridContainer_SetItemsLayout Parms{};

	Parms.LayoutMask = LayoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetScrollPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetScrollPrompt");

	Params::CustomizationItemGridContainer_SetScrollPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetSelectedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetSelectedItem(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetSelectedItem");

	Params::CustomizationItemGridContainer_SetSelectedItem Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.AppendToDescriptionText
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FText                             AppendedText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::AppendToDescriptionText(const class FText& AppendedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "AppendToDescriptionText");

	Params::CustomizationTooltipWidget_AppendToDescriptionText Parms{};

	Parms.AppendedText = std::move(AppendedText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.ClearPriceTagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCustomizationTooltipWidget::ClearPriceTagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "ClearPriceTagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.CreatePriceTagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCorePriceTagWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePriceTagWidget* UCustomizationTooltipWidget::CreatePriceTagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "CreatePriceTagWidget");

	Params::CustomizationTooltipWidget_CreatePriceTagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetOutfitParts
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUnbreakable                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCustomizationRewardOutfitPartsViewData*OutfitPartsViewData                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetOutfitParts(const bool IsUnbreakable, const class UCustomizationRewardOutfitPartsViewData* OutfitPartsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetOutfitParts");

	Params::CustomizationTooltipWidget_SetOutfitParts Parms{};

	Parms.IsUnbreakable = IsUnbreakable;
	Parms.OutfitPartsViewData = OutfitPartsViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetStatusText
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    IsEquipped                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsOwned                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsAvailable                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowAvailability                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetStatusText(const bool IsEquipped, const bool IsOwned, const bool IsAvailable, const bool IsLocked, const bool ShowAvailability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetStatusText");

	Params::CustomizationTooltipWidget_SetStatusText Parms{};

	Parms.IsEquipped = IsEquipped;
	Parms.IsOwned = IsOwned;
	Parms.IsAvailable = IsAvailable;
	Parms.IsLocked = IsLocked;
	Parms.ShowAvailability = ShowAvailability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FCustomizationTooltipViewData    CustomizationViewData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetTooltipData(const struct FCustomizationTooltipViewData& CustomizationViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetTooltipData");

	Params::CustomizationTooltipWidget_SetTooltipData Parms{};

	Parms.CustomizationViewData = std::move(CustomizationViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualClaimAllButtonClicked
// (Final, Native, Protected)

void UDailyRitualsPopupWidget::OnDailyRitualClaimAllButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "OnDailyRitualClaimAllButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualClaimButtonClicked
// (Final, Native, Protected)
// Parameters:
// class FString                           DailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupWidget::OnDailyRitualClaimButtonClicked(const class FString& DailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "OnDailyRitualClaimButtonClicked");

	Params::DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked Parms{};

	Parms.DailyRitualKey = std::move(DailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualRemoveButtonClicked
// (Final, Native, Protected)
// Parameters:
// class FString                           DailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupWidget::OnDailyRitualRemoveButtonClicked(const class FString& DailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "OnDailyRitualRemoveButtonClicked");

	Params::DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked Parms{};

	Parms.DailyRitualKey = std::move(DailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.SetVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsAfterTrial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupWidget::SetVisuals(bool IsAfterTrial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "SetVisuals");

	Params::DailyRitualsPopupWidget_SetVisuals Parms{};

	Parms.IsAfterTrial = IsAfterTrial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDDropDownListButton.ToggleDropDownArrow
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowArrow                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListButton::ToggleDropDownArrow(bool ShowArrow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListButton", "ToggleDropDownArrow");

	Params::DBDDropDownListButton_ToggleDropDownArrow Parms{};

	Parms.ShowArrow = ShowArrow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDPreviewSceneImage.ReleaseScene
// (Final, Native, Public, BlueprintCallable)

void UDBDPreviewSceneImage::ReleaseScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDPreviewSceneImage", "ReleaseScene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDPreviewSceneImage.UseScene
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPreviewSceneHandle              Scene                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDBDPreviewSceneImage::UseScene(const struct FPreviewSceneHandle& Scene)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDPreviewSceneImage", "UseScene");

	Params::DBDPreviewSceneImage_UseScene Parms{};

	Parms.Scene = std::move(Scene);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDPreviewSceneImage.GetCurrentSceneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UDBDPreviewSceneImage::GetCurrentSceneName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDPreviewSceneImage", "GetCurrentSceneName");

	Params::DBDPreviewSceneImage_GetCurrentSceneName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDTextBlock.GetTextStyles
// (Final, Native, Static, Protected)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UDBDTextBlock::GetTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDTextBlock", "GetTextStyles");

	Params::DBDTextBlock_GetTextStyles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDTextBlock.PopulateTextStyles
// (Final, Native, Static, Protected)

void UDBDTextBlock::PopulateTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDTextBlock", "PopulateTextStyles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.OnLargeTextSettingsChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsLargeText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::OnLargeTextSettingsChanged(bool IsLargeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "OnLargeTextSettingsChanged");

	Params::DBDTextBlock_OnLargeTextSettingsChanged Parms{};

	Parms.IsLargeText = IsLargeText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.OnSwitchDockStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsDocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::OnSwitchDockStateChanged(bool IsDocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "OnSwitchDockStateChanged");

	Params::DBDTextBlock_OnSwitchDockStateChanged Parms{};

	Parms.IsDocked = IsDocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.PreviewLargeText
// (Final, Native, Protected)

void UDBDTextBlock::PreviewLargeText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "PreviewLargeText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.PreviewUndocked
// (Final, Native, Protected)

void UDBDTextBlock::PreviewUndocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "PreviewUndocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.SetIsUpperCase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsUpperCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::SetIsUpperCase(bool IsUpperCase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "SetIsUpperCase");

	Params::DBDTextBlock_SetIsUpperCase Parms{};

	Parms.IsUpperCase = IsUpperCase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.GetIsUpperCase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDTextBlock::GetIsUpperCase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "GetIsUpperCase");

	Params::DBDTextBlock_GetIsUpperCase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDTooltipManager.HideAllTooltips
// (Final, Native, Public, BlueprintCallable)

void UDBDTooltipManager::HideAllTooltips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "HideAllTooltips");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.HideTooltip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETooltipPriority                        Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::HideTooltip(const ETooltipPriority Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "HideTooltip");

	Params::DBDTooltipManager_HideTooltip Parms{};

	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.OnViewportCreated
// (Final, Native, Private)

void UDBDTooltipManager::OnViewportCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "OnViewportCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveCompendiumTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCompendiumButtonData            TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveCompendiumTooltip(const struct FCompendiumButtonData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveCompendiumTooltip");

	Params::DBDTooltipManager_ShowArchiveCompendiumTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveNodeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchiveNodeViewData             TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveNodeTooltip(const struct FArchiveNodeViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveNodeTooltip");

	Params::DBDTooltipManager_ShowArchiveNodeTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchivePassTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchivePassTooltipViewData      TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchivePassTooltip(const struct FArchivePassTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, const ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchivePassTooltip");

	Params::DBDTooltipManager_ShowArchivePassTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveRewardNodeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FArchiveRewardNodeTooltipViewDataTooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveRewardNodeTooltip(const struct FArchiveRewardNodeTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveRewardNodeTooltip");

	Params::DBDTooltipManager_ShowArchiveRewardNodeTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCharacterTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterTooltipViewData        TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCharacterTooltip(const struct FCharacterTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCharacterTooltip");

	Params::DBDTooltipManager_ShowCharacterTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCurrencyTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCurrencyProgressionTooltipViewDataTooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCurrencyTooltip(const struct FCurrencyProgressionTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCurrencyTooltip");

	Params::DBDTooltipManager_ShowCurrencyTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCustomizationTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationTooltipViewData    TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCustomizationTooltip(const struct FCustomizationTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCustomizationTooltip");

	Params::DBDTooltipManager_ShowCustomizationTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLabelTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLabelTooltip(const class FText& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLabelTooltip");

	Params::DBDTooltipManager_ShowLabelTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLoadoutTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLoadoutTooltipData              TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLoadoutTooltip(const struct FLoadoutTooltipData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLoadoutTooltip");

	Params::DBDTooltipManager_ShowLoadoutTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLockedFeatureTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLockedFeatureTooltipViewData    TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLockedFeatureTooltip(const struct FLockedFeatureTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, const ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLockedFeatureTooltip");

	Params::DBDTooltipManager_ShowLockedFeatureTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowNotEnoughCurrencyModal
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNotEnoughCurrencyModalViewData  ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowNotEnoughCurrencyModal(const struct FNotEnoughCurrencyModalViewData& ViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, const ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowNotEnoughCurrencyModal");

	Params::DBDTooltipManager_ShowNotEnoughCurrencyModal Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowObjectiveTrackerTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FEventObjectiveTrackerViewData   TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowObjectiveTrackerTooltip(const struct FEventObjectiveTrackerViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowObjectiveTrackerTooltip");

	Params::DBDTooltipManager_ShowObjectiveTrackerTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowPlayerLevelTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCorePlayerLevelTooltipViewData  TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowPlayerLevelTooltip(const struct FCorePlayerLevelTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowPlayerLevelTooltip");

	Params::DBDTooltipManager_ShowPlayerLevelTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowRankTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FRankTooltipViewData             TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeometry                        TriggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ETooltipHorizontalAlignment             TooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               TooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowRankTooltip(const struct FRankTooltipViewData& TooltipViewData, const struct FGeometry& TriggerGeometry, const ETooltipHorizontalAlignment TooltipHorizontalAlignment, const ETooltipVerticalAlignment TooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowRankTooltip");

	Params::DBDTooltipManager_ShowRankTooltip Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);
	Parms.TriggerGeometry = std::move(TriggerGeometry);
	Parms.TooltipHorizontalAlignment = TooltipHorizontalAlignment;
	Parms.TooltipVerticalAlignment = TooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBox.AddChildToWrapBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Content                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDBDWrapBoxSlot*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDWrapBoxSlot* UDBDWrapBox::AddChildToWrapBox(class UWidget* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "AddChildToWrapBox");

	Params::DBDWrapBox_AddChildToWrapBox Parms{};

	Parms.Content = Content;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDWrapBox.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBox::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "SetHorizontalAlignment");

	Params::DBDWrapBox_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBox.SetInnerSlotPadding
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBox::SetInnerSlotPadding(const struct FVector2D& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "SetInnerSlotPadding");

	Params::DBDWrapBox_SetInnerSlotPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnAnalogInput
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FAnalogInputEvent                AnalogEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnAnalogInput(const struct FAnalogInputEvent& AnalogEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnAnalogInput");

	Params::DragZone_OnAnalogInput Parms{};

	Parms.AnalogEvent = std::move(AnalogEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseHoverHitzone
// (Final, Native, Private)

void UDragZone::OnMouseHoverHitzone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseHoverHitzone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseMoveGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMouseMoveGlobal(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseMoveGlobal");

	Params::DragZone_OnMouseMoveGlobal Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMousePressGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMousePressGlobal(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMousePressGlobal");

	Params::DragZone_OnMousePressGlobal Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMousePressHitzone
// (Final, Native, Private)

void UDragZone::OnMousePressHitzone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMousePressHitzone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseReleaseGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMouseReleaseGlobal(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseReleaseGlobal");

	Params::DragZone_OnMouseReleaseGlobal Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsTabWidget.OnPreviewAreaItemClicked
// (Final, Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsTabWidget::OnPreviewAreaItemClicked(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsTabWidget", "OnPreviewAreaItemClicked");

	Params::EventEntryRewardsTabWidget_OnPreviewAreaItemClicked Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsTabWidget.OnRewardGridItemClicked
// (Final, Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsTabWidget::OnRewardGridItemClicked(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsTabWidget", "OnRewardGridItemClicked");

	Params::EventEntryRewardsTabWidget_OnRewardGridItemClicked Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsTabWidget.SetScrollPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsTabWidget::SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsTabWidget", "SetScrollPrompt");

	Params::EventEntryRewardsTabWidget_SetScrollPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryDetailsTabLayoutWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventEntryPopupSkinUIData       SkinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSpecialEventDetailsTabContentData>ContentData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ImageTexture                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryDetailsTabLayoutWidget::SetData(const struct FEventEntryPopupSkinUIData& SkinData, const TArray<struct FSpecialEventDetailsTabContentData>& ContentData, const TSoftObjectPtr<class UTexture2D>& ImageTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryDetailsTabLayoutWidget", "SetData");

	Params::EventEntryDetailsTabLayoutWidget_SetData Parms{};

	Parms.SkinData = std::move(SkinData);
	Parms.ContentData = std::move(ContentData);
	Parms.ImageTexture = ImageTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventEntryDetailsTabLayoutWidget.SetTooltipEventData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCustomizationTooltipViewData    TooltipData                                            (Parm, NativeAccessSpecifierPublic)
// struct FSpecialEventDetailsTabContentDataContentData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FCustomizationTooltipViewData    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCustomizationTooltipViewData UEventEntryDetailsTabLayoutWidget::SetTooltipEventData(const struct FCustomizationTooltipViewData& TooltipData, const struct FSpecialEventDetailsTabContentData& ContentData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryDetailsTabLayoutWidget", "SetTooltipEventData");

	Params::EventEntryDetailsTabLayoutWidget_SetTooltipEventData Parms{};

	Parms.TooltipData = std::move(TooltipData);
	Parms.ContentData = std::move(ContentData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.EventEntryEventTabWidget.DisableInputs
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UEventEntryEventTabWidget::DisableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryEventTabWidget", "DisableInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.EventEntryEventTabWidget.EnableInputs
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UEventEntryEventTabWidget::EnableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryEventTabWidget", "EnableInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.EventEntryEventTabWidget.OnArchivesButtonClicked
// (Final, Native, Protected)

void UEventEntryEventTabWidget::OnArchivesButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryEventTabWidget", "OnArchivesButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventObjectiveTrackerWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventObjectiveTrackerViewData   ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerWidget::SetData(const struct FEventObjectiveTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerWidget", "SetData");

	Params::EventObjectiveTrackerWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventObjectiveTrackerWidget.SetTargetPosition
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEventObjectiveTrackerTarget*     Target                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RelativePosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerWidget::SetTargetPosition(const class UEventObjectiveTrackerTarget* Target, float RelativePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerWidget", "SetTargetPosition");

	Params::EventObjectiveTrackerWidget_SetTargetPosition Parms{};

	Parms.Target = Target;
	Parms.RelativePosition = RelativePosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.HudEffectCardWidget.AddMatchPoint
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSecondPoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WithAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::AddMatchPoint(bool IsSecondPoint, bool WithAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "AddMatchPoint");

	Params::HudEffectCardWidget_AddMatchPoint Parms{};

	Parms.IsSecondPoint = IsSecondPoint;
	Parms.WithAnimation = WithAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.HudEffectCardWidget.InitCards
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEffectCardViewData              CurrentCardViewData                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEffectCardViewData              NextCardViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::InitCards(const struct FEffectCardViewData& CurrentCardViewData, const struct FEffectCardViewData& NextCardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "InitCards");

	Params::HudEffectCardWidget_InitCards Parms{};

	Parms.CurrentCardViewData = std::move(CurrentCardViewData);
	Parms.NextCardViewData = std::move(NextCardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.HudEffectCardWidget.RotateCards
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFutureCardValid                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEffectCardViewData              FutureCardViewData                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::RotateCards(const bool IsFutureCardValid, const struct FEffectCardViewData& FutureCardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "RotateCards");

	Params::HudEffectCardWidget_RotateCards Parms{};

	Parms.IsFutureCardValid = IsFutureCardValid;
	Parms.FutureCardViewData = std::move(FutureCardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.HudEffectCardWidget.UpdateEffectCardName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FText                             CardName                                               (Parm, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::UpdateEffectCardName(const class FText& CardName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "UpdateEffectCardName");

	Params::HudEffectCardWidget_UpdateEffectCardName Parms{};

	Parms.CardName = std::move(CardName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LabelTooltipWidget.Reset
// (Final, Native, Public)

void ULabelTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LabelTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LabelTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FText                             LabelText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULabelTooltipWidget::SetTooltipData(const class FText& LabelText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LabelTooltipWidget", "SetTooltipData");

	Params::LabelTooltipWidget_SetTooltipData Parms{};

	Parms.LabelText = std::move(LabelText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.Reset
// (Final, Native, Public)

void ULoadoutTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetLoadoutTooltipLockedState
// (Event, Protected, BlueprintEvent)

void ULoadoutTooltipWidget::SetLoadoutTooltipLockedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetLoadoutTooltipLockedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetLoadoutTooltipPerkLevel
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutTooltipWidget::SetLoadoutTooltipPerkLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetLoadoutTooltipPerkLevel");

	Params::LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FLoadoutTooltipData              TooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULoadoutTooltipWidget::SetTooltipData(const struct FLoadoutTooltipData& TooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetTooltipData");

	Params::LoadoutTooltipWidget_SetTooltipData Parms{};

	Parms.TooltipViewData = std::move(TooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListWidget.OnKillerClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListWidget::OnKillerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListWidget", "OnKillerClicked");

	Params::LobbyPlayerListWidget_OnKillerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListWidget.OnPlayerSocialOptionClicked
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPlayerSocialOptionViewData      PlayerSocialOptionData                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULobbyPlayerListWidget::OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& PlayerSocialOptionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListWidget", "OnPlayerSocialOptionClicked");

	Params::LobbyPlayerListWidget_OnPlayerSocialOptionClicked Parms{};

	Parms.PlayerSocialOptionData = std::move(PlayerSocialOptionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListWidget.OnSurvivorClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListWidget::OnSurvivorClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListWidget", "OnSurvivorClicked");

	Params::LobbyPlayerListWidget_OnSurvivorClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LockedFeatureTooltipWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FLockedFeatureTooltipViewData    ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULockedFeatureTooltipWidget::SetTooltipData(const struct FLockedFeatureTooltipViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LockedFeatureTooltipWidget", "SetTooltipData");

	Params::LockedFeatureTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.DeselectMilestoneRewards
// (Final, Native, Public, BlueprintCallable)

void UMilestoneTrackerWidget::DeselectMilestoneRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "DeselectMilestoneRewards");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::OnRewardItemClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "OnRewardItemClicked");

	Params::MilestoneTrackerWidget_OnRewardItemClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.SelectMilestoneTrackerItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::SelectMilestoneTrackerItem(class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "SelectMilestoneTrackerItem");

	Params::MilestoneTrackerWidget_SelectMilestoneTrackerItem Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMilestoneTrackerViewData        ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::SetData(const struct FMilestoneTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "SetData");

	Params::MilestoneTrackerWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.SetVisuals
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMilestoneTrackerEventBasedSkinViewDataViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::SetVisuals(const struct FMilestoneTrackerEventBasedSkinViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "SetVisuals");

	Params::MilestoneTrackerWidget_SetVisuals Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NewActiveTomePopupWidget.OnCurrentTomeButtonClicked
// (Final, Native, Private, BlueprintCallable)

void UNewActiveTomePopupWidget::OnCurrentTomeButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewActiveTomePopupWidget", "OnCurrentTomeButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NewActiveTomePopupWidget.OnRiftButtonClicked
// (Final, Native, Private, BlueprintCallable)

void UNewActiveTomePopupWidget::OnRiftButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewActiveTomePopupWidget", "OnRiftButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ObjectiveRewardLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FObjectiveRewardLabelViewData    ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UObjectiveRewardLabelWidget::SetData(const struct FObjectiveRewardLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectiveRewardLabelWidget", "SetData");

	Params::ObjectiveRewardLabelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.PreviewSceneImage.GetCurrentScene
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FPreviewSceneHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPreviewSceneHandle UPreviewSceneImage::GetCurrentScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneImage", "GetCurrentScene");

	Params::PreviewSceneImage_GetCurrentScene Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.PreviewSceneImage.SetShouldUpdateEveryFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ShouldUpdateEveryFrame                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPreviewSceneImage::SetShouldUpdateEveryFrame(bool ShouldUpdateEveryFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneImage", "SetShouldUpdateEveryFrame");

	Params::PreviewSceneImage_SetShouldUpdateEveryFrame Parms{};

	Parms.ShouldUpdateEveryFrame = ShouldUpdateEveryFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.PreviewSceneImage.SetShouldUpdateOnCameraMove
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ShouldUpdateOnCameraMove                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPreviewSceneImage::SetShouldUpdateOnCameraMove(bool ShouldUpdateOnCameraMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneImage", "SetShouldUpdateOnCameraMove");

	Params::PreviewSceneImage_SetShouldUpdateOnCameraMove Parms{};

	Parms.ShouldUpdateOnCameraMove = ShouldUpdateOnCameraMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.PreviewSceneImage.UseScene
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Scene                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPreviewSceneImage::UseScene(class FName Scene)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneImage", "UseScene");

	Params::PreviewSceneImage_UseScene Parms{};

	Parms.Scene = Scene;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.PreviewSceneImage.IsUpdatingEveryFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPreviewSceneImage::IsUpdatingEveryFrame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneImage", "IsUpdatingEveryFrame");

	Params::PreviewSceneImage_IsUpdatingEveryFrame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.PreviewSceneImage.IsUpdatingOnCameraMove
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPreviewSceneImage::IsUpdatingOnCameraMove() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreviewSceneImage", "IsUpdatingOnCameraMove");

	Params::PreviewSceneImage_IsUpdatingOnCameraMove Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.ProfileMenuCustomizationWidget.OnCustomizationGridItemClicked
// (Final, Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMenuCustomizationWidget::OnCustomizationGridItemClicked(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationWidget", "OnCustomizationGridItemClicked");

	Params::ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ProfileMenuCustomizationWidget.OnEquipButtonClicked
// (Final, Native, Protected)

void UProfileMenuCustomizationWidget::OnEquipButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationWidget", "OnEquipButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.RichTextBlockScalableImageDecorator.ResetTintColor
// (Final, Native, Public, BlueprintCallable)

void URichTextBlockScalableImageDecorator::ResetTintColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockScalableImageDecorator", "ResetTintColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.RichTextBlockScalableImageDecorator.SetTintColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      Param_TintColor                                        (Parm, NativeAccessSpecifierPublic)

void URichTextBlockScalableImageDecorator::SetTintColor(const struct FSlateColor& Param_TintColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockScalableImageDecorator", "SetTintColor");

	Params::RichTextBlockScalableImageDecorator_SetTintColor Parms{};

	Parms.Param_TintColor = std::move(Param_TintColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TestWidget.SetShowWorkbench
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Param_ShowWorkbench                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestWidget::SetShowWorkbench(bool Param_ShowWorkbench)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestWidget", "SetShowWorkbench");

	Params::TestWidget_SetShowWorkbench Parms{};

	Parms.Param_ShowWorkbench = Param_ShowWorkbench;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

