#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheOnryo

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "TheOnryo_structs.hpp"


namespace SDK::Params
{

// Function TheOnryo.Addon_K27Power_09StatusEffect.Authority_OnSurviorCondemnChange
// 0x0010 (0x0010 - 0x0000)
struct Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange final
{
public:
	class ACamperPlayer*                          Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CondemnLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange) == 0x000008, "Wrong alignment on Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange");
static_assert(sizeof(Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange) == 0x000010, "Wrong size on Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange");
static_assert(offsetof(Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange, Player) == 0x000000, "Member 'Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange::Player' has a wrong offset!");
static_assert(offsetof(Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange, CondemnLevel) == 0x000008, "Member 'Addon_K27Power_09StatusEffect_Authority_OnSurviorCondemnChange::CondemnLevel' has a wrong offset!");

// Function TheOnryo.Addon_K27Power_18.Authority_OnSurvivorInsertVHS
// 0x0040 (0x0040 - 0x0000)
struct Addon_K27Power_18_Authority_OnSurvivorInsertVHS final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Addon_K27Power_18_Authority_OnSurvivorInsertVHS) == 0x000008, "Wrong alignment on Addon_K27Power_18_Authority_OnSurvivorInsertVHS");
static_assert(sizeof(Addon_K27Power_18_Authority_OnSurvivorInsertVHS) == 0x000040, "Wrong size on Addon_K27Power_18_Authority_OnSurvivorInsertVHS");
static_assert(offsetof(Addon_K27Power_18_Authority_OnSurvivorInsertVHS, GameplayTag) == 0x000000, "Member 'Addon_K27Power_18_Authority_OnSurvivorInsertVHS::GameplayTag' has a wrong offset!");
static_assert(offsetof(Addon_K27Power_18_Authority_OnSurvivorInsertVHS, GameEventData) == 0x000010, "Member 'Addon_K27Power_18_Authority_OnSurvivorInsertVHS::GameEventData' has a wrong offset!");

// Function TheOnryo.BaseManifestInteraction.Cosmetic_OnInteractionCancelled
// 0x0008 (0x0008 - 0x0000)
struct BaseManifestInteraction_Cosmetic_OnInteractionCancelled final
{
public:
	class ADBDPlayer*                             Onryo;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseManifestInteraction_Cosmetic_OnInteractionCancelled) == 0x000008, "Wrong alignment on BaseManifestInteraction_Cosmetic_OnInteractionCancelled");
static_assert(sizeof(BaseManifestInteraction_Cosmetic_OnInteractionCancelled) == 0x000008, "Wrong size on BaseManifestInteraction_Cosmetic_OnInteractionCancelled");
static_assert(offsetof(BaseManifestInteraction_Cosmetic_OnInteractionCancelled, Onryo) == 0x000000, "Member 'BaseManifestInteraction_Cosmetic_OnInteractionCancelled::Onryo' has a wrong offset!");

// Function TheOnryo.BaseManifestInteraction.Cosmetic_OnInteractionStarted
// 0x0008 (0x0008 - 0x0000)
struct BaseManifestInteraction_Cosmetic_OnInteractionStarted final
{
public:
	class ADBDPlayer*                             Onryo;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseManifestInteraction_Cosmetic_OnInteractionStarted) == 0x000008, "Wrong alignment on BaseManifestInteraction_Cosmetic_OnInteractionStarted");
static_assert(sizeof(BaseManifestInteraction_Cosmetic_OnInteractionStarted) == 0x000008, "Wrong size on BaseManifestInteraction_Cosmetic_OnInteractionStarted");
static_assert(offsetof(BaseManifestInteraction_Cosmetic_OnInteractionStarted, Onryo) == 0x000000, "Member 'BaseManifestInteraction_Cosmetic_OnInteractionStarted::Onryo' has a wrong offset!");

// Function TheOnryo.BaseManifestInteraction.Cosmetic_OnInteractionSucceeded
// 0x0008 (0x0008 - 0x0000)
struct BaseManifestInteraction_Cosmetic_OnInteractionSucceeded final
{
public:
	class ADBDPlayer*                             Onryo;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseManifestInteraction_Cosmetic_OnInteractionSucceeded) == 0x000008, "Wrong alignment on BaseManifestInteraction_Cosmetic_OnInteractionSucceeded");
static_assert(sizeof(BaseManifestInteraction_Cosmetic_OnInteractionSucceeded) == 0x000008, "Wrong size on BaseManifestInteraction_Cosmetic_OnInteractionSucceeded");
static_assert(offsetof(BaseManifestInteraction_Cosmetic_OnInteractionSucceeded, Onryo) == 0x000000, "Member 'BaseManifestInteraction_Cosmetic_OnInteractionSucceeded::Onryo' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.DBD_SetCondemnedLevel
// 0x0004 (0x0004 - 0x0000)
struct CondemnedComponent_DBD_SetCondemnedLevel final
{
public:
	float                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_DBD_SetCondemnedLevel) == 0x000004, "Wrong alignment on CondemnedComponent_DBD_SetCondemnedLevel");
static_assert(sizeof(CondemnedComponent_DBD_SetCondemnedLevel) == 0x000004, "Wrong size on CondemnedComponent_DBD_SetCondemnedLevel");
static_assert(offsetof(CondemnedComponent_DBD_SetCondemnedLevel, Level) == 0x000000, "Member 'CondemnedComponent_DBD_SetCondemnedLevel::Level' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.OnRep_CondemnedLevel
// 0x0004 (0x0004 - 0x0000)
struct CondemnedComponent_OnRep_CondemnedLevel final
{
public:
	float                                         PreviousValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_OnRep_CondemnedLevel) == 0x000004, "Wrong alignment on CondemnedComponent_OnRep_CondemnedLevel");
static_assert(sizeof(CondemnedComponent_OnRep_CondemnedLevel) == 0x000004, "Wrong size on CondemnedComponent_OnRep_CondemnedLevel");
static_assert(offsetof(CondemnedComponent_OnRep_CondemnedLevel, PreviousValue) == 0x000000, "Member 'CondemnedComponent_OnRep_CondemnedLevel::PreviousValue' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.GetCondemnedLevel
// 0x0004 (0x0004 - 0x0000)
struct CondemnedComponent_GetCondemnedLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_GetCondemnedLevel) == 0x000004, "Wrong alignment on CondemnedComponent_GetCondemnedLevel");
static_assert(sizeof(CondemnedComponent_GetCondemnedLevel) == 0x000004, "Wrong size on CondemnedComponent_GetCondemnedLevel");
static_assert(offsetof(CondemnedComponent_GetCondemnedLevel, ReturnValue) == 0x000000, "Member 'CondemnedComponent_GetCondemnedLevel::ReturnValue' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.GetCondemnedPercent
// 0x0004 (0x0004 - 0x0000)
struct CondemnedComponent_GetCondemnedPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_GetCondemnedPercent) == 0x000004, "Wrong alignment on CondemnedComponent_GetCondemnedPercent");
static_assert(sizeof(CondemnedComponent_GetCondemnedPercent) == 0x000004, "Wrong size on CondemnedComponent_GetCondemnedPercent");
static_assert(offsetof(CondemnedComponent_GetCondemnedPercent, ReturnValue) == 0x000000, "Member 'CondemnedComponent_GetCondemnedPercent::ReturnValue' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.GetLockedCondemnedPercent
// 0x0004 (0x0004 - 0x0000)
struct CondemnedComponent_GetLockedCondemnedPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_GetLockedCondemnedPercent) == 0x000004, "Wrong alignment on CondemnedComponent_GetLockedCondemnedPercent");
static_assert(sizeof(CondemnedComponent_GetLockedCondemnedPercent) == 0x000004, "Wrong size on CondemnedComponent_GetLockedCondemnedPercent");
static_assert(offsetof(CondemnedComponent_GetLockedCondemnedPercent, ReturnValue) == 0x000000, "Member 'CondemnedComponent_GetLockedCondemnedPercent::ReturnValue' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.IsCondemned
// 0x0001 (0x0001 - 0x0000)
struct CondemnedComponent_IsCondemned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_IsCondemned) == 0x000001, "Wrong alignment on CondemnedComponent_IsCondemned");
static_assert(sizeof(CondemnedComponent_IsCondemned) == 0x000001, "Wrong size on CondemnedComponent_IsCondemned");
static_assert(offsetof(CondemnedComponent_IsCondemned, ReturnValue) == 0x000000, "Member 'CondemnedComponent_IsCondemned::ReturnValue' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.IsFullyCondemned
// 0x0001 (0x0001 - 0x0000)
struct CondemnedComponent_IsFullyCondemned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_IsFullyCondemned) == 0x000001, "Wrong alignment on CondemnedComponent_IsFullyCondemned");
static_assert(sizeof(CondemnedComponent_IsFullyCondemned) == 0x000001, "Wrong size on CondemnedComponent_IsFullyCondemned");
static_assert(offsetof(CondemnedComponent_IsFullyCondemned, ReturnValue) == 0x000000, "Member 'CondemnedComponent_IsFullyCondemned::ReturnValue' has a wrong offset!");

// Function TheOnryo.CondemnedComponent.IsHoldingVHS
// 0x0001 (0x0001 - 0x0000)
struct CondemnedComponent_IsHoldingVHS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CondemnedComponent_IsHoldingVHS) == 0x000001, "Wrong alignment on CondemnedComponent_IsHoldingVHS");
static_assert(sizeof(CondemnedComponent_IsHoldingVHS) == 0x000001, "Wrong size on CondemnedComponent_IsHoldingVHS");
static_assert(offsetof(CondemnedComponent_IsHoldingVHS, ReturnValue) == 0x000000, "Member 'CondemnedComponent_IsHoldingVHS::ReturnValue' has a wrong offset!");

// Function TheOnryo.K27Addon_16_ScreamRevealComponent.BP_RevealAndMakeSurvivorScream
// 0x0010 (0x0010 - 0x0000)
struct K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream final
{
public:
	class ADBDPlayer*                             SurvivorPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreamRevealDuration;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream) == 0x000008, "Wrong alignment on K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream");
static_assert(sizeof(K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream) == 0x000010, "Wrong size on K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream");
static_assert(offsetof(K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream, SurvivorPlayer) == 0x000000, "Member 'K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream::SurvivorPlayer' has a wrong offset!");
static_assert(offsetof(K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream, ScreamRevealDuration) == 0x000008, "Member 'K27Addon_16_ScreamRevealComponent_BP_RevealAndMakeSurvivorScream::ScreamRevealDuration' has a wrong offset!");

// Function TheOnryo.K27Addon_16_ScreamRevealComponent.Multicast_RevealAndMakeSurvivorScream
// 0x0004 (0x0004 - 0x0000)
struct K27Addon_16_ScreamRevealComponent_Multicast_RevealAndMakeSurvivorScream final
{
public:
	float                                         ScreamRevealDuration;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27Addon_16_ScreamRevealComponent_Multicast_RevealAndMakeSurvivorScream) == 0x000004, "Wrong alignment on K27Addon_16_ScreamRevealComponent_Multicast_RevealAndMakeSurvivorScream");
static_assert(sizeof(K27Addon_16_ScreamRevealComponent_Multicast_RevealAndMakeSurvivorScream) == 0x000004, "Wrong size on K27Addon_16_ScreamRevealComponent_Multicast_RevealAndMakeSurvivorScream");
static_assert(offsetof(K27Addon_16_ScreamRevealComponent_Multicast_RevealAndMakeSurvivorScream, ScreamRevealDuration) == 0x000000, "Member 'K27Addon_16_ScreamRevealComponent_Multicast_RevealAndMakeSurvivorScream::ScreamRevealDuration' has a wrong offset!");

// Function TheOnryo.K27Addon_16_ScreamRevealComponent.Server_ConfirmKillerIsInViewValidation
// 0x0001 (0x0001 - 0x0000)
struct K27Addon_16_ScreamRevealComponent_Server_ConfirmKillerIsInViewValidation final
{
public:
	bool                                          IsKillerInView;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27Addon_16_ScreamRevealComponent_Server_ConfirmKillerIsInViewValidation) == 0x000001, "Wrong alignment on K27Addon_16_ScreamRevealComponent_Server_ConfirmKillerIsInViewValidation");
static_assert(sizeof(K27Addon_16_ScreamRevealComponent_Server_ConfirmKillerIsInViewValidation) == 0x000001, "Wrong size on K27Addon_16_ScreamRevealComponent_Server_ConfirmKillerIsInViewValidation");
static_assert(offsetof(K27Addon_16_ScreamRevealComponent_Server_ConfirmKillerIsInViewValidation, IsKillerInView) == 0x000000, "Member 'K27Addon_16_ScreamRevealComponent_Server_ConfirmKillerIsInViewValidation::IsKillerInView' has a wrong offset!");

// Function TheOnryo.K27P01.Authority_OnSurvivorUnhookedOffScourgeHook
// 0x0030 (0x0030 - 0x0000)
struct K27P01_Authority_OnSurvivorUnhookedOffScourgeHook final
{
public:
	struct FGameEventData                         GameEventData;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P01_Authority_OnSurvivorUnhookedOffScourgeHook) == 0x000008, "Wrong alignment on K27P01_Authority_OnSurvivorUnhookedOffScourgeHook");
static_assert(sizeof(K27P01_Authority_OnSurvivorUnhookedOffScourgeHook) == 0x000030, "Wrong size on K27P01_Authority_OnSurvivorUnhookedOffScourgeHook");
static_assert(offsetof(K27P01_Authority_OnSurvivorUnhookedOffScourgeHook, GameEventData) == 0x000000, "Member 'K27P01_Authority_OnSurvivorUnhookedOffScourgeHook::GameEventData' has a wrong offset!");

// Function TheOnryo.K27P01.GetAuraRevealDuration
// 0x0004 (0x0004 - 0x0000)
struct K27P01_GetAuraRevealDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P01_GetAuraRevealDuration) == 0x000004, "Wrong alignment on K27P01_GetAuraRevealDuration");
static_assert(sizeof(K27P01_GetAuraRevealDuration) == 0x000004, "Wrong size on K27P01_GetAuraRevealDuration");
static_assert(offsetof(K27P01_GetAuraRevealDuration, ReturnValue) == 0x000000, "Member 'K27P01_GetAuraRevealDuration::ReturnValue' has a wrong offset!");

// Function TheOnryo.K27P02.Cosmetic_ShowBubbleNotification
// 0x0008 (0x0008 - 0x0000)
struct K27P02_Cosmetic_ShowBubbleNotification final
{
public:
	const class AGenerator*                       TriggeringGenerator;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P02_Cosmetic_ShowBubbleNotification) == 0x000008, "Wrong alignment on K27P02_Cosmetic_ShowBubbleNotification");
static_assert(sizeof(K27P02_Cosmetic_ShowBubbleNotification) == 0x000008, "Wrong size on K27P02_Cosmetic_ShowBubbleNotification");
static_assert(offsetof(K27P02_Cosmetic_ShowBubbleNotification, TriggeringGenerator) == 0x000000, "Member 'K27P02_Cosmetic_ShowBubbleNotification::TriggeringGenerator' has a wrong offset!");

// Function TheOnryo.K27P02.Multicast_AddGeneratorAura
// 0x0008 (0x0008 - 0x0000)
struct K27P02_Multicast_AddGeneratorAura final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P02_Multicast_AddGeneratorAura) == 0x000008, "Wrong alignment on K27P02_Multicast_AddGeneratorAura");
static_assert(sizeof(K27P02_Multicast_AddGeneratorAura) == 0x000008, "Wrong size on K27P02_Multicast_AddGeneratorAura");
static_assert(offsetof(K27P02_Multicast_AddGeneratorAura, Generator) == 0x000000, "Member 'K27P02_Multicast_AddGeneratorAura::Generator' has a wrong offset!");

// Function TheOnryo.K27P02.Multicast_ShowBubbleNotification
// 0x0008 (0x0008 - 0x0000)
struct K27P02_Multicast_ShowBubbleNotification final
{
public:
	class AGenerator*                             TriggeringGenerator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P02_Multicast_ShowBubbleNotification) == 0x000008, "Wrong alignment on K27P02_Multicast_ShowBubbleNotification");
static_assert(sizeof(K27P02_Multicast_ShowBubbleNotification) == 0x000008, "Wrong size on K27P02_Multicast_ShowBubbleNotification");
static_assert(offsetof(K27P02_Multicast_ShowBubbleNotification, TriggeringGenerator) == 0x000000, "Member 'K27P02_Multicast_ShowBubbleNotification::TriggeringGenerator' has a wrong offset!");

// Function TheOnryo.K27P02.GetActivationTimeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K27P02_GetActivationTimeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P02_GetActivationTimeAtLevel) == 0x000004, "Wrong alignment on K27P02_GetActivationTimeAtLevel");
static_assert(sizeof(K27P02_GetActivationTimeAtLevel) == 0x000004, "Wrong size on K27P02_GetActivationTimeAtLevel");
static_assert(offsetof(K27P02_GetActivationTimeAtLevel, ReturnValue) == 0x000000, "Member 'K27P02_GetActivationTimeAtLevel::ReturnValue' has a wrong offset!");

// Function TheOnryo.K27P02.GetRegressionModifierAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K27P02_GetRegressionModifierAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P02_GetRegressionModifierAtLevel) == 0x000004, "Wrong alignment on K27P02_GetRegressionModifierAtLevel");
static_assert(sizeof(K27P02_GetRegressionModifierAtLevel) == 0x000004, "Wrong size on K27P02_GetRegressionModifierAtLevel");
static_assert(offsetof(K27P02_GetRegressionModifierAtLevel, ReturnValue) == 0x000000, "Member 'K27P02_GetRegressionModifierAtLevel::ReturnValue' has a wrong offset!");

// Function TheOnryo.K27P03.Multicast_ActivateSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct K27P03_Multicast_ActivateSkillCheck final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P03_Multicast_ActivateSkillCheck) == 0x000008, "Wrong alignment on K27P03_Multicast_ActivateSkillCheck");
static_assert(sizeof(K27P03_Multicast_ActivateSkillCheck) == 0x000008, "Wrong size on K27P03_Multicast_ActivateSkillCheck");
static_assert(offsetof(K27P03_Multicast_ActivateSkillCheck, Survivor) == 0x000000, "Member 'K27P03_Multicast_ActivateSkillCheck::Survivor' has a wrong offset!");

// Function TheOnryo.K27P03.Multicast_HighlightBlockedGeneratorForKiller
// 0x0008 (0x0008 - 0x0000)
struct K27P03_Multicast_HighlightBlockedGeneratorForKiller final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P03_Multicast_HighlightBlockedGeneratorForKiller) == 0x000008, "Wrong alignment on K27P03_Multicast_HighlightBlockedGeneratorForKiller");
static_assert(sizeof(K27P03_Multicast_HighlightBlockedGeneratorForKiller) == 0x000008, "Wrong size on K27P03_Multicast_HighlightBlockedGeneratorForKiller");
static_assert(offsetof(K27P03_Multicast_HighlightBlockedGeneratorForKiller, Generator) == 0x000000, "Member 'K27P03_Multicast_HighlightBlockedGeneratorForKiller::Generator' has a wrong offset!");

// Function TheOnryo.K27P03.GetGeneratorBlockedDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K27P03_GetGeneratorBlockedDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P03_GetGeneratorBlockedDurationAtLevel) == 0x000004, "Wrong alignment on K27P03_GetGeneratorBlockedDurationAtLevel");
static_assert(sizeof(K27P03_GetGeneratorBlockedDurationAtLevel) == 0x000004, "Wrong size on K27P03_GetGeneratorBlockedDurationAtLevel");
static_assert(offsetof(K27P03_GetGeneratorBlockedDurationAtLevel, ReturnValue) == 0x000000, "Member 'K27P03_GetGeneratorBlockedDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheOnryo.K27P03.GetGeneratorProgressionActivationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K27P03_GetGeneratorProgressionActivationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K27P03_GetGeneratorProgressionActivationAtLevel) == 0x000004, "Wrong alignment on K27P03_GetGeneratorProgressionActivationAtLevel");
static_assert(sizeof(K27P03_GetGeneratorProgressionActivationAtLevel) == 0x000004, "Wrong size on K27P03_GetGeneratorProgressionActivationAtLevel");
static_assert(offsetof(K27P03_GetGeneratorProgressionActivationAtLevel, ReturnValue) == 0x000000, "Member 'K27P03_GetGeneratorProgressionActivationAtLevel::ReturnValue' has a wrong offset!");

// Function TheOnryo.ManifestationComponent.Authority_AttemptToPalletStunDemanifestedKiller
// 0x0040 (0x0040 - 0x0000)
struct ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller) == 0x000008, "Wrong alignment on ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller");
static_assert(sizeof(ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller) == 0x000040, "Wrong size on ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller");
static_assert(offsetof(ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller, GameplayTag) == 0x000000, "Member 'ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller::GameplayTag' has a wrong offset!");
static_assert(offsetof(ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller, GameEventData) == 0x000010, "Member 'ManifestationComponent_Authority_AttemptToPalletStunDemanifestedKiller::GameEventData' has a wrong offset!");

// Function TheOnryo.ManifestationComponent.Multicast_OnManifestationChanged
// 0x0002 (0x0002 - 0x0000)
struct ManifestationComponent_Multicast_OnManifestationChanged final
{
public:
	bool                                          IsManifested;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmediateManifest;                               // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManifestationComponent_Multicast_OnManifestationChanged) == 0x000001, "Wrong alignment on ManifestationComponent_Multicast_OnManifestationChanged");
static_assert(sizeof(ManifestationComponent_Multicast_OnManifestationChanged) == 0x000002, "Wrong size on ManifestationComponent_Multicast_OnManifestationChanged");
static_assert(offsetof(ManifestationComponent_Multicast_OnManifestationChanged, IsManifested) == 0x000000, "Member 'ManifestationComponent_Multicast_OnManifestationChanged::IsManifested' has a wrong offset!");
static_assert(offsetof(ManifestationComponent_Multicast_OnManifestationChanged, IsImmediateManifest) == 0x000001, "Member 'ManifestationComponent_Multicast_OnManifestationChanged::IsImmediateManifest' has a wrong offset!");

// Function TheOnryo.NearPoweredTelevisionWithLingerTime.GetPercentRemainingDuration
// 0x0004 (0x0004 - 0x0000)
struct NearPoweredTelevisionWithLingerTime_GetPercentRemainingDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearPoweredTelevisionWithLingerTime_GetPercentRemainingDuration) == 0x000004, "Wrong alignment on NearPoweredTelevisionWithLingerTime_GetPercentRemainingDuration");
static_assert(sizeof(NearPoweredTelevisionWithLingerTime_GetPercentRemainingDuration) == 0x000004, "Wrong size on NearPoweredTelevisionWithLingerTime_GetPercentRemainingDuration");
static_assert(offsetof(NearPoweredTelevisionWithLingerTime_GetPercentRemainingDuration, ReturnValue) == 0x000000, "Member 'NearPoweredTelevisionWithLingerTime_GetPercentRemainingDuration::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoAfterImageComponent.SetAllowedToSpawnImages
// 0x0001 (0x0001 - 0x0000)
struct OnryoAfterImageComponent_SetAllowedToSpawnImages final
{
public:
	bool                                          CanSpawnImages;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoAfterImageComponent_SetAllowedToSpawnImages) == 0x000001, "Wrong alignment on OnryoAfterImageComponent_SetAllowedToSpawnImages");
static_assert(sizeof(OnryoAfterImageComponent_SetAllowedToSpawnImages) == 0x000001, "Wrong size on OnryoAfterImageComponent_SetAllowedToSpawnImages");
static_assert(offsetof(OnryoAfterImageComponent_SetAllowedToSpawnImages, CanSpawnImages) == 0x000000, "Member 'OnryoAfterImageComponent_SetAllowedToSpawnImages::CanSpawnImages' has a wrong offset!");

// Function TheOnryo.OnryoAfterImageComponent.ShouldShowAfterImageChanged
// 0x0001 (0x0001 - 0x0000)
struct OnryoAfterImageComponent_ShouldShowAfterImageChanged final
{
public:
	bool                                          ShouldBeVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoAfterImageComponent_ShouldShowAfterImageChanged) == 0x000001, "Wrong alignment on OnryoAfterImageComponent_ShouldShowAfterImageChanged");
static_assert(sizeof(OnryoAfterImageComponent_ShouldShowAfterImageChanged) == 0x000001, "Wrong size on OnryoAfterImageComponent_ShouldShowAfterImageChanged");
static_assert(offsetof(OnryoAfterImageComponent_ShouldShowAfterImageChanged, ShouldBeVisible) == 0x000000, "Member 'OnryoAfterImageComponent_ShouldShowAfterImageChanged::ShouldBeVisible' has a wrong offset!");

// Function TheOnryo.OnryoAfterImageComponent.GetKiller
// 0x0008 (0x0008 - 0x0000)
struct OnryoAfterImageComponent_GetKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoAfterImageComponent_GetKiller) == 0x000008, "Wrong alignment on OnryoAfterImageComponent_GetKiller");
static_assert(sizeof(OnryoAfterImageComponent_GetKiller) == 0x000008, "Wrong size on OnryoAfterImageComponent_GetKiller");
static_assert(offsetof(OnryoAfterImageComponent_GetKiller, ReturnValue) == 0x000000, "Member 'OnryoAfterImageComponent_GetKiller::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoAfterImageComponent.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct OnryoAfterImageComponent_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoAfterImageComponent_IsAttacking) == 0x000001, "Wrong alignment on OnryoAfterImageComponent_IsAttacking");
static_assert(sizeof(OnryoAfterImageComponent_IsAttacking) == 0x000001, "Wrong size on OnryoAfterImageComponent_IsAttacking");
static_assert(offsetof(OnryoAfterImageComponent_IsAttacking, ReturnValue) == 0x000000, "Member 'OnryoAfterImageComponent_IsAttacking::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoAfterImageComponent.IsInteracting
// 0x0001 (0x0001 - 0x0000)
struct OnryoAfterImageComponent_IsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoAfterImageComponent_IsInteracting) == 0x000001, "Wrong alignment on OnryoAfterImageComponent_IsInteracting");
static_assert(sizeof(OnryoAfterImageComponent_IsInteracting) == 0x000001, "Wrong size on OnryoAfterImageComponent_IsInteracting");
static_assert(offsetof(OnryoAfterImageComponent_IsInteracting, ReturnValue) == 0x000000, "Member 'OnryoAfterImageComponent_IsInteracting::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoAfterImageComponent.IsOnryoInvisible
// 0x0001 (0x0001 - 0x0000)
struct OnryoAfterImageComponent_IsOnryoInvisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoAfterImageComponent_IsOnryoInvisible) == 0x000001, "Wrong alignment on OnryoAfterImageComponent_IsOnryoInvisible");
static_assert(sizeof(OnryoAfterImageComponent_IsOnryoInvisible) == 0x000001, "Wrong size on OnryoAfterImageComponent_IsOnryoInvisible");
static_assert(offsetof(OnryoAfterImageComponent_IsOnryoInvisible, ReturnValue) == 0x000000, "Member 'OnryoAfterImageComponent_IsOnryoInvisible::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoAfterImageComponent.ShouldShowAfterImage
// 0x0001 (0x0001 - 0x0000)
struct OnryoAfterImageComponent_ShouldShowAfterImage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoAfterImageComponent_ShouldShowAfterImage) == 0x000001, "Wrong alignment on OnryoAfterImageComponent_ShouldShowAfterImage");
static_assert(sizeof(OnryoAfterImageComponent_ShouldShowAfterImage) == 0x000001, "Wrong size on OnryoAfterImageComponent_ShouldShowAfterImage");
static_assert(offsetof(OnryoAfterImageComponent_ShouldShowAfterImage, ReturnValue) == 0x000000, "Member 'OnryoAfterImageComponent_ShouldShowAfterImage::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoFXInterface.Cosmetic_OnKillerVisibilityChanged
// 0x0005 (0x0005 - 0x0000)
struct OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFlickering;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsManifested;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInvisibleDueToOutOfVisibiltyRange;               // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged) == 0x000001, "Wrong alignment on OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged");
static_assert(sizeof(OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged) == 0x000005, "Wrong size on OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged");
static_assert(offsetof(OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged, IsVisible) == 0x000000, "Member 'OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged::IsVisible' has a wrong offset!");
static_assert(offsetof(OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged, IsFlickering) == 0x000001, "Member 'OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged::IsFlickering' has a wrong offset!");
static_assert(offsetof(OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged, IsManifested) == 0x000002, "Member 'OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged::IsManifested' has a wrong offset!");
static_assert(offsetof(OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged, IsInvisibleDueToOutOfVisibiltyRange) == 0x000003, "Member 'OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged::IsInvisibleDueToOutOfVisibiltyRange' has a wrong offset!");
static_assert(offsetof(OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged, Force) == 0x000004, "Member 'OnryoFXInterface_Cosmetic_OnKillerVisibilityChanged::Force' has a wrong offset!");

// Function TheOnryo.OnryoFXInterface.Cosmetic_OnManifestStateChanged
// 0x0002 (0x0002 - 0x0000)
struct OnryoFXInterface_Cosmetic_OnManifestStateChanged final
{
public:
	bool                                          IsManifested;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmediateManifest;                               // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoFXInterface_Cosmetic_OnManifestStateChanged) == 0x000001, "Wrong alignment on OnryoFXInterface_Cosmetic_OnManifestStateChanged");
static_assert(sizeof(OnryoFXInterface_Cosmetic_OnManifestStateChanged) == 0x000002, "Wrong size on OnryoFXInterface_Cosmetic_OnManifestStateChanged");
static_assert(offsetof(OnryoFXInterface_Cosmetic_OnManifestStateChanged, IsManifested) == 0x000000, "Member 'OnryoFXInterface_Cosmetic_OnManifestStateChanged::IsManifested' has a wrong offset!");
static_assert(offsetof(OnryoFXInterface_Cosmetic_OnManifestStateChanged, IsImmediateManifest) == 0x000001, "Member 'OnryoFXInterface_Cosmetic_OnManifestStateChanged::IsImmediateManifest' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnCarryEnd
// 0x0008 (0x0008 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryEnd final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryEnd) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryEnd");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryEnd) == 0x000008, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryEnd");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryEnd, Camper) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryEnd::Camper' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnCarryStart
// 0x0008 (0x0008 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryStart final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryStart) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryStart");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryStart) == 0x000008, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryStart");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryStart, Camper) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnCarryStart::Camper' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged) == 0x000001, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged) == 0x000002, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged, OldDamageState) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged, NewDamageState) == 0x000001, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnDamageStateChanged::NewDamageState' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnGainCondemnStack
// 0x0010 (0x0010 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentStacks;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack) == 0x000010, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack, Camper) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack::Camper' has a wrong offset!");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack, CurrentStacks) == 0x000008, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnGainCondemnStack::CurrentStacks' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnLightingSet
// 0x0008 (0x0008 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLightingSet final
{
public:
	class ABaseSky*                               Lighting;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLightingSet) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLightingSet");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLightingSet) == 0x000008, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLightingSet");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLightingSet, Lighting) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLightingSet::Lighting' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnLoseCondemnStack
// 0x0010 (0x0010 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentStacks;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack) == 0x000010, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack, Camper) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack::Camper' has a wrong offset!");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack, CurrentStacks) == 0x000008, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseCondemnStack::CurrentStacks' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnLoseTape
// 0x0008 (0x0008 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseTape final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseTape) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseTape");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseTape) == 0x000008, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseTape");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseTape, Camper) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnLoseTape::Camper' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.Cosmetic_OnReceiveTape
// 0x0008 (0x0008 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_Cosmetic_OnReceiveTape final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnReceiveTape) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnReceiveTape");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnReceiveTape) == 0x000008, "Wrong size on OnryoSurvivorCosmeticHelperActor_Cosmetic_OnReceiveTape");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_Cosmetic_OnReceiveTape, Camper) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_Cosmetic_OnReceiveTape::Camper' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.OnSurvivorDisguisedOrUndisguised
// 0x0001 (0x0001 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised final
{
public:
	bool                                          IsDisguised;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised) == 0x000001, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised) == 0x000001, "Wrong size on OnryoSurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised, IsDisguised) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised::IsDisguised' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.GetCondemnedComponent
// 0x0008 (0x0008 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_GetCondemnedComponent final
{
public:
	class UCondemnedComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_GetCondemnedComponent) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_GetCondemnedComponent");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_GetCondemnedComponent) == 0x000008, "Wrong size on OnryoSurvivorCosmeticHelperActor_GetCondemnedComponent");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_GetCondemnedComponent, ReturnValue) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_GetCondemnedComponent::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoSurvivorCosmeticHelperActor.GetObjectState
// 0x0008 (0x0008 - 0x0000)
struct OnryoSurvivorCosmeticHelperActor_GetObjectState final
{
public:
	class UGameplayTagContainerComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoSurvivorCosmeticHelperActor_GetObjectState) == 0x000008, "Wrong alignment on OnryoSurvivorCosmeticHelperActor_GetObjectState");
static_assert(sizeof(OnryoSurvivorCosmeticHelperActor_GetObjectState) == 0x000008, "Wrong size on OnryoSurvivorCosmeticHelperActor_GetObjectState");
static_assert(offsetof(OnryoSurvivorCosmeticHelperActor_GetObjectState, ReturnValue) == 0x000000, "Member 'OnryoSurvivorCosmeticHelperActor_GetObjectState::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.Cosmetic_OnCamperCanInsertTapeChanged
// 0x0001 (0x0001 - 0x0000)
struct OnryoTelevision_Cosmetic_OnCamperCanInsertTapeChanged final
{
public:
	bool                                          CanInsertTape;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_Cosmetic_OnCamperCanInsertTapeChanged) == 0x000001, "Wrong alignment on OnryoTelevision_Cosmetic_OnCamperCanInsertTapeChanged");
static_assert(sizeof(OnryoTelevision_Cosmetic_OnCamperCanInsertTapeChanged) == 0x000001, "Wrong size on OnryoTelevision_Cosmetic_OnCamperCanInsertTapeChanged");
static_assert(offsetof(OnryoTelevision_Cosmetic_OnCamperCanInsertTapeChanged, CanInsertTape) == 0x000000, "Member 'OnryoTelevision_Cosmetic_OnCamperCanInsertTapeChanged::CanInsertTape' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.Cosmetic_OnPoweredOnVfxRadiusChanged
// 0x0004 (0x0004 - 0x0000)
struct OnryoTelevision_Cosmetic_OnPoweredOnVfxRadiusChanged final
{
public:
	float                                         NewPoweredOnVfxRadius;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_Cosmetic_OnPoweredOnVfxRadiusChanged) == 0x000004, "Wrong alignment on OnryoTelevision_Cosmetic_OnPoweredOnVfxRadiusChanged");
static_assert(sizeof(OnryoTelevision_Cosmetic_OnPoweredOnVfxRadiusChanged) == 0x000004, "Wrong size on OnryoTelevision_Cosmetic_OnPoweredOnVfxRadiusChanged");
static_assert(offsetof(OnryoTelevision_Cosmetic_OnPoweredOnVfxRadiusChanged, NewPoweredOnVfxRadius) == 0x000000, "Member 'OnryoTelevision_Cosmetic_OnPoweredOnVfxRadiusChanged::NewPoweredOnVfxRadius' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.Cosmetic_OnStatusEffectZoneVFXActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct OnryoTelevision_Cosmetic_OnStatusEffectZoneVFXActiveChanged final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_Cosmetic_OnStatusEffectZoneVFXActiveChanged) == 0x000001, "Wrong alignment on OnryoTelevision_Cosmetic_OnStatusEffectZoneVFXActiveChanged");
static_assert(sizeof(OnryoTelevision_Cosmetic_OnStatusEffectZoneVFXActiveChanged) == 0x000001, "Wrong size on OnryoTelevision_Cosmetic_OnStatusEffectZoneVFXActiveChanged");
static_assert(offsetof(OnryoTelevision_Cosmetic_OnStatusEffectZoneVFXActiveChanged, Active) == 0x000000, "Member 'OnryoTelevision_Cosmetic_OnStatusEffectZoneVFXActiveChanged::Active' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.Cosmetic_OnTelevisionCosmeticStateChanged
// 0x0002 (0x0002 - 0x0000)
struct OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged final
{
public:
	ETelevisionCosmeticState                      NextState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETelevisionCosmeticState                      PreviousState;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged) == 0x000001, "Wrong alignment on OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged");
static_assert(sizeof(OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged) == 0x000002, "Wrong size on OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged");
static_assert(offsetof(OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged, NextState) == 0x000000, "Member 'OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged::NextState' has a wrong offset!");
static_assert(offsetof(OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged, PreviousState) == 0x000001, "Member 'OnryoTelevision_Cosmetic_OnTelevisionCosmeticStateChanged::PreviousState' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.Cosmetic_OnTVSelectedByLocalSurvivor
// 0x0008 (0x0008 - 0x0000)
struct OnryoTelevision_Cosmetic_OnTVSelectedByLocalSurvivor final
{
public:
	class ADBDPlayer*                             Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_Cosmetic_OnTVSelectedByLocalSurvivor) == 0x000008, "Wrong alignment on OnryoTelevision_Cosmetic_OnTVSelectedByLocalSurvivor");
static_assert(sizeof(OnryoTelevision_Cosmetic_OnTVSelectedByLocalSurvivor) == 0x000008, "Wrong size on OnryoTelevision_Cosmetic_OnTVSelectedByLocalSurvivor");
static_assert(offsetof(OnryoTelevision_Cosmetic_OnTVSelectedByLocalSurvivor, Survivor) == 0x000000, "Member 'OnryoTelevision_Cosmetic_OnTVSelectedByLocalSurvivor::Survivor' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.Cosmetic_SetIsTeleportTarget
// 0x0001 (0x0001 - 0x0000)
struct OnryoTelevision_Cosmetic_SetIsTeleportTarget final
{
public:
	bool                                          Target;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_Cosmetic_SetIsTeleportTarget) == 0x000001, "Wrong alignment on OnryoTelevision_Cosmetic_SetIsTeleportTarget");
static_assert(sizeof(OnryoTelevision_Cosmetic_SetIsTeleportTarget) == 0x000001, "Wrong size on OnryoTelevision_Cosmetic_SetIsTeleportTarget");
static_assert(offsetof(OnryoTelevision_Cosmetic_SetIsTeleportTarget, Target) == 0x000000, "Member 'OnryoTelevision_Cosmetic_SetIsTeleportTarget::Target' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.Multicast_SetSurvivorCanInsertTape
// 0x0010 (0x0010 - 0x0000)
struct OnryoTelevision_Multicast_SetSurvivorCanInsertTape final
{
public:
	const class ADBDPlayer*                       Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanInsert;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowBubbleIndicator;                               // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnryoTelevision_Multicast_SetSurvivorCanInsertTape) == 0x000008, "Wrong alignment on OnryoTelevision_Multicast_SetSurvivorCanInsertTape");
static_assert(sizeof(OnryoTelevision_Multicast_SetSurvivorCanInsertTape) == 0x000010, "Wrong size on OnryoTelevision_Multicast_SetSurvivorCanInsertTape");
static_assert(offsetof(OnryoTelevision_Multicast_SetSurvivorCanInsertTape, Survivor) == 0x000000, "Member 'OnryoTelevision_Multicast_SetSurvivorCanInsertTape::Survivor' has a wrong offset!");
static_assert(offsetof(OnryoTelevision_Multicast_SetSurvivorCanInsertTape, CanInsert) == 0x000008, "Member 'OnryoTelevision_Multicast_SetSurvivorCanInsertTape::CanInsert' has a wrong offset!");
static_assert(offsetof(OnryoTelevision_Multicast_SetSurvivorCanInsertTape, ShowBubbleIndicator) == 0x000009, "Member 'OnryoTelevision_Multicast_SetSurvivorCanInsertTape::ShowBubbleIndicator' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct OnryoTelevision_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_OnKillerSet) == 0x000008, "Wrong alignment on OnryoTelevision_OnKillerSet");
static_assert(sizeof(OnryoTelevision_OnKillerSet) == 0x000008, "Wrong size on OnryoTelevision_OnKillerSet");
static_assert(offsetof(OnryoTelevision_OnKillerSet, Killer) == 0x000000, "Member 'OnryoTelevision_OnKillerSet::Killer' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.OnRep_IsPowered
// 0x0001 (0x0001 - 0x0000)
struct OnryoTelevision_OnRep_IsPowered final
{
public:
	bool                                          PreviousIsPowered;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_OnRep_IsPowered) == 0x000001, "Wrong alignment on OnryoTelevision_OnRep_IsPowered");
static_assert(sizeof(OnryoTelevision_OnRep_IsPowered) == 0x000001, "Wrong size on OnryoTelevision_OnRep_IsPowered");
static_assert(offsetof(OnryoTelevision_OnRep_IsPowered, PreviousIsPowered) == 0x000000, "Member 'OnryoTelevision_OnRep_IsPowered::PreviousIsPowered' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.GetTelevisionCosmeticState
// 0x0001 (0x0001 - 0x0000)
struct OnryoTelevision_GetTelevisionCosmeticState final
{
public:
	ETelevisionCosmeticState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_GetTelevisionCosmeticState) == 0x000001, "Wrong alignment on OnryoTelevision_GetTelevisionCosmeticState");
static_assert(sizeof(OnryoTelevision_GetTelevisionCosmeticState) == 0x000001, "Wrong size on OnryoTelevision_GetTelevisionCosmeticState");
static_assert(offsetof(OnryoTelevision_GetTelevisionCosmeticState, ReturnValue) == 0x000000, "Member 'OnryoTelevision_GetTelevisionCosmeticState::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoTelevision.IsAnySurvivorWithoutTapeNearby
// 0x0001 (0x0001 - 0x0000)
struct OnryoTelevision_IsAnySurvivorWithoutTapeNearby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTelevision_IsAnySurvivorWithoutTapeNearby) == 0x000001, "Wrong alignment on OnryoTelevision_IsAnySurvivorWithoutTapeNearby");
static_assert(sizeof(OnryoTelevision_IsAnySurvivorWithoutTapeNearby) == 0x000001, "Wrong size on OnryoTelevision_IsAnySurvivorWithoutTapeNearby");
static_assert(offsetof(OnryoTelevision_IsAnySurvivorWithoutTapeNearby, ReturnValue) == 0x000000, "Member 'OnryoTelevision_IsAnySurvivorWithoutTapeNearby::ReturnValue' has a wrong offset!");

// Function TheOnryo.OnryoUnmanifestCooldownInteraction.SetOnryoPower
// 0x0008 (0x0008 - 0x0000)
struct OnryoUnmanifestCooldownInteraction_SetOnryoPower final
{
public:
	class AOnryoPower*                            OnryoPower;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoUnmanifestCooldownInteraction_SetOnryoPower) == 0x000008, "Wrong alignment on OnryoUnmanifestCooldownInteraction_SetOnryoPower");
static_assert(sizeof(OnryoUnmanifestCooldownInteraction_SetOnryoPower) == 0x000008, "Wrong size on OnryoUnmanifestCooldownInteraction_SetOnryoPower");
static_assert(offsetof(OnryoUnmanifestCooldownInteraction_SetOnryoPower, OnryoPower) == 0x000000, "Member 'OnryoUnmanifestCooldownInteraction_SetOnryoPower::OnryoPower' has a wrong offset!");

// Function TheOnryo.OnryoVisibilityComponent.Multicast_OnManifestationStateChanged
// 0x0002 (0x0002 - 0x0000)
struct OnryoVisibilityComponent_Multicast_OnManifestationStateChanged final
{
public:
	bool                                          IsManifested;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmediateManifest;                               // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoVisibilityComponent_Multicast_OnManifestationStateChanged) == 0x000001, "Wrong alignment on OnryoVisibilityComponent_Multicast_OnManifestationStateChanged");
static_assert(sizeof(OnryoVisibilityComponent_Multicast_OnManifestationStateChanged) == 0x000002, "Wrong size on OnryoVisibilityComponent_Multicast_OnManifestationStateChanged");
static_assert(offsetof(OnryoVisibilityComponent_Multicast_OnManifestationStateChanged, IsManifested) == 0x000000, "Member 'OnryoVisibilityComponent_Multicast_OnManifestationStateChanged::IsManifested' has a wrong offset!");
static_assert(offsetof(OnryoVisibilityComponent_Multicast_OnManifestationStateChanged, IsImmediateManifest) == 0x000001, "Member 'OnryoVisibilityComponent_Multicast_OnManifestationStateChanged::IsImmediateManifest' has a wrong offset!");

// Function TheOnryo.OnryoVisibilityComponent.OnKillerInSurvivorSightRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct OnryoVisibilityComponent_OnKillerInSurvivorSightRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoVisibilityComponent_OnKillerInSurvivorSightRangeChanged) == 0x000001, "Wrong alignment on OnryoVisibilityComponent_OnKillerInSurvivorSightRangeChanged");
static_assert(sizeof(OnryoVisibilityComponent_OnKillerInSurvivorSightRangeChanged) == 0x000001, "Wrong size on OnryoVisibilityComponent_OnKillerInSurvivorSightRangeChanged");
static_assert(offsetof(OnryoVisibilityComponent_OnKillerInSurvivorSightRangeChanged, InRange) == 0x000000, "Member 'OnryoVisibilityComponent_OnKillerInSurvivorSightRangeChanged::InRange' has a wrong offset!");

// Function TheOnryo.OnryoTeleportTargeterComponent.Server_SetTeleportTarget
// 0x0008 (0x0008 - 0x0000)
struct OnryoTeleportTargeterComponent_Server_SetTeleportTarget final
{
public:
	class AOnryoTelevision*                       TV;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnryoTeleportTargeterComponent_Server_SetTeleportTarget) == 0x000008, "Wrong alignment on OnryoTeleportTargeterComponent_Server_SetTeleportTarget");
static_assert(sizeof(OnryoTeleportTargeterComponent_Server_SetTeleportTarget) == 0x000008, "Wrong size on OnryoTeleportTargeterComponent_Server_SetTeleportTarget");
static_assert(offsetof(OnryoTeleportTargeterComponent_Server_SetTeleportTarget, TV) == 0x000000, "Member 'OnryoTeleportTargeterComponent_Server_SetTeleportTarget::TV' has a wrong offset!");

// Function TheOnryo.UnmanifestInteraction.SetOnryoPower
// 0x0008 (0x0008 - 0x0000)
struct UnmanifestInteraction_SetOnryoPower final
{
public:
	class AOnryoPower*                            OnryoPower;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnmanifestInteraction_SetOnryoPower) == 0x000008, "Wrong alignment on UnmanifestInteraction_SetOnryoPower");
static_assert(sizeof(UnmanifestInteraction_SetOnryoPower) == 0x000008, "Wrong size on UnmanifestInteraction_SetOnryoPower");
static_assert(offsetof(UnmanifestInteraction_SetOnryoPower, OnryoPower) == 0x000000, "Member 'UnmanifestInteraction_SetOnryoPower::OnryoPower' has a wrong offset!");

}

