#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Projectile

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct Projectile.LaunchInfo
// 0x0038 (0x0038 - 0x0000)
struct FLaunchInfo final
{
public:
	struct FVector_NetQuantize                    StartPosition;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector_NetQuantizeNormal              Direction;                                         // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Speed;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLaunchInfo) == 0x000008, "Wrong alignment on FLaunchInfo");
static_assert(sizeof(FLaunchInfo) == 0x000038, "Wrong size on FLaunchInfo");
static_assert(offsetof(FLaunchInfo, StartPosition) == 0x000000, "Member 'FLaunchInfo::StartPosition' has a wrong offset!");
static_assert(offsetof(FLaunchInfo, Direction) == 0x000018, "Member 'FLaunchInfo::Direction' has a wrong offset!");
static_assert(offsetof(FLaunchInfo, Speed) == 0x000030, "Member 'FLaunchInfo::Speed' has a wrong offset!");

// ScriptStruct Projectile.ComponentSweepInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FComponentSweepInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComponentSweepInfo) == 0x000008, "Wrong alignment on FComponentSweepInfo");
static_assert(sizeof(FComponentSweepInfo) == 0x000020, "Wrong size on FComponentSweepInfo");

// ScriptStruct Projectile.ImpactInfo
// 0x0048 (0x0048 - 0x0000)
struct FImpactInfo final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpactNormal;                                      // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImpactInfo) == 0x000008, "Wrong alignment on FImpactInfo");
static_assert(sizeof(FImpactInfo) == 0x000048, "Wrong size on FImpactInfo");
static_assert(offsetof(FImpactInfo, Position) == 0x000000, "Member 'FImpactInfo::Position' has a wrong offset!");
static_assert(offsetof(FImpactInfo, Actor) == 0x000018, "Member 'FImpactInfo::Actor' has a wrong offset!");
static_assert(offsetof(FImpactInfo, Component) == 0x000020, "Member 'FImpactInfo::Component' has a wrong offset!");
static_assert(offsetof(FImpactInfo, SurfaceType) == 0x000028, "Member 'FImpactInfo::SurfaceType' has a wrong offset!");
static_assert(offsetof(FImpactInfo, ImpactNormal) == 0x000030, "Member 'FImpactInfo::ImpactNormal' has a wrong offset!");

}

