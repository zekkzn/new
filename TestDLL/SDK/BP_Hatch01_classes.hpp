#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Hatch01

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Hatch01.BP_Hatch01_C
// 0x00E0 (0x0528 - 0x0448)
class ABP_Hatch01_C final : public AHatch
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0448(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDBDSkeletalMeshComponentBudgeted*      Hatch;                                             // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOpenHatchInterrupt_C*                  OpenHatchInterrupt;                                // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChargeableComponent*                   OpenHatchChargeable;                               // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OpenHatchInteraction_C*             BP_OpenHatchInteraction;                           // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BaseCollision;                                     // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxForPlagueVomitDecal;                            // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCloseHatch_C*                          CloseHatch;                                        // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGameEventListenerCollectionComponent*  GameEventListenerCollection;                       // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMontagePlayer*                         MontagePlayer;                                     // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAnimationMontageSlave*                 AnimationMontageSlave;                             // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDBDOutlineComponent*                   DBDOutline;                                        // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHatchOutlineUpdateStrategy*            HatchOutlineUpdateStrategy;                        // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMapActorComponent*                     MapActor;                                          // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HatchCenter;                                       // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TrapBlocker;                                       // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EscapeFocalPoint;                                  // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractor*                            MainInteractor;                                    // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEscapeThroughHatch_C*                  EscapeThroughHatch;                                // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       EscapeZone;                                        // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialHelper*                        MaterialHelper;                                    // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ItemDestructor;                                    // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          MapActorPrimitive;                                 // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Hatch;                                           // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak_Audio_Hatch;                                    // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractorZone;                                    // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Interaction;                                       // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetTimer(double Delay);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnHatchStateModified(EHatchState OldState, EHatchState NewState);
	void FXOpenHatch();
	void FXEndSmoke();
	void FXCloseHatch();
	void ExecuteUbergraph_BP_Hatch01(int32 EntryPoint);
	void ChangeVisibility(EHatchState NewState);
	void Authority_DestroyOverlappingItems();

	bool IsInterruptionPossible(const class ADBDPlayer* Interruptor, const class ADBDPlayer* Interruptee, const class UInteractor* Interactor, const class UInteractionDefinition* Definition, const class UInterruptionDefinition* Interruption) const;
	class USceneComponent* GetHatchCenter() const;
	void GetGameState(class ADBDGameState** AsDBDGame_State) const;
	void GetGameInstance(class UDBDGameInstance** AsDBDGame_Instance) const;
	class USceneComponent* GetEscapeFocalPoint() const;
	class UAnimationMontageSlave* GetAnimationMontageSlave() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Hatch01_C">();
	}
	static class ABP_Hatch01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Hatch01_C>();
	}
};
static_assert(alignof(ABP_Hatch01_C) == 0x000008, "Wrong alignment on ABP_Hatch01_C");
static_assert(sizeof(ABP_Hatch01_C) == 0x000528, "Wrong size on ABP_Hatch01_C");
static_assert(offsetof(ABP_Hatch01_C, UberGraphFrame) == 0x000448, "Member 'ABP_Hatch01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, Hatch) == 0x000450, "Member 'ABP_Hatch01_C::Hatch' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, OpenHatchInterrupt) == 0x000458, "Member 'ABP_Hatch01_C::OpenHatchInterrupt' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, OpenHatchChargeable) == 0x000460, "Member 'ABP_Hatch01_C::OpenHatchChargeable' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, BP_OpenHatchInteraction) == 0x000468, "Member 'ABP_Hatch01_C::BP_OpenHatchInteraction' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, BaseCollision) == 0x000470, "Member 'ABP_Hatch01_C::BaseCollision' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, BoxForPlagueVomitDecal) == 0x000478, "Member 'ABP_Hatch01_C::BoxForPlagueVomitDecal' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, CloseHatch) == 0x000480, "Member 'ABP_Hatch01_C::CloseHatch' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, GameEventListenerCollection) == 0x000488, "Member 'ABP_Hatch01_C::GameEventListenerCollection' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, MontagePlayer) == 0x000490, "Member 'ABP_Hatch01_C::MontagePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, AnimationMontageSlave) == 0x000498, "Member 'ABP_Hatch01_C::AnimationMontageSlave' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, DBDOutline) == 0x0004A0, "Member 'ABP_Hatch01_C::DBDOutline' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, HatchOutlineUpdateStrategy) == 0x0004A8, "Member 'ABP_Hatch01_C::HatchOutlineUpdateStrategy' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, MapActor) == 0x0004B0, "Member 'ABP_Hatch01_C::MapActor' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, HatchCenter) == 0x0004B8, "Member 'ABP_Hatch01_C::HatchCenter' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, TrapBlocker) == 0x0004C0, "Member 'ABP_Hatch01_C::TrapBlocker' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, EscapeFocalPoint) == 0x0004C8, "Member 'ABP_Hatch01_C::EscapeFocalPoint' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, MainInteractor) == 0x0004D0, "Member 'ABP_Hatch01_C::MainInteractor' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, EscapeThroughHatch) == 0x0004D8, "Member 'ABP_Hatch01_C::EscapeThroughHatch' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, EscapeZone) == 0x0004E0, "Member 'ABP_Hatch01_C::EscapeZone' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, MaterialHelper) == 0x0004E8, "Member 'ABP_Hatch01_C::MaterialHelper' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, Decal) == 0x0004F0, "Member 'ABP_Hatch01_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, ItemDestructor) == 0x0004F8, "Member 'ABP_Hatch01_C::ItemDestructor' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, MapActorPrimitive) == 0x000500, "Member 'ABP_Hatch01_C::MapActorPrimitive' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, P_Hatch) == 0x000508, "Member 'ABP_Hatch01_C::P_Hatch' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, Ak_Audio_Hatch) == 0x000510, "Member 'ABP_Hatch01_C::Ak_Audio_Hatch' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, InteractorZone) == 0x000518, "Member 'ABP_Hatch01_C::InteractorZone' has a wrong offset!");
static_assert(offsetof(ABP_Hatch01_C, Interaction) == 0x000520, "Member 'ABP_Hatch01_C::Interaction' has a wrong offset!");

}

