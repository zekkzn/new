#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "Engine_classes.hpp"
#include "Halloween_structs.hpp"
#include "DBDInteraction_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class Halloween.VoidEnergyChangeQEEvaluator
// 0x0010 (0x00B8 - 0x00A8)
class UVoidEnergyChangeQEEvaluator : public UQuestEventEvaluatorBase
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ListenToOnComponentAddedEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyChangeQEEvaluator">();
	}
	static class UVoidEnergyChangeQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyChangeQEEvaluator>();
	}
};
static_assert(alignof(UVoidEnergyChangeQEEvaluator) == 0x000008, "Wrong alignment on UVoidEnergyChangeQEEvaluator");
static_assert(sizeof(UVoidEnergyChangeQEEvaluator) == 0x0000B8, "Wrong size on UVoidEnergyChangeQEEvaluator");

// Class Halloween.DepositEnergyInMatchQEEvaluator
// 0x0000 (0x00B8 - 0x00B8)
class UDepositEnergyInMatchQEEvaluator : public UVoidEnergyChangeQEEvaluator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DepositEnergyInMatchQEEvaluator">();
	}
	static class UDepositEnergyInMatchQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDepositEnergyInMatchQEEvaluator>();
	}
};
static_assert(alignof(UDepositEnergyInMatchQEEvaluator) == 0x000008, "Wrong alignment on UDepositEnergyInMatchQEEvaluator");
static_assert(sizeof(UDepositEnergyInMatchQEEvaluator) == 0x0000B8, "Wrong size on UDepositEnergyInMatchQEEvaluator");

// Class Halloween.DepositVoidEnergyBySpecifiedReasonQEEvaluator
// 0x0008 (0x00C0 - 0x00B8)
class UDepositVoidEnergyBySpecifiedReasonQEEvaluator final : public UDepositEnergyInMatchQEEvaluator
{
public:
	EVoidEnergyChangeReason                       _changeReason;                                     // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DepositVoidEnergyBySpecifiedReasonQEEvaluator">();
	}
	static class UDepositVoidEnergyBySpecifiedReasonQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDepositVoidEnergyBySpecifiedReasonQEEvaluator>();
	}
};
static_assert(alignof(UDepositVoidEnergyBySpecifiedReasonQEEvaluator) == 0x000008, "Wrong alignment on UDepositVoidEnergyBySpecifiedReasonQEEvaluator");
static_assert(sizeof(UDepositVoidEnergyBySpecifiedReasonQEEvaluator) == 0x0000C0, "Wrong size on UDepositVoidEnergyBySpecifiedReasonQEEvaluator");
static_assert(offsetof(UDepositVoidEnergyBySpecifiedReasonQEEvaluator, _changeReason) == 0x0000B8, "Member 'UDepositVoidEnergyBySpecifiedReasonQEEvaluator::_changeReason' has a wrong offset!");

// Class Halloween.DepositVoidEnergyInteraction
// 0x00A0 (0x0960 - 0x08C0)
class UDepositVoidEnergyInteraction : public UChargeableInteractionDefinition
{
public:
	struct FDBDTunableRowHandle                   _timeBetweenOrbSpawns;                             // 0x08C0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _amountToChargePerTimePeriod;                      // 0x08E8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EVoidEnergyChangeReason                       _voidEnergyChangeReason;                           // 0x0910(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_911[0x3];                                      // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _heightOffsetForOrbsSpawnPosition;                 // 0x0914(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _heightOffsetForOrbsFinalPosition;                 // 0x0918(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91C[0x38];                                     // 0x091C(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _animationInteractionTime;                         // 0x0954(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_958[0x8];                                      // 0x0958(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DepositVoidEnergyInteraction">();
	}
	static class UDepositVoidEnergyInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDepositVoidEnergyInteraction>();
	}
};
static_assert(alignof(UDepositVoidEnergyInteraction) == 0x000010, "Wrong alignment on UDepositVoidEnergyInteraction");
static_assert(sizeof(UDepositVoidEnergyInteraction) == 0x000960, "Wrong size on UDepositVoidEnergyInteraction");
static_assert(offsetof(UDepositVoidEnergyInteraction, _timeBetweenOrbSpawns) == 0x0008C0, "Member 'UDepositVoidEnergyInteraction::_timeBetweenOrbSpawns' has a wrong offset!");
static_assert(offsetof(UDepositVoidEnergyInteraction, _amountToChargePerTimePeriod) == 0x0008E8, "Member 'UDepositVoidEnergyInteraction::_amountToChargePerTimePeriod' has a wrong offset!");
static_assert(offsetof(UDepositVoidEnergyInteraction, _voidEnergyChangeReason) == 0x000910, "Member 'UDepositVoidEnergyInteraction::_voidEnergyChangeReason' has a wrong offset!");
static_assert(offsetof(UDepositVoidEnergyInteraction, _heightOffsetForOrbsSpawnPosition) == 0x000914, "Member 'UDepositVoidEnergyInteraction::_heightOffsetForOrbsSpawnPosition' has a wrong offset!");
static_assert(offsetof(UDepositVoidEnergyInteraction, _heightOffsetForOrbsFinalPosition) == 0x000918, "Member 'UDepositVoidEnergyInteraction::_heightOffsetForOrbsFinalPosition' has a wrong offset!");
static_assert(offsetof(UDepositVoidEnergyInteraction, _animationInteractionTime) == 0x000954, "Member 'UDepositVoidEnergyInteraction::_animationInteractionTime' has a wrong offset!");

// Class Halloween.DepositVoidEnergyTierQEEvaluator
// 0x0008 (0x00B0 - 0x00A8)
class UDepositVoidEnergyTierQEEvaluator final : public UQuestEventEvaluatorBase
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnVoidEnergyDeposited(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DepositVoidEnergyTierQEEvaluator">();
	}
	static class UDepositVoidEnergyTierQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDepositVoidEnergyTierQEEvaluator>();
	}
};
static_assert(alignof(UDepositVoidEnergyTierQEEvaluator) == 0x000008, "Wrong alignment on UDepositVoidEnergyTierQEEvaluator");
static_assert(sizeof(UDepositVoidEnergyTierQEEvaluator) == 0x0000B0, "Wrong size on UDepositVoidEnergyTierQEEvaluator");

// Class Halloween.FloatingVoidEnergyOrb
// 0x01C8 (0x0270 - 0x00A8)
class UFloatingVoidEnergyOrb final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             Cosmetic_OnOrbStartMoving;                         // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             Cosmetic_OnOrbReachPlayer;                         // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x20];                                      // 0x00C8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _characterBoneName;                                // 0x00E8(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _travelTimeToPlayer;                               // 0x00F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _voidEnergyToGrantPlayer;                          // 0x0120(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _trackerRadius;                                    // 0x0148(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToWaitBeforeRespawnOrb;                       // 0x0170(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToWaitBeforeRespawnOrbInVoid;                 // 0x0198(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _autoCollectorRadius;                              // 0x01C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x10];                                     // 0x01E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class URespawnableComponent*                  _respawnableComponent;                             // 0x01F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x70];                                     // 0x0200(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnDespawn();
	void Authority_OnPlayerEnterZone(class ADBDPlayer* PlayerToTravelTo);
	void Authority_OnPlayerExitZone(class ADBDPlayer* Player);
	void Authority_OnRespawn();
	void Authority_OnTravelTimeEnd();
	void Multicast_OnReachedPlayer();
	void Multicast_StartTravelToPlayer(class ADBDPlayer* PlayerToTravelTo);
	void OnPlayerInteract__DelegateSignature(class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatingVoidEnergyOrb">();
	}
	static class UFloatingVoidEnergyOrb* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatingVoidEnergyOrb>();
	}
};
static_assert(alignof(UFloatingVoidEnergyOrb) == 0x000008, "Wrong alignment on UFloatingVoidEnergyOrb");
static_assert(sizeof(UFloatingVoidEnergyOrb) == 0x000270, "Wrong size on UFloatingVoidEnergyOrb");
static_assert(offsetof(UFloatingVoidEnergyOrb, Cosmetic_OnOrbStartMoving) == 0x0000A8, "Member 'UFloatingVoidEnergyOrb::Cosmetic_OnOrbStartMoving' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, Cosmetic_OnOrbReachPlayer) == 0x0000B8, "Member 'UFloatingVoidEnergyOrb::Cosmetic_OnOrbReachPlayer' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _characterBoneName) == 0x0000E8, "Member 'UFloatingVoidEnergyOrb::_characterBoneName' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _travelTimeToPlayer) == 0x0000F8, "Member 'UFloatingVoidEnergyOrb::_travelTimeToPlayer' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _voidEnergyToGrantPlayer) == 0x000120, "Member 'UFloatingVoidEnergyOrb::_voidEnergyToGrantPlayer' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _trackerRadius) == 0x000148, "Member 'UFloatingVoidEnergyOrb::_trackerRadius' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _timeToWaitBeforeRespawnOrb) == 0x000170, "Member 'UFloatingVoidEnergyOrb::_timeToWaitBeforeRespawnOrb' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _timeToWaitBeforeRespawnOrbInVoid) == 0x000198, "Member 'UFloatingVoidEnergyOrb::_timeToWaitBeforeRespawnOrbInVoid' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _autoCollectorRadius) == 0x0001C0, "Member 'UFloatingVoidEnergyOrb::_autoCollectorRadius' has a wrong offset!");
static_assert(offsetof(UFloatingVoidEnergyOrb, _respawnableComponent) == 0x0001F8, "Member 'UFloatingVoidEnergyOrb::_respawnableComponent' has a wrong offset!");

// Class Halloween.HalloweenCentrifugeAnimInstance
// 0x0040 (0x0390 - 0x0350)
class UHalloweenCentrifugeAnimInstance : public UAnimInstance
{
public:
	bool                                          _isActive;                                         // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _blendSpaceValue;                                  // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _timeToChangeBlendValue;                           // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x34];                                     // 0x035C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBlendValueChanged(const float blendValue);
	void OnEnergySpawned(int32 PreviousEnergy, int32 CurrentEnergy);
	void SetDesiredBlendValue(const float blendValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenCentrifugeAnimInstance">();
	}
	static class UHalloweenCentrifugeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenCentrifugeAnimInstance>();
	}
};
static_assert(alignof(UHalloweenCentrifugeAnimInstance) == 0x000010, "Wrong alignment on UHalloweenCentrifugeAnimInstance");
static_assert(sizeof(UHalloweenCentrifugeAnimInstance) == 0x000390, "Wrong size on UHalloweenCentrifugeAnimInstance");
static_assert(offsetof(UHalloweenCentrifugeAnimInstance, _isActive) == 0x000350, "Member 'UHalloweenCentrifugeAnimInstance::_isActive' has a wrong offset!");
static_assert(offsetof(UHalloweenCentrifugeAnimInstance, _blendSpaceValue) == 0x000354, "Member 'UHalloweenCentrifugeAnimInstance::_blendSpaceValue' has a wrong offset!");
static_assert(offsetof(UHalloweenCentrifugeAnimInstance, _timeToChangeBlendValue) == 0x000358, "Member 'UHalloweenCentrifugeAnimInstance::_timeToChangeBlendValue' has a wrong offset!");

// Class Halloween.GeneratorCentrifugeAnimInstance
// 0x0000 (0x0390 - 0x0390)
class UGeneratorCentrifugeAnimInstance final : public UHalloweenCentrifugeAnimInstance
{
public:
	void OnStartRepair(class AGenerator* Generator);
	void OnStopRepair(class AGenerator* Generator);
	void StartRepairing(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);
	void StopRepairing(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneratorCentrifugeAnimInstance">();
	}
	static class UGeneratorCentrifugeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneratorCentrifugeAnimInstance>();
	}
};
static_assert(alignof(UGeneratorCentrifugeAnimInstance) == 0x000010, "Wrong alignment on UGeneratorCentrifugeAnimInstance");
static_assert(sizeof(UGeneratorCentrifugeAnimInstance) == 0x000390, "Wrong size on UGeneratorCentrifugeAnimInstance");

// Class Halloween.HalloweenEventComponent
// 0x0088 (0x0130 - 0x00A8)
class UHalloweenEventComponent final : public UActorComponent
{
public:
	TSubclassOf<class AActor>                     _voidWorldTeleporterBP;                            // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UVoidZonePlayerComponent>   _voidZonePlayerComponentClass;                     // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class USpawnHauntProjectileInteraction> _spawnHauntProjectileClass;                        // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UHauntProjectilePlayerInventoryComponent> _hauntProjectilePlayerInventoryComponentClass;     // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class USpecialEventVFXHelperComponent> _vfxHelperComponent;                               // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UActorComponent>            _eventCheatComponentClass;                         // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AUnstableRift*>                  _unstableRifts;                                    // 0x00D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         _voidWorldTeleporterActors;                        // 0x00E8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class ADBDPlayer*>                     _playersInVoid;                                    // 0x00F8(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class ADBDPlayer*>                     _previousPlayersInVoidZone;                        // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayerTrackerComponent*           _localPlayerTracker;                               // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnLevelReadyToPlay();
	void Authority_PlayerPreTeleportInToVoidZone(class ADBDPlayer* PlayerTeleported);
	void Authority_PlayerPreTeleportOutOfVoidZone(class ADBDPlayer* PlayerTeleported);
	void Authority_PlayerTeleportedInToVoidZone(class ADBDPlayer* PlayerTeleported, class ULinkedTeleporterComponent* TeleporterUsed);
	void Authority_PlayerTeleportedOutOfVoidZone(class ADBDPlayer* PlayerTeleported);
	void Authority_TurnAllRiftsIntoTeleporters(bool TurnOnTeleporters);
	void Cosmetic_OnPlayerTeleported(class ADBDPlayer* PlayerTeleported, bool TeleportIntoVoid);
	void OnRep_PlayersInVoid();
	void OnRep_VoidWorldTeleporterActors();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenEventComponent">();
	}
	static class UHalloweenEventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenEventComponent>();
	}
};
static_assert(alignof(UHalloweenEventComponent) == 0x000008, "Wrong alignment on UHalloweenEventComponent");
static_assert(sizeof(UHalloweenEventComponent) == 0x000130, "Wrong size on UHalloweenEventComponent");
static_assert(offsetof(UHalloweenEventComponent, _voidWorldTeleporterBP) == 0x0000A8, "Member 'UHalloweenEventComponent::_voidWorldTeleporterBP' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _voidZonePlayerComponentClass) == 0x0000B0, "Member 'UHalloweenEventComponent::_voidZonePlayerComponentClass' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _spawnHauntProjectileClass) == 0x0000B8, "Member 'UHalloweenEventComponent::_spawnHauntProjectileClass' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _hauntProjectilePlayerInventoryComponentClass) == 0x0000C0, "Member 'UHalloweenEventComponent::_hauntProjectilePlayerInventoryComponentClass' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _vfxHelperComponent) == 0x0000C8, "Member 'UHalloweenEventComponent::_vfxHelperComponent' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _eventCheatComponentClass) == 0x0000D0, "Member 'UHalloweenEventComponent::_eventCheatComponentClass' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _unstableRifts) == 0x0000D8, "Member 'UHalloweenEventComponent::_unstableRifts' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _voidWorldTeleporterActors) == 0x0000E8, "Member 'UHalloweenEventComponent::_voidWorldTeleporterActors' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _playersInVoid) == 0x0000F8, "Member 'UHalloweenEventComponent::_playersInVoid' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _previousPlayersInVoidZone) == 0x000108, "Member 'UHalloweenEventComponent::_previousPlayersInVoidZone' has a wrong offset!");
static_assert(offsetof(UHalloweenEventComponent, _localPlayerTracker) == 0x000128, "Member 'UHalloweenEventComponent::_localPlayerTracker' has a wrong offset!");

// Class Halloween.HalloweenHauntAnimInstance
// 0x0010 (0x0360 - 0x0350)
class UHalloweenHauntAnimInstance final : public UAnimInstance
{
public:
	bool                                          _hauntTraveling;                                   // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hauntAttackingPlayer;                             // 0x0351(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hauntHitCollision;                                // 0x0352(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hauntStartingDisappear;                           // 0x0353(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_354[0xC];                                      // 0x0354(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHauntAppear();
	void OnHauntDisappearStart();
	void OnHauntHitPlayer(class ADBDPlayer* HitPlayer);
	void OnHitCollision();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenHauntAnimInstance">();
	}
	static class UHalloweenHauntAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenHauntAnimInstance>();
	}
};
static_assert(alignof(UHalloweenHauntAnimInstance) == 0x000010, "Wrong alignment on UHalloweenHauntAnimInstance");
static_assert(sizeof(UHalloweenHauntAnimInstance) == 0x000360, "Wrong size on UHalloweenHauntAnimInstance");
static_assert(offsetof(UHalloweenHauntAnimInstance, _hauntTraveling) == 0x000350, "Member 'UHalloweenHauntAnimInstance::_hauntTraveling' has a wrong offset!");
static_assert(offsetof(UHalloweenHauntAnimInstance, _hauntAttackingPlayer) == 0x000351, "Member 'UHalloweenHauntAnimInstance::_hauntAttackingPlayer' has a wrong offset!");
static_assert(offsetof(UHalloweenHauntAnimInstance, _hauntHitCollision) == 0x000352, "Member 'UHalloweenHauntAnimInstance::_hauntHitCollision' has a wrong offset!");
static_assert(offsetof(UHalloweenHauntAnimInstance, _hauntStartingDisappear) == 0x000353, "Member 'UHalloweenHauntAnimInstance::_hauntStartingDisappear' has a wrong offset!");

// Class Halloween.HalloweenHauntProjectile
// 0x0250 (0x04F0 - 0x02A0)
class AHalloweenHauntProjectile final : public AActor
{
public:
	uint8                                         Pad_2A0[0x80];                                     // 0x02A0(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 _skeletalMesh;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      _worldCollider;                                    // 0x0328(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      _playerCollider;                                   // 0x0330(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _travelingMovementCurve;                           // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _unitsToSpawnAboveGround;                          // 0x0348(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _unitsToSpawnInFrontOfKiller;                      // 0x0370(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maximumTravelSpeed;                               // 0x0398(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _totalTravelTime;                                  // 0x03C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _screamRangeForSurvivors;                          // 0x03E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_410[0x8];                                      // 0x0410(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _tagsPreventingPlayerHit;                          // 0x0418(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class AActor>>             _actorsToIgnore;                                   // 0x0438(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<class ABaseProjectile*>                  _cachedProjectilesInGame;                          // 0x0448(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_498[0x18];                                     // 0x0498(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAuthoritativePoolableActorComponent*   _poolableComponent;                                // 0x04B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B8[0x4];                                      // 0x04B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _timeToDisappear;                                  // 0x04BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C0[0x30];                                     // 0x04C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnCollisionOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
	void Cosmetic_OnCollisionHit(class AActor* ActorHit);
	void Cosmetic_OnDisappear();
	void Cosmetic_OnLaunch();
	void Cosmetic_OnPlayerHit(class ADBDPlayer* PlayerHit);
	void Multicast_LaunchHaunt();
	void Multicast_OnActorHit(class AActor* ActorHit);
	void Multicast_OnPlayerHit(class ADBDPlayer* PlayerHit);
	void Multicast_SetLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation);
	void Multicast_StartDisappearHaunt();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenHauntProjectile">();
	}
	static class AHalloweenHauntProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHalloweenHauntProjectile>();
	}
};
static_assert(alignof(AHalloweenHauntProjectile) == 0x000008, "Wrong alignment on AHalloweenHauntProjectile");
static_assert(sizeof(AHalloweenHauntProjectile) == 0x0004F0, "Wrong size on AHalloweenHauntProjectile");
static_assert(offsetof(AHalloweenHauntProjectile, _skeletalMesh) == 0x000320, "Member 'AHalloweenHauntProjectile::_skeletalMesh' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _worldCollider) == 0x000328, "Member 'AHalloweenHauntProjectile::_worldCollider' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _playerCollider) == 0x000330, "Member 'AHalloweenHauntProjectile::_playerCollider' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _travelingMovementCurve) == 0x000338, "Member 'AHalloweenHauntProjectile::_travelingMovementCurve' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _unitsToSpawnAboveGround) == 0x000348, "Member 'AHalloweenHauntProjectile::_unitsToSpawnAboveGround' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _unitsToSpawnInFrontOfKiller) == 0x000370, "Member 'AHalloweenHauntProjectile::_unitsToSpawnInFrontOfKiller' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _maximumTravelSpeed) == 0x000398, "Member 'AHalloweenHauntProjectile::_maximumTravelSpeed' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _totalTravelTime) == 0x0003C0, "Member 'AHalloweenHauntProjectile::_totalTravelTime' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _screamRangeForSurvivors) == 0x0003E8, "Member 'AHalloweenHauntProjectile::_screamRangeForSurvivors' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _tagsPreventingPlayerHit) == 0x000418, "Member 'AHalloweenHauntProjectile::_tagsPreventingPlayerHit' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _actorsToIgnore) == 0x000438, "Member 'AHalloweenHauntProjectile::_actorsToIgnore' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _cachedProjectilesInGame) == 0x000448, "Member 'AHalloweenHauntProjectile::_cachedProjectilesInGame' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _poolableComponent) == 0x0004B0, "Member 'AHalloweenHauntProjectile::_poolableComponent' has a wrong offset!");
static_assert(offsetof(AHalloweenHauntProjectile, _timeToDisappear) == 0x0004BC, "Member 'AHalloweenHauntProjectile::_timeToDisappear' has a wrong offset!");

// Class Halloween.HalloweenPumpkinInteraction
// 0x0010 (0x08D0 - 0x08C0)
class UHalloweenPumpkinInteraction final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_8C0[0x10];                                     // 0x08C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenPumpkinInteraction">();
	}
	static class UHalloweenPumpkinInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenPumpkinInteraction>();
	}
};
static_assert(alignof(UHalloweenPumpkinInteraction) == 0x000010, "Wrong alignment on UHalloweenPumpkinInteraction");
static_assert(sizeof(UHalloweenPumpkinInteraction) == 0x0008D0, "Wrong size on UHalloweenPumpkinInteraction");

// Class Halloween.HalloweenTeleporterInteraction
// 0x0000 (0x08C0 - 0x08C0)
class UHalloweenTeleporterInteraction final : public UChargeableInteractionDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenTeleporterInteraction">();
	}
	static class UHalloweenTeleporterInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenTeleporterInteraction>();
	}
};
static_assert(alignof(UHalloweenTeleporterInteraction) == 0x000010, "Wrong alignment on UHalloweenTeleporterInteraction");
static_assert(sizeof(UHalloweenTeleporterInteraction) == 0x0008C0, "Wrong size on UHalloweenTeleporterInteraction");

// Class Halloween.HalloweenVoidHookSurvivorDefinition
// 0x0060 (0x0960 - 0x0900)
class UHalloweenVoidHookSurvivorDefinition final : public UHookSurvivorDefinition
{
public:
	FMulticastInlineDelegateProperty_             Cosmetic_OnPlayerHooked;                           // 0x0900(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             Cosmetic_OnPlayerTeleported;                       // 0x0910(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	float                                         _animationDuration;                                // 0x0920(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_924[0x3C];                                     // 0x0924(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_SetPlayerOnStandardHook(class ACamperPlayer* Player);
	void Multicast_OnPlayerMovedToStandardHook(class ACamperPlayer* Player, class AMeatHook* ClosestMeatHook);
	void Multicast_PlacePlayerOnHook(class ACamperPlayer* SurvivorBeingHooked);
	void OnHookEvent__DelegateSignature(class ACamperPlayer* Survivor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenVoidHookSurvivorDefinition">();
	}
	static class UHalloweenVoidHookSurvivorDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenVoidHookSurvivorDefinition>();
	}
};
static_assert(alignof(UHalloweenVoidHookSurvivorDefinition) == 0x000010, "Wrong alignment on UHalloweenVoidHookSurvivorDefinition");
static_assert(sizeof(UHalloweenVoidHookSurvivorDefinition) == 0x000960, "Wrong size on UHalloweenVoidHookSurvivorDefinition");
static_assert(offsetof(UHalloweenVoidHookSurvivorDefinition, Cosmetic_OnPlayerHooked) == 0x000900, "Member 'UHalloweenVoidHookSurvivorDefinition::Cosmetic_OnPlayerHooked' has a wrong offset!");
static_assert(offsetof(UHalloweenVoidHookSurvivorDefinition, Cosmetic_OnPlayerTeleported) == 0x000910, "Member 'UHalloweenVoidHookSurvivorDefinition::Cosmetic_OnPlayerTeleported' has a wrong offset!");
static_assert(offsetof(UHalloweenVoidHookSurvivorDefinition, _animationDuration) == 0x000920, "Member 'UHalloweenVoidHookSurvivorDefinition::_animationDuration' has a wrong offset!");

// Class Halloween.HalloweenVoidTile
// 0x0030 (0x0490 - 0x0460)
class AHalloweenVoidTile final : public ATile
{
public:
	TArray<class USceneComponent*>                _teleporterSpawnLocations;                         // 0x0460(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>                _hauntSpawnPoints;                                 // 0x0470(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>                _decorationObjects;                                // 0x0480(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenVoidTile">();
	}
	static class AHalloweenVoidTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHalloweenVoidTile>();
	}
};
static_assert(alignof(AHalloweenVoidTile) == 0x000008, "Wrong alignment on AHalloweenVoidTile");
static_assert(sizeof(AHalloweenVoidTile) == 0x000490, "Wrong size on AHalloweenVoidTile");
static_assert(offsetof(AHalloweenVoidTile, _teleporterSpawnLocations) == 0x000460, "Member 'AHalloweenVoidTile::_teleporterSpawnLocations' has a wrong offset!");
static_assert(offsetof(AHalloweenVoidTile, _hauntSpawnPoints) == 0x000470, "Member 'AHalloweenVoidTile::_hauntSpawnPoints' has a wrong offset!");
static_assert(offsetof(AHalloweenVoidTile, _decorationObjects) == 0x000480, "Member 'AHalloweenVoidTile::_decorationObjects' has a wrong offset!");

// Class Halloween.HauntProjectilePlayerInventoryComponent
// 0x0078 (0x0120 - 0x00A8)
class UHauntProjectilePlayerInventoryComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _currentHauntCount;                                // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _hauntsToAddAtATime;                               // 0x00C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxHauntsCanHold;                                 // 0x00F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UAuthoritativeActorPoolComponent*       _hauntPool;                                        // 0x0118(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnHauntCountChange(int32 HauntCount);
	void OnRep_CurrentHauntCount(int32 PreviousHauntCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HauntProjectilePlayerInventoryComponent">();
	}
	static class UHauntProjectilePlayerInventoryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHauntProjectilePlayerInventoryComponent>();
	}
};
static_assert(alignof(UHauntProjectilePlayerInventoryComponent) == 0x000008, "Wrong alignment on UHauntProjectilePlayerInventoryComponent");
static_assert(sizeof(UHauntProjectilePlayerInventoryComponent) == 0x000120, "Wrong size on UHauntProjectilePlayerInventoryComponent");
static_assert(offsetof(UHauntProjectilePlayerInventoryComponent, _currentHauntCount) == 0x0000C0, "Member 'UHauntProjectilePlayerInventoryComponent::_currentHauntCount' has a wrong offset!");
static_assert(offsetof(UHauntProjectilePlayerInventoryComponent, _hauntsToAddAtATime) == 0x0000C8, "Member 'UHauntProjectilePlayerInventoryComponent::_hauntsToAddAtATime' has a wrong offset!");
static_assert(offsetof(UHauntProjectilePlayerInventoryComponent, _maxHauntsCanHold) == 0x0000F0, "Member 'UHauntProjectilePlayerInventoryComponent::_maxHauntsCanHold' has a wrong offset!");
static_assert(offsetof(UHauntProjectilePlayerInventoryComponent, _hauntPool) == 0x000118, "Member 'UHauntProjectilePlayerInventoryComponent::_hauntPool' has a wrong offset!");

// Class Halloween.LinkedTeleporterComponent
// 0x0130 (0x01D8 - 0x00A8)
class ULinkedTeleporterComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x30];                                      // 0x00A8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Cosmetic_OnTeleporterEnabled;                      // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             Cosmetic_OnPlayerTeleported;                       // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             Cosmetic_OnPlayerCooldownOver;                     // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class ULinkedTeleporterComponent*             _linkedTeleporter;                                 // 0x0108(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isAllowedToTeleport;                              // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_111[0x67];                                     // 0x0111(0x0067)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _teleportationCooldownTime;                        // 0x0178(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayTag>                   _survivorTagsPreventingTeleport;                   // 0x01A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayTag>                   _killerTagsPreventingTeleport;                     // 0x01B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          _forceCamperDropSpecialItemOnTeleport;             // 0x01C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C1[0x17];                                     // 0x01C1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_TeleportPlayer(class ADBDPlayer* Player, const struct FVector& TeleportLocation);
	void OnLevelReadyToPlay();
	void OnRep_IsAllowedToTeleport();
	void OnTeleportEnabled__DelegateSignature(bool IsEnabled);
	void OnTeleporterTriggered(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);
	void OnTeleportInteractWithPlayer__DelegateSignature(class ADBDPlayer* Player);
	void OnTimerEnd(class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinkedTeleporterComponent">();
	}
	static class ULinkedTeleporterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinkedTeleporterComponent>();
	}
};
static_assert(alignof(ULinkedTeleporterComponent) == 0x000008, "Wrong alignment on ULinkedTeleporterComponent");
static_assert(sizeof(ULinkedTeleporterComponent) == 0x0001D8, "Wrong size on ULinkedTeleporterComponent");
static_assert(offsetof(ULinkedTeleporterComponent, Cosmetic_OnTeleporterEnabled) == 0x0000D8, "Member 'ULinkedTeleporterComponent::Cosmetic_OnTeleporterEnabled' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, Cosmetic_OnPlayerTeleported) == 0x0000E8, "Member 'ULinkedTeleporterComponent::Cosmetic_OnPlayerTeleported' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, Cosmetic_OnPlayerCooldownOver) == 0x0000F8, "Member 'ULinkedTeleporterComponent::Cosmetic_OnPlayerCooldownOver' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, _linkedTeleporter) == 0x000108, "Member 'ULinkedTeleporterComponent::_linkedTeleporter' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, _isAllowedToTeleport) == 0x000110, "Member 'ULinkedTeleporterComponent::_isAllowedToTeleport' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, _teleportationCooldownTime) == 0x000178, "Member 'ULinkedTeleporterComponent::_teleportationCooldownTime' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, _survivorTagsPreventingTeleport) == 0x0001A0, "Member 'ULinkedTeleporterComponent::_survivorTagsPreventingTeleport' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, _killerTagsPreventingTeleport) == 0x0001B0, "Member 'ULinkedTeleporterComponent::_killerTagsPreventingTeleport' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterComponent, _forceCamperDropSpecialItemOnTeleport) == 0x0001C0, "Member 'ULinkedTeleporterComponent::_forceCamperDropSpecialItemOnTeleport' has a wrong offset!");

// Class Halloween.LinkedTeleporterOutlineStrategy
// 0x0048 (0x0190 - 0x0148)
class ULinkedTeleporterOutlineStrategy final : public USourceBasedOutlineUpdateStrategy
{
public:
	struct FLinearColor                           _displayColor;                                     // 0x0148(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _distanceToReveal;                                 // 0x0158(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinkedTeleporterOutlineStrategy">();
	}
	static class ULinkedTeleporterOutlineStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinkedTeleporterOutlineStrategy>();
	}
};
static_assert(alignof(ULinkedTeleporterOutlineStrategy) == 0x000008, "Wrong alignment on ULinkedTeleporterOutlineStrategy");
static_assert(sizeof(ULinkedTeleporterOutlineStrategy) == 0x000190, "Wrong size on ULinkedTeleporterOutlineStrategy");
static_assert(offsetof(ULinkedTeleporterOutlineStrategy, _displayColor) == 0x000148, "Member 'ULinkedTeleporterOutlineStrategy::_displayColor' has a wrong offset!");
static_assert(offsetof(ULinkedTeleporterOutlineStrategy, _distanceToReveal) == 0x000158, "Member 'ULinkedTeleporterOutlineStrategy::_distanceToReveal' has a wrong offset!");

// Class Halloween.MeatHookCentrifugeAnimInstance
// 0x0040 (0x03D0 - 0x0390)
class UMeatHookCentrifugeAnimInstance final : public UHalloweenCentrifugeAnimInstance
{
public:
	uint8                                         Pad_390[0x28];                                     // 0x0390(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _animationLength;                                  // 0x03B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3BC[0x14];                                     // 0x03BC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerHooked(class AMeatHook* MeatHook);
	void OnPlayerNoLongerOnHook(class AMeatHook* MeatHook);
	void PlayerHooked(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);
	void PlayerNoLongerOnHook(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeatHookCentrifugeAnimInstance">();
	}
	static class UMeatHookCentrifugeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeatHookCentrifugeAnimInstance>();
	}
};
static_assert(alignof(UMeatHookCentrifugeAnimInstance) == 0x000010, "Wrong alignment on UMeatHookCentrifugeAnimInstance");
static_assert(sizeof(UMeatHookCentrifugeAnimInstance) == 0x0003D0, "Wrong size on UMeatHookCentrifugeAnimInstance");
static_assert(offsetof(UMeatHookCentrifugeAnimInstance, _animationLength) == 0x0003B8, "Member 'UMeatHookCentrifugeAnimInstance::_animationLength' has a wrong offset!");

// Class Halloween.PlayerVoidEnergy
// 0x0208 (0x02B0 - 0x00A8)
class UPlayerVoidEnergy final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x60];                                      // 0x00A8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	EVoidEnergyChangeReason                       _reasonLastVoidEnergyChangeOccurred;               // 0x0108(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _currentVoidEnergy;                                // 0x010C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _totalVoidEnergySpent;                             // 0x0110(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_114[0x2C];                                     // 0x0114(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxEnergyOnPlayerAllowed;                         // 0x0140(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountLostOnDownAsSurvivor;                       // 0x0168(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountGainedOnDownAsKiller;                       // 0x0190(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountGainedOnStunAsSurvivor;                     // 0x01B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountGainedOnBlindAsSurvivor;                    // 0x01E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountLostOnStunAsKiller;                         // 0x0208(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeHasteEffectLasts;                             // 0x0230(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UVoidEnergyOrbSpawner>      _voidEnergyOrbSpawnerClass;                        // 0x0258(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0x50];                                     // 0x0260(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_AddVoidEnergy(const int32 AmountToAdd, const EVoidEnergyType VoidEnergyType);
	void Multicast_ShowVoidEnergyChanges(const int32 PreviousVoidEnergyCount, const int32 NewVoidEnergyCount);
	void OnLevelReadyToPlay();
	void OnLocallyControlledChanged(bool IsLocallyControlled);
	void OnLocallyObservedChanged(class ADBDPlayer* Player);
	void OnRep_CurrentVoidEnergy(int32 PreviousEnergyCount);
	void OnRep_TotalVoidEnergySpent(int32 PreviousTotalVoidEnergySpent);
	void OnVoidEnergyGained();
	void OnVoidEnergyLost(EVoidEnergyChangeReason ChangeReason);

	int32 GetCurrentVoidEnergyCount() const;
	int32 GetMaxAmountOfVoidEnergyCanReceive() const;
	int32 GetTotalVoidEnergyDeposited() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerVoidEnergy">();
	}
	static class UPlayerVoidEnergy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerVoidEnergy>();
	}
};
static_assert(alignof(UPlayerVoidEnergy) == 0x000008, "Wrong alignment on UPlayerVoidEnergy");
static_assert(sizeof(UPlayerVoidEnergy) == 0x0002B0, "Wrong size on UPlayerVoidEnergy");
static_assert(offsetof(UPlayerVoidEnergy, _reasonLastVoidEnergyChangeOccurred) == 0x000108, "Member 'UPlayerVoidEnergy::_reasonLastVoidEnergyChangeOccurred' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _currentVoidEnergy) == 0x00010C, "Member 'UPlayerVoidEnergy::_currentVoidEnergy' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _totalVoidEnergySpent) == 0x000110, "Member 'UPlayerVoidEnergy::_totalVoidEnergySpent' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _maxEnergyOnPlayerAllowed) == 0x000140, "Member 'UPlayerVoidEnergy::_maxEnergyOnPlayerAllowed' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountLostOnDownAsSurvivor) == 0x000168, "Member 'UPlayerVoidEnergy::_amountLostOnDownAsSurvivor' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountGainedOnDownAsKiller) == 0x000190, "Member 'UPlayerVoidEnergy::_amountGainedOnDownAsKiller' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountGainedOnStunAsSurvivor) == 0x0001B8, "Member 'UPlayerVoidEnergy::_amountGainedOnStunAsSurvivor' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountGainedOnBlindAsSurvivor) == 0x0001E0, "Member 'UPlayerVoidEnergy::_amountGainedOnBlindAsSurvivor' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountLostOnStunAsKiller) == 0x000208, "Member 'UPlayerVoidEnergy::_amountLostOnStunAsKiller' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _timeHasteEffectLasts) == 0x000230, "Member 'UPlayerVoidEnergy::_timeHasteEffectLasts' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _voidEnergyOrbSpawnerClass) == 0x000258, "Member 'UPlayerVoidEnergy::_voidEnergyOrbSpawnerClass' has a wrong offset!");

// Class Halloween.Pumpkin
// 0x0260 (0x0648 - 0x03E8)
class APumpkin final : public ASpecialBehaviourInteractable
{
public:
	uint8                                         Pad_3E8[0x18];                                     // 0x03E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _specialBehaviourId;                               // 0x0400(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPumpkinType                                  _pumpkinType;                                      // 0x040C(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHalloweenPumpkinInteraction*           _pumpkinInteractionSurvivor;                       // 0x0410(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHalloweenPumpkinInteraction*           _pumpkinInteractionKiller;                         // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _pumpkinInteractionChargeable;                     // 0x0420(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _pumpkinInteractionChargeableKiller;               // 0x0428(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractor*                            _pumpkinInteractor;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _pumpkinInteractionZone;                           // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _sphereBlockingZone;                               // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URespawnableComponent*                  _respawnableComponent;                             // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinInteractionSecondsToCharge;                // 0x0450(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinInteractionSecondsToChargeKiller;          // 0x0478(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _auraColorWhileInteracting;                        // 0x04A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinTreatChance;                               // 0x04B0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinTrickChance;                               // 0x04D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinTreatDuration;                             // 0x0500(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinTrickDuration;                             // 0x0528(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinSpeedBoost;                                // 0x0550(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _pumpkinSpeedDebuff;                               // 0x0578(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _pumpkinTreatEffect;                               // 0x05A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _pumpkinTrickEffect;                               // 0x05A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToWaitBeforeRespawnPumpkin;                   // 0x05B0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToWaitBeforeRespawnPumpkinInVoid;             // 0x05D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _pumpkinStatusEffect;                              // 0x0600(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minDistanceToFollowPlayer;                        // 0x0608(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _maxDistanceToFollowPlayer;                        // 0x0610(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_614[0x34];                                     // 0x0614(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnInteractionCompleted(class ADBDPlayer* InteractingPlayer);
	void Cosmetic_OnIntroCompleted();
	void Cosmetic_OnRespawn();
	void Cosmetic_OnStartedInteracting(class ADBDPlayer* InteractingPlayer, float InteractionDuration);
	void Cosmetic_OnStoppedInteracting();
	void Multicast_OnRespawn();
	void OnInteractionCompleted(class ADBDPlayer* InteractingPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Pumpkin">();
	}
	static class APumpkin* GetDefaultObj()
	{
		return GetDefaultObjImpl<APumpkin>();
	}
};
static_assert(alignof(APumpkin) == 0x000008, "Wrong alignment on APumpkin");
static_assert(sizeof(APumpkin) == 0x000648, "Wrong size on APumpkin");
static_assert(offsetof(APumpkin, _specialBehaviourId) == 0x000400, "Member 'APumpkin::_specialBehaviourId' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinType) == 0x00040C, "Member 'APumpkin::_pumpkinType' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractionSurvivor) == 0x000410, "Member 'APumpkin::_pumpkinInteractionSurvivor' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractionKiller) == 0x000418, "Member 'APumpkin::_pumpkinInteractionKiller' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractionChargeable) == 0x000420, "Member 'APumpkin::_pumpkinInteractionChargeable' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractionChargeableKiller) == 0x000428, "Member 'APumpkin::_pumpkinInteractionChargeableKiller' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractor) == 0x000430, "Member 'APumpkin::_pumpkinInteractor' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractionZone) == 0x000438, "Member 'APumpkin::_pumpkinInteractionZone' has a wrong offset!");
static_assert(offsetof(APumpkin, _sphereBlockingZone) == 0x000440, "Member 'APumpkin::_sphereBlockingZone' has a wrong offset!");
static_assert(offsetof(APumpkin, _respawnableComponent) == 0x000448, "Member 'APumpkin::_respawnableComponent' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractionSecondsToCharge) == 0x000450, "Member 'APumpkin::_pumpkinInteractionSecondsToCharge' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinInteractionSecondsToChargeKiller) == 0x000478, "Member 'APumpkin::_pumpkinInteractionSecondsToChargeKiller' has a wrong offset!");
static_assert(offsetof(APumpkin, _auraColorWhileInteracting) == 0x0004A0, "Member 'APumpkin::_auraColorWhileInteracting' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinTreatChance) == 0x0004B0, "Member 'APumpkin::_pumpkinTreatChance' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinTrickChance) == 0x0004D8, "Member 'APumpkin::_pumpkinTrickChance' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinTreatDuration) == 0x000500, "Member 'APumpkin::_pumpkinTreatDuration' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinTrickDuration) == 0x000528, "Member 'APumpkin::_pumpkinTrickDuration' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinSpeedBoost) == 0x000550, "Member 'APumpkin::_pumpkinSpeedBoost' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinSpeedDebuff) == 0x000578, "Member 'APumpkin::_pumpkinSpeedDebuff' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinTreatEffect) == 0x0005A0, "Member 'APumpkin::_pumpkinTreatEffect' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinTrickEffect) == 0x0005A8, "Member 'APumpkin::_pumpkinTrickEffect' has a wrong offset!");
static_assert(offsetof(APumpkin, _timeToWaitBeforeRespawnPumpkin) == 0x0005B0, "Member 'APumpkin::_timeToWaitBeforeRespawnPumpkin' has a wrong offset!");
static_assert(offsetof(APumpkin, _timeToWaitBeforeRespawnPumpkinInVoid) == 0x0005D8, "Member 'APumpkin::_timeToWaitBeforeRespawnPumpkinInVoid' has a wrong offset!");
static_assert(offsetof(APumpkin, _pumpkinStatusEffect) == 0x000600, "Member 'APumpkin::_pumpkinStatusEffect' has a wrong offset!");
static_assert(offsetof(APumpkin, _minDistanceToFollowPlayer) == 0x000608, "Member 'APumpkin::_minDistanceToFollowPlayer' has a wrong offset!");
static_assert(offsetof(APumpkin, _maxDistanceToFollowPlayer) == 0x000610, "Member 'APumpkin::_maxDistanceToFollowPlayer' has a wrong offset!");

// Class Halloween.SpawnHauntProjectileInteraction
// 0x00E0 (0x0860 - 0x0780)
class USpawnHauntProjectileInteraction final : public UInteractionDefinition
{
public:
	uint8                                         Pad_778[0x18];                                     // 0x0778(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _preventativeStateTags;                            // 0x0790(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeBetweenEachHauntLaunch;                       // 0x07A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _windUpTimeBeforeSpawn;                            // 0x07C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UHauntProjectilePlayerInventoryComponent* _hauntInventoryComponent;                          // 0x07F0(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F8[0x68];                                     // 0x07F8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnWindUpTimerStart(class ADBDPlayer* Player, float TimerDuration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnHauntProjectileInteraction">();
	}
	static class USpawnHauntProjectileInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnHauntProjectileInteraction>();
	}
};
static_assert(alignof(USpawnHauntProjectileInteraction) == 0x000010, "Wrong alignment on USpawnHauntProjectileInteraction");
static_assert(sizeof(USpawnHauntProjectileInteraction) == 0x000860, "Wrong size on USpawnHauntProjectileInteraction");
static_assert(offsetof(USpawnHauntProjectileInteraction, _preventativeStateTags) == 0x000790, "Member 'USpawnHauntProjectileInteraction::_preventativeStateTags' has a wrong offset!");
static_assert(offsetof(USpawnHauntProjectileInteraction, _timeBetweenEachHauntLaunch) == 0x0007A0, "Member 'USpawnHauntProjectileInteraction::_timeBetweenEachHauntLaunch' has a wrong offset!");
static_assert(offsetof(USpawnHauntProjectileInteraction, _windUpTimeBeforeSpawn) == 0x0007C8, "Member 'USpawnHauntProjectileInteraction::_windUpTimeBeforeSpawn' has a wrong offset!");
static_assert(offsetof(USpawnHauntProjectileInteraction, _hauntInventoryComponent) == 0x0007F0, "Member 'USpawnHauntProjectileInteraction::_hauntInventoryComponent' has a wrong offset!");

// Class Halloween.UnstableRift
// 0x0100 (0x04E8 - 0x03E8)
class AUnstableRift final : public ASpecialBehaviourInteractable
{
public:
	bool                                          _isInitialized;                                    // 0x03E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E9[0x1];                                      // 0x03E9(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isDepositEnergyInteractionAvailable;              // 0x03EA(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isPortalOpened;                                   // 0x03EB(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnstableRiftInteraction*               _unstableRiftInteractionSurvivor;                  // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnstableRiftInteraction*               _unstableRiftInteractionKiller;                    // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _unstableRiftInteractionChargeable;                // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractor*                            _unstableRiftInteractor;                           // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _unstableRiftInteractionZone;                      // 0x0410(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDOutlineComponent*                   _outlineComponent;                                 // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDOutlineComponent*                   _teleporterOutlineComponent;                       // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnstableRiftOutlineStrategy*           _outlineStrategy;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnstableRiftOutlineStrategy*           _teleporterOutlineStrategy;                        // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   _unstableRiftMesh;                                 // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   _teleporterMesh;                                   // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULinkedTeleporterComponent*             _linkedTeleporter;                                 // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNearTrackedActorComponent*             _nearTrackedActorAudioComponent;                   // 0x0450(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _offeringDirectionalAudioCueDistance;              // 0x0458(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _voidEnergyNeededToOpenRift;                       // 0x0480(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                          _offeringAudioEvent;                               // 0x04A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNearTrackedActorComponent*             _nearTrackedActorItemPreventionComponent;          // 0x04B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _rangeToPreventItemDrop;                           // 0x04B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _stateTagsToGivePlayersOnItemDropPreventionArea;   // 0x04C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class USpawnElementTrackerComponent*          _spawnElementTrackerComponent;                     // 0x04D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maxDistanceToFollowPlayer;                        // 0x04D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4DC[0xC];                                      // 0x04DC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_ChangeUnstableVisibility(bool IsVisible);
	void Cosmetic_OnInteractionCompleted(class ADBDPlayer* InteractingPlayer);
	void Cosmetic_OnStartedInteracting(class ADBDPlayer* InteractingPlayer, float InteractionDuration);
	void Cosmetic_OnStoppedInteracting();
	void OnInRangeChanged(bool IsWithinRange, const class AActor* TrackedActor);
	void OnIntroCompleted();
	void OnRep_IsDepositEnergyInteractionAvailable();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnstableRift">();
	}
	static class AUnstableRift* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnstableRift>();
	}
};
static_assert(alignof(AUnstableRift) == 0x000008, "Wrong alignment on AUnstableRift");
static_assert(sizeof(AUnstableRift) == 0x0004E8, "Wrong size on AUnstableRift");
static_assert(offsetof(AUnstableRift, _isInitialized) == 0x0003E8, "Member 'AUnstableRift::_isInitialized' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _isDepositEnergyInteractionAvailable) == 0x0003EA, "Member 'AUnstableRift::_isDepositEnergyInteractionAvailable' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _isPortalOpened) == 0x0003EB, "Member 'AUnstableRift::_isPortalOpened' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionSurvivor) == 0x0003F0, "Member 'AUnstableRift::_unstableRiftInteractionSurvivor' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionKiller) == 0x0003F8, "Member 'AUnstableRift::_unstableRiftInteractionKiller' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionChargeable) == 0x000400, "Member 'AUnstableRift::_unstableRiftInteractionChargeable' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractor) == 0x000408, "Member 'AUnstableRift::_unstableRiftInteractor' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionZone) == 0x000410, "Member 'AUnstableRift::_unstableRiftInteractionZone' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _outlineComponent) == 0x000418, "Member 'AUnstableRift::_outlineComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _teleporterOutlineComponent) == 0x000420, "Member 'AUnstableRift::_teleporterOutlineComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _outlineStrategy) == 0x000428, "Member 'AUnstableRift::_outlineStrategy' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _teleporterOutlineStrategy) == 0x000430, "Member 'AUnstableRift::_teleporterOutlineStrategy' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftMesh) == 0x000438, "Member 'AUnstableRift::_unstableRiftMesh' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _teleporterMesh) == 0x000440, "Member 'AUnstableRift::_teleporterMesh' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _linkedTeleporter) == 0x000448, "Member 'AUnstableRift::_linkedTeleporter' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _nearTrackedActorAudioComponent) == 0x000450, "Member 'AUnstableRift::_nearTrackedActorAudioComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _offeringDirectionalAudioCueDistance) == 0x000458, "Member 'AUnstableRift::_offeringDirectionalAudioCueDistance' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _voidEnergyNeededToOpenRift) == 0x000480, "Member 'AUnstableRift::_voidEnergyNeededToOpenRift' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _offeringAudioEvent) == 0x0004A8, "Member 'AUnstableRift::_offeringAudioEvent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _nearTrackedActorItemPreventionComponent) == 0x0004B0, "Member 'AUnstableRift::_nearTrackedActorItemPreventionComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _rangeToPreventItemDrop) == 0x0004B8, "Member 'AUnstableRift::_rangeToPreventItemDrop' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _stateTagsToGivePlayersOnItemDropPreventionArea) == 0x0004C0, "Member 'AUnstableRift::_stateTagsToGivePlayersOnItemDropPreventionArea' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _spawnElementTrackerComponent) == 0x0004D0, "Member 'AUnstableRift::_spawnElementTrackerComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _maxDistanceToFollowPlayer) == 0x0004D8, "Member 'AUnstableRift::_maxDistanceToFollowPlayer' has a wrong offset!");

// Class Halloween.UnstableRiftInteraction
// 0x0010 (0x0970 - 0x0960)
class UUnstableRiftInteraction final : public UDepositVoidEnergyInteraction
{
public:
	uint8                                         Pad_960[0x10];                                     // 0x0960(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnstableRiftInteraction">();
	}
	static class UUnstableRiftInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnstableRiftInteraction>();
	}
};
static_assert(alignof(UUnstableRiftInteraction) == 0x000010, "Wrong alignment on UUnstableRiftInteraction");
static_assert(sizeof(UUnstableRiftInteraction) == 0x000970, "Wrong size on UUnstableRiftInteraction");

// Class Halloween.UnstableRiftOutlineStrategy
// 0x0048 (0x0190 - 0x0148)
class UUnstableRiftOutlineStrategy final : public USourceBasedOutlineUpdateStrategy
{
public:
	struct FLinearColor                           _displayColor;                                     // 0x0148(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _distanceToReveal;                                 // 0x0158(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          _isAuraOfRiftNoTeleporter;                         // 0x0180(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_181[0xF];                                      // 0x0181(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnstableRiftOutlineStrategy">();
	}
	static class UUnstableRiftOutlineStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnstableRiftOutlineStrategy>();
	}
};
static_assert(alignof(UUnstableRiftOutlineStrategy) == 0x000008, "Wrong alignment on UUnstableRiftOutlineStrategy");
static_assert(sizeof(UUnstableRiftOutlineStrategy) == 0x000190, "Wrong size on UUnstableRiftOutlineStrategy");
static_assert(offsetof(UUnstableRiftOutlineStrategy, _displayColor) == 0x000148, "Member 'UUnstableRiftOutlineStrategy::_displayColor' has a wrong offset!");
static_assert(offsetof(UUnstableRiftOutlineStrategy, _distanceToReveal) == 0x000158, "Member 'UUnstableRiftOutlineStrategy::_distanceToReveal' has a wrong offset!");
static_assert(offsetof(UUnstableRiftOutlineStrategy, _isAuraOfRiftNoTeleporter) == 0x000180, "Member 'UUnstableRiftOutlineStrategy::_isAuraOfRiftNoTeleporter' has a wrong offset!");

// Class Halloween.VoidEnergyAmountInMatchQEEvaluator
// 0x0008 (0x00C0 - 0x00B8)
class UVoidEnergyAmountInMatchQEEvaluator final : public UVoidEnergyChangeQEEvaluator
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyAmountInMatchQEEvaluator">();
	}
	static class UVoidEnergyAmountInMatchQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyAmountInMatchQEEvaluator>();
	}
};
static_assert(alignof(UVoidEnergyAmountInMatchQEEvaluator) == 0x000008, "Wrong alignment on UVoidEnergyAmountInMatchQEEvaluator");
static_assert(sizeof(UVoidEnergyAmountInMatchQEEvaluator) == 0x0000C0, "Wrong size on UVoidEnergyAmountInMatchQEEvaluator");

// Class Halloween.VoidEnergyProducer
// 0x00C0 (0x0168 - 0x00A8)
class UVoidEnergyProducer : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _hasMaxEnergyToGive;                               // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxEnergyCanAward;                                // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _energyToGiveOnEvent;                              // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  _gameEventToRewardEnergy;                          // 0x0118(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         _totalEnergyGiven;                                 // 0x0138(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x14];                                     // 0x013C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _voidEnergySpawnObjectName;                        // 0x0150(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        _spawnSceneComponent;                              // 0x0160(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Cosmetic_OnVoidOrbsSpawned(const int32 OrbsSpawned);
	void OnRep_TotalEnergyGiven(int32 LastTotalEnergyGivenValue);

	int32 GetRemainingEnergy() const;
	bool HasEnergyLeftToGive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyProducer">();
	}
	static class UVoidEnergyProducer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyProducer>();
	}
};
static_assert(alignof(UVoidEnergyProducer) == 0x000008, "Wrong alignment on UVoidEnergyProducer");
static_assert(sizeof(UVoidEnergyProducer) == 0x000168, "Wrong size on UVoidEnergyProducer");
static_assert(offsetof(UVoidEnergyProducer, _hasMaxEnergyToGive) == 0x0000C0, "Member 'UVoidEnergyProducer::_hasMaxEnergyToGive' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _maxEnergyCanAward) == 0x0000C8, "Member 'UVoidEnergyProducer::_maxEnergyCanAward' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _energyToGiveOnEvent) == 0x0000F0, "Member 'UVoidEnergyProducer::_energyToGiveOnEvent' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _gameEventToRewardEnergy) == 0x000118, "Member 'UVoidEnergyProducer::_gameEventToRewardEnergy' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _totalEnergyGiven) == 0x000138, "Member 'UVoidEnergyProducer::_totalEnergyGiven' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _voidEnergySpawnObjectName) == 0x000150, "Member 'UVoidEnergyProducer::_voidEnergySpawnObjectName' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _spawnSceneComponent) == 0x000160, "Member 'UVoidEnergyProducer::_spawnSceneComponent' has a wrong offset!");

// Class Halloween.VoidEnergyGeneratorComponent
// 0x0080 (0x01E8 - 0x0168)
class UVoidEnergyGeneratorComponent final : public UVoidEnergyProducer
{
public:
	struct FDBDTunableRowHandle                   _timeWorkingOnGeneratorNeededToAwardEnergy;        // 0x0168(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x58];                                     // 0x0190(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentTimeDoneOnGenerator(class ADBDPlayer* Player) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyGeneratorComponent">();
	}
	static class UVoidEnergyGeneratorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyGeneratorComponent>();
	}
};
static_assert(alignof(UVoidEnergyGeneratorComponent) == 0x000008, "Wrong alignment on UVoidEnergyGeneratorComponent");
static_assert(sizeof(UVoidEnergyGeneratorComponent) == 0x0001E8, "Wrong size on UVoidEnergyGeneratorComponent");
static_assert(offsetof(UVoidEnergyGeneratorComponent, _timeWorkingOnGeneratorNeededToAwardEnergy) == 0x000168, "Member 'UVoidEnergyGeneratorComponent::_timeWorkingOnGeneratorNeededToAwardEnergy' has a wrong offset!");

// Class Halloween.VoidEnergyMeatHookComponent
// 0x0000 (0x0168 - 0x0168)
class UVoidEnergyMeatHookComponent final : public UVoidEnergyProducer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyMeatHookComponent">();
	}
	static class UVoidEnergyMeatHookComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyMeatHookComponent>();
	}
};
static_assert(alignof(UVoidEnergyMeatHookComponent) == 0x000008, "Wrong alignment on UVoidEnergyMeatHookComponent");
static_assert(sizeof(UVoidEnergyMeatHookComponent) == 0x000168, "Wrong size on UVoidEnergyMeatHookComponent");

// Class Halloween.VoidEnergyOrb
// 0x00B0 (0x0350 - 0x02A0)
class AVoidEnergyOrb final : public AActor
{
public:
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _characterBoneName;                                // 0x02B0(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _timeToMoveToTarget;                               // 0x02C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x4];                                      // 0x02E8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _timeBeforeCollectionToPlaySound;                  // 0x02EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x4];                                      // 0x02F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _minAmplitudeAllowed;                              // 0x02F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maxAmplitudeAllowed;                              // 0x02F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0x54];                                     // 0x02FC(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_DelayBeforeCollection(class ADBDPlayer* PlayerGivingOrbTo);
	void Cosmetic_OnOrbDisappearWithCollection(class ADBDPlayer* PlayerGivingOrbTo);
	void Cosmetic_OnOrbDisappearWithoutCollection();
	void Cosmetic_OnOrbSpawned(class ADBDPlayer* PlayerGivingOrbTo);
	void PlaceOrbInQueue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyOrb">();
	}
	static class AVoidEnergyOrb* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVoidEnergyOrb>();
	}
};
static_assert(alignof(AVoidEnergyOrb) == 0x000008, "Wrong alignment on AVoidEnergyOrb");
static_assert(sizeof(AVoidEnergyOrb) == 0x000350, "Wrong size on AVoidEnergyOrb");
static_assert(offsetof(AVoidEnergyOrb, _characterBoneName) == 0x0002B0, "Member 'AVoidEnergyOrb::_characterBoneName' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _timeToMoveToTarget) == 0x0002C0, "Member 'AVoidEnergyOrb::_timeToMoveToTarget' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _timeBeforeCollectionToPlaySound) == 0x0002EC, "Member 'AVoidEnergyOrb::_timeBeforeCollectionToPlaySound' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _minAmplitudeAllowed) == 0x0002F4, "Member 'AVoidEnergyOrb::_minAmplitudeAllowed' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _maxAmplitudeAllowed) == 0x0002F8, "Member 'AVoidEnergyOrb::_maxAmplitudeAllowed' has a wrong offset!");

// Class Halloween.VoidEnergyOrbSpawner
// 0x0168 (0x0210 - 0x00A8)
class alignas(0x10) UVoidEnergyOrbSpawner final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _timeBetweenEachSpawn;                             // 0x00B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _totalDistanceForOrbs;                             // 0x00E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxDistanceDown;                                  // 0x0108(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeOrbMoves;                                     // 0x0130(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeOrbHovers;                                    // 0x0158(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _downedSurviorSpawnOffsetHeight;                   // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _slasherSpawnOffset;                               // 0x0184(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _slasherSpawnOffsetFarDown;                        // 0x0188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18C[0x14];                                     // 0x018C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     _voidEnergyOrbClass;                               // 0x01A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayTag>                   _killerDownGameEvents;                             // 0x01A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x58];                                     // 0x01B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_GiveVoidEnergyToPlayer(const EVoidEnergyType VoidEnergyType, const int32 VoidEnergyToAdd);
	void Authority_KillerDownSurvivor(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);
	void Authority_SurvivorBlindKiller(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);
	void Authority_SurvivorStunKiller(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);
	void Authority_TimerSpawnVoidEnergyOrb(const struct FOrbProperties& OrbProperties);
	void Multicast_SpawnVoidEnergyOrb(const struct FOrbProperties& OrbProperties);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyOrbSpawner">();
	}
	static class UVoidEnergyOrbSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyOrbSpawner>();
	}
};
static_assert(alignof(UVoidEnergyOrbSpawner) == 0x000010, "Wrong alignment on UVoidEnergyOrbSpawner");
static_assert(sizeof(UVoidEnergyOrbSpawner) == 0x000210, "Wrong size on UVoidEnergyOrbSpawner");
static_assert(offsetof(UVoidEnergyOrbSpawner, _timeBetweenEachSpawn) == 0x0000B8, "Member 'UVoidEnergyOrbSpawner::_timeBetweenEachSpawn' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _totalDistanceForOrbs) == 0x0000E0, "Member 'UVoidEnergyOrbSpawner::_totalDistanceForOrbs' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _maxDistanceDown) == 0x000108, "Member 'UVoidEnergyOrbSpawner::_maxDistanceDown' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _timeOrbMoves) == 0x000130, "Member 'UVoidEnergyOrbSpawner::_timeOrbMoves' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _timeOrbHovers) == 0x000158, "Member 'UVoidEnergyOrbSpawner::_timeOrbHovers' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _downedSurviorSpawnOffsetHeight) == 0x000180, "Member 'UVoidEnergyOrbSpawner::_downedSurviorSpawnOffsetHeight' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _slasherSpawnOffset) == 0x000184, "Member 'UVoidEnergyOrbSpawner::_slasherSpawnOffset' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _slasherSpawnOffsetFarDown) == 0x000188, "Member 'UVoidEnergyOrbSpawner::_slasherSpawnOffsetFarDown' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _voidEnergyOrbClass) == 0x0001A0, "Member 'UVoidEnergyOrbSpawner::_voidEnergyOrbClass' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _killerDownGameEvents) == 0x0001A8, "Member 'UVoidEnergyOrbSpawner::_killerDownGameEvents' has a wrong offset!");

// Class Halloween.VoidEnergyPumpkinComponent
// 0x0078 (0x01E0 - 0x0168)
class UVoidEnergyPumpkinComponent final : public UVoidEnergyProducer
{
public:
	struct FDBDTunableRowHandle                   _treatVoidEnergyAmount;                            // 0x0168(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _trickVoidEnergyAmount;                            // 0x0190(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _neutralVoidEnergyAmount;                          // 0x01B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyPumpkinComponent">();
	}
	static class UVoidEnergyPumpkinComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyPumpkinComponent>();
	}
};
static_assert(alignof(UVoidEnergyPumpkinComponent) == 0x000008, "Wrong alignment on UVoidEnergyPumpkinComponent");
static_assert(sizeof(UVoidEnergyPumpkinComponent) == 0x0001E0, "Wrong size on UVoidEnergyPumpkinComponent");
static_assert(offsetof(UVoidEnergyPumpkinComponent, _treatVoidEnergyAmount) == 0x000168, "Member 'UVoidEnergyPumpkinComponent::_treatVoidEnergyAmount' has a wrong offset!");
static_assert(offsetof(UVoidEnergyPumpkinComponent, _trickVoidEnergyAmount) == 0x000190, "Member 'UVoidEnergyPumpkinComponent::_trickVoidEnergyAmount' has a wrong offset!");
static_assert(offsetof(UVoidEnergyPumpkinComponent, _neutralVoidEnergyAmount) == 0x0001B8, "Member 'UVoidEnergyPumpkinComponent::_neutralVoidEnergyAmount' has a wrong offset!");

// Class Halloween.VoidZonePlayerComponent
// 0x00F0 (0x0198 - 0x00A8)
class UVoidZonePlayerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStatusEffect*>                  _voidWorldStatusEffects;                           // 0x00B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UStatusEffect>>      _statusEffectClassesToApplyToKillersOnEnterVoid;   // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UStatusEffect>>      _statusEffectClassesToApplyToSurvivorsOnEnterVoid; // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	class ULinkedTeleporterComponent*             _lastVoidZoneTeleporterUsed;                       // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _voidWorldHauntInteractionStatusEffect;            // 0x00E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayerEventDispatcher*                 _playerEventDispatcher;                            // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayTag>                   _stateTagsWaitForInteractionEndOnVoidClose;        // 0x00F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UInteractionDefinition*                 _owningPlayerInteraction;                          // 0x0108(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULocalPlayerTrackerComponent*           _localPlayerTracker;                               // 0x0110(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _voidZoneLightingLocation;                         // 0x0128(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x8];                                      // 0x0140(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _cageAnimationWaitTime;                            // 0x0148(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x34];                                     // 0x014C(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _standardRealmGameTag;                             // 0x0180(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _voidRealmGameTag;                                 // 0x018C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnExecutionerCageTeleportedOutOfVoidZone();
	void Authority_OnInteractionEnd();
	void Cosmetic_OnPlayerTeleported(bool TeleportIntoVoid);
	void OnLocallyObservedChanged();
	void PlayerDreamStateChanged(bool IsInDreamworld, bool LocallyObservedChanged);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidZonePlayerComponent">();
	}
	static class UVoidZonePlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidZonePlayerComponent>();
	}
};
static_assert(alignof(UVoidZonePlayerComponent) == 0x000008, "Wrong alignment on UVoidZonePlayerComponent");
static_assert(sizeof(UVoidZonePlayerComponent) == 0x000198, "Wrong size on UVoidZonePlayerComponent");
static_assert(offsetof(UVoidZonePlayerComponent, _voidWorldStatusEffects) == 0x0000B0, "Member 'UVoidZonePlayerComponent::_voidWorldStatusEffects' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _statusEffectClassesToApplyToKillersOnEnterVoid) == 0x0000C0, "Member 'UVoidZonePlayerComponent::_statusEffectClassesToApplyToKillersOnEnterVoid' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _statusEffectClassesToApplyToSurvivorsOnEnterVoid) == 0x0000D0, "Member 'UVoidZonePlayerComponent::_statusEffectClassesToApplyToSurvivorsOnEnterVoid' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _lastVoidZoneTeleporterUsed) == 0x0000E0, "Member 'UVoidZonePlayerComponent::_lastVoidZoneTeleporterUsed' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _voidWorldHauntInteractionStatusEffect) == 0x0000E8, "Member 'UVoidZonePlayerComponent::_voidWorldHauntInteractionStatusEffect' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _playerEventDispatcher) == 0x0000F0, "Member 'UVoidZonePlayerComponent::_playerEventDispatcher' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _stateTagsWaitForInteractionEndOnVoidClose) == 0x0000F8, "Member 'UVoidZonePlayerComponent::_stateTagsWaitForInteractionEndOnVoidClose' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _owningPlayerInteraction) == 0x000108, "Member 'UVoidZonePlayerComponent::_owningPlayerInteraction' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _localPlayerTracker) == 0x000110, "Member 'UVoidZonePlayerComponent::_localPlayerTracker' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _voidZoneLightingLocation) == 0x000128, "Member 'UVoidZonePlayerComponent::_voidZoneLightingLocation' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _cageAnimationWaitTime) == 0x000148, "Member 'UVoidZonePlayerComponent::_cageAnimationWaitTime' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _standardRealmGameTag) == 0x000180, "Member 'UVoidZonePlayerComponent::_standardRealmGameTag' has a wrong offset!");
static_assert(offsetof(UVoidZonePlayerComponent, _voidRealmGameTag) == 0x00018C, "Member 'UVoidZonePlayerComponent::_voidRealmGameTag' has a wrong offset!");

}

